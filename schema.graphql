type Article implements Node {
  """Reads and enables pagination through a set of `ArticleGenre`."""
  articleGenres(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleGenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArticleGenre`."""
    orderBy: [ArticleGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleGenresConnection!

  """Reads and enables pagination through a set of `ArticleGenre`."""
  articleGenresList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleGenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArticleGenre`."""
    orderBy: [ArticleGenresOrderBy!]
  ): [ArticleGenre!]!

  """Reads and enables pagination through a set of `ArticleImage`."""
  articleImages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArticleImage`."""
    orderBy: [ArticleImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleImagesConnection!

  """Reads and enables pagination through a set of `ArticleImage`."""
  articleImagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArticleImage`."""
    orderBy: [ArticleImagesOrderBy!]
  ): [ArticleImage!]!

  """Reads and enables pagination through a set of `ArticleLocale`."""
  articleLocalesBySourceId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArticleLocale`."""
    orderBy: [ArticleLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleLocalesConnection!

  """Reads and enables pagination through a set of `ArticleLocale`."""
  articleLocalesBySourceIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArticleLocale`."""
    orderBy: [ArticleLocalesOrderBy!]
  ): [ArticleLocale!]!

  """Reads and enables pagination through a set of `ArticleTag`."""
  articleTags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleTagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArticleTag`."""
    orderBy: [ArticleTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleTagsConnection!

  """Reads and enables pagination through a set of `ArticleTag`."""
  articleTagsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleTagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArticleTag`."""
    orderBy: [ArticleTagsOrderBy!]
  ): [ArticleTag!]!

  """Reads a single `User` that is related to this `Article`."""
  author: User
  authorId: Int
  content: String
  createdAt: Datetime!
  description: String

  """Reads a single `ArticleGallery` that is related to this `Article`."""
  gallery: ArticleGallery
  galleryId: Int

  """Reads and enables pagination through a set of `Genre`."""
  genres(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Genre`."""
    orderBy: [GenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): GenresConnection!

  """Reads and enables pagination through a set of `Genre`."""
  genresList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Genre`."""
    orderBy: [GenresOrderBy!]
  ): [Genre!]!
  id: Int!

  """Reads and enables pagination through a set of `Image`."""
  images(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesConnection!

  """Reads and enables pagination through a set of `Image`."""
  imagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!]
  ): [Image!]!

  """Reads and enables pagination through a set of `Language`."""
  languages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!]
  ): [Language!]!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """SEO friendly name to use in url"""
  path: String!

  """Reads a single `Image` that is related to this `Article`."""
  poster: Image
  posterId: Int
  published: Boolean!

  """
  This is automatically changed if 'published' changed, can be manually provided by 'admin'.
  """
  publishedAt: Datetime

  """Reads and enables pagination through a set of `Tag`."""
  tags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsConnection!

  """Reads and enables pagination through a set of `Tag`."""
  tagsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!]
  ): [Tag!]!
  title: String
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `Article`."""
  updater: User
  updaterId: Int
}

"""
A condition to be used against `Article` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ArticleCondition {
  """Checks for equality with the object’s `authorId` field."""
  authorId: Int

  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `galleryId` field."""
  galleryId: Int

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `path` field."""
  path: String

  """Checks for equality with the object’s `posterId` field."""
  posterId: Int

  """Checks for equality with the object’s `published` field."""
  published: Boolean

  """Checks for equality with the object’s `publishedAt` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `updaterId` field."""
  updaterId: Int
}

"""
A filter to be used against `Article` object types. All fields are combined with a logical ‘and.’
"""
input ArticleFilter {
  """Checks for all expressions in this list."""
  and: [ArticleFilter!]

  """Filter by the object’s `articleGenres` relation."""
  articleGenres: ArticleToManyArticleGenreFilter

  """Some related `articleGenres` exist."""
  articleGenresExist: Boolean

  """Filter by the object’s `articleImages` relation."""
  articleImages: ArticleToManyArticleImageFilter

  """Some related `articleImages` exist."""
  articleImagesExist: Boolean

  """Filter by the object’s `articleLocalesBySourceId` relation."""
  articleLocalesBySourceId: ArticleToManyArticleLocaleFilter

  """Some related `articleLocalesBySourceId` exist."""
  articleLocalesBySourceIdExist: Boolean

  """Filter by the object’s `articleTags` relation."""
  articleTags: ArticleToManyArticleTagFilter

  """Some related `articleTags` exist."""
  articleTagsExist: Boolean

  """Filter by the object’s `author` relation."""
  author: UserFilter

  """A related `author` exists."""
  authorExists: Boolean

  """Filter by the object’s `authorId` field."""
  authorId: IntFilter

  """Filter by the object’s `content` field."""
  content: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `gallery` relation."""
  gallery: ArticleGalleryFilter

  """A related `gallery` exists."""
  galleryExists: Boolean

  """Filter by the object’s `galleryId` field."""
  galleryId: IntFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Negates the expression."""
  not: ArticleFilter

  """Checks for any expressions in this list."""
  or: [ArticleFilter!]

  """Filter by the object’s `path` field."""
  path: StringFilter

  """Filter by the object’s `poster` relation."""
  poster: ImageFilter

  """A related `poster` exists."""
  posterExists: Boolean

  """Filter by the object’s `posterId` field."""
  posterId: IntFilter

  """Filter by the object’s `published` field."""
  published: BooleanFilter

  """Filter by the object’s `publishedAt` field."""
  publishedAt: DatetimeFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `updater` relation."""
  updater: UserFilter

  """A related `updater` exists."""
  updaterExists: Boolean

  """Filter by the object’s `updaterId` field."""
  updaterId: IntFilter
}

"""A connection to a list of `ArticleGallery` values."""
type ArticleGalleriesConnection {
  """
  A list of edges which contains the `ArticleGallery` and cursor to aid in pagination.
  """
  edges: [ArticleGalleriesEdge!]!

  """A list of `ArticleGallery` objects."""
  nodes: [ArticleGallery]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ArticleGallery` you could get from the connection."""
  totalCount: Int!
}

"""A `ArticleGallery` edge in the connection."""
type ArticleGalleriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArticleGallery` at the end of the edge."""
  node: ArticleGallery
}

"""Methods to use when ordering `ArticleGallery`."""
enum ArticleGalleriesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type ArticleGallery implements Node {
  """Reads and enables pagination through a set of `ArticleGalleryImage`."""
  articleGalleryImagesByGalleryId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleGalleryImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleGalleryImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArticleGalleryImage`."""
    orderBy: [ArticleGalleryImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleGalleryImagesConnection!

  """Reads and enables pagination through a set of `ArticleGalleryImage`."""
  articleGalleryImagesByGalleryIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleGalleryImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleGalleryImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArticleGalleryImage`."""
    orderBy: [ArticleGalleryImagesOrderBy!]
  ): [ArticleGalleryImage!]!

  """Reads and enables pagination through a set of `Article`."""
  articlesByGalleryId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticlesConnection!

  """Reads and enables pagination through a set of `Article`."""
  articlesByGalleryIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!]
  ): [Article!]!
  createdAt: Datetime!
  id: Int!

  """Reads and enables pagination through a set of `Image`."""
  images(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesConnection!

  """Reads and enables pagination through a set of `Image`."""
  imagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!]
  ): [Image!]!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection!

  """Reads and enables pagination through a set of `User`."""
  usersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
  ): [User!]!
}

"""
A condition to be used against `ArticleGallery` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ArticleGalleryCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `ArticleGallery` object types. All fields are combined with a logical ‘and.’
"""
input ArticleGalleryFilter {
  """Checks for all expressions in this list."""
  and: [ArticleGalleryFilter!]

  """Filter by the object’s `articleGalleryImagesByGalleryId` relation."""
  articleGalleryImagesByGalleryId: ArticleGalleryToManyArticleGalleryImageFilter

  """Some related `articleGalleryImagesByGalleryId` exist."""
  articleGalleryImagesByGalleryIdExist: Boolean

  """Filter by the object’s `articlesByGalleryId` relation."""
  articlesByGalleryId: ArticleGalleryToManyArticleFilter

  """Some related `articlesByGalleryId` exist."""
  articlesByGalleryIdExist: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Negates the expression."""
  not: ArticleGalleryFilter

  """Checks for any expressions in this list."""
  or: [ArticleGalleryFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

type ArticleGalleryImage implements Node {
  createdAt: Datetime!

  """
  Reads a single `ArticleGallery` that is related to this `ArticleGalleryImage`.
  """
  gallery: ArticleGallery
  galleryId: Int!

  """Reads a single `Image` that is related to this `ArticleGalleryImage`."""
  image: Image
  imageId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
}

"""
A condition to be used against `ArticleGalleryImage` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ArticleGalleryImageCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `galleryId` field."""
  galleryId: Int

  """Checks for equality with the object’s `imageId` field."""
  imageId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `ArticleGalleryImage` object types. All fields are combined with a logical ‘and.’
"""
input ArticleGalleryImageFilter {
  """Checks for all expressions in this list."""
  and: [ArticleGalleryImageFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `gallery` relation."""
  gallery: ArticleGalleryFilter

  """Filter by the object’s `galleryId` field."""
  galleryId: IntFilter

  """Filter by the object’s `image` relation."""
  image: ImageFilter

  """Filter by the object’s `imageId` field."""
  imageId: IntFilter

  """Negates the expression."""
  not: ArticleGalleryImageFilter

  """Checks for any expressions in this list."""
  or: [ArticleGalleryImageFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `ArticleGalleryImage`"""
input ArticleGalleryImageInput {
  galleryId: Int!
  imageId: Int!
}

"""
Represents an update to a `ArticleGalleryImage`. Fields that are set will be updated.
"""
input ArticleGalleryImagePatch {
  galleryId: Int
  imageId: Int
}

"""A connection to a list of `ArticleGalleryImage` values."""
type ArticleGalleryImagesConnection {
  """
  A list of edges which contains the `ArticleGalleryImage` and cursor to aid in pagination.
  """
  edges: [ArticleGalleryImagesEdge!]!

  """A list of `ArticleGalleryImage` objects."""
  nodes: [ArticleGalleryImage]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ArticleGalleryImage` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ArticleGalleryImage` edge in the connection."""
type ArticleGalleryImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArticleGalleryImage` at the end of the edge."""
  node: ArticleGalleryImage
}

"""Methods to use when ordering `ArticleGalleryImage`."""
enum ArticleGalleryImagesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  GALLERY_ID_ASC
  GALLERY_ID_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A filter to be used against many `Article` object types. All fields are combined with a logical ‘and.’
"""
input ArticleGalleryToManyArticleFilter {
  """
  Every related `Article` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ArticleFilter

  """
  No related `Article` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ArticleFilter

  """
  Some related `Article` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ArticleFilter
}

"""
A filter to be used against many `ArticleGalleryImage` object types. All fields are combined with a logical ‘and.’
"""
input ArticleGalleryToManyArticleGalleryImageFilter {
  """
  Every related `ArticleGalleryImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ArticleGalleryImageFilter

  """
  No related `ArticleGalleryImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ArticleGalleryImageFilter

  """
  Some related `ArticleGalleryImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ArticleGalleryImageFilter
}

type ArticleGenre implements Node {
  """Reads a single `Article` that is related to this `ArticleGenre`."""
  article: Article
  articleId: Int!
  createdAt: Datetime!

  """Reads a single `Genre` that is related to this `ArticleGenre`."""
  genre: Genre
  genreId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
}

"""
A condition to be used against `ArticleGenre` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ArticleGenreCondition {
  """Checks for equality with the object’s `articleId` field."""
  articleId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `genreId` field."""
  genreId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `ArticleGenre` object types. All fields are combined with a logical ‘and.’
"""
input ArticleGenreFilter {
  """Checks for all expressions in this list."""
  and: [ArticleGenreFilter!]

  """Filter by the object’s `article` relation."""
  article: ArticleFilter

  """Filter by the object’s `articleId` field."""
  articleId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `genre` relation."""
  genre: GenreFilter

  """Filter by the object’s `genreId` field."""
  genreId: IntFilter

  """Negates the expression."""
  not: ArticleGenreFilter

  """Checks for any expressions in this list."""
  or: [ArticleGenreFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `ArticleGenre`"""
input ArticleGenreInput {
  articleId: Int!
  genreId: Int!
}

"""
Represents an update to a `ArticleGenre`. Fields that are set will be updated.
"""
input ArticleGenrePatch {
  articleId: Int
  genreId: Int
}

"""A connection to a list of `ArticleGenre` values."""
type ArticleGenresConnection {
  """
  A list of edges which contains the `ArticleGenre` and cursor to aid in pagination.
  """
  edges: [ArticleGenresEdge!]!

  """A list of `ArticleGenre` objects."""
  nodes: [ArticleGenre]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ArticleGenre` you could get from the connection."""
  totalCount: Int!
}

"""A `ArticleGenre` edge in the connection."""
type ArticleGenresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArticleGenre` at the end of the edge."""
  node: ArticleGenre
}

"""Methods to use when ordering `ArticleGenre`."""
enum ArticleGenresOrderBy {
  ARTICLE_ID_ASC
  ARTICLE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  GENRE_ID_ASC
  GENRE_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type ArticleImage implements Node {
  """Reads a single `Article` that is related to this `ArticleImage`."""
  article: Article
  articleId: Int!
  createdAt: Datetime!

  """Reads a single `Image` that is related to this `ArticleImage`."""
  image: Image
  imageId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
}

"""
A condition to be used against `ArticleImage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ArticleImageCondition {
  """Checks for equality with the object’s `articleId` field."""
  articleId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `imageId` field."""
  imageId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `ArticleImage` object types. All fields are combined with a logical ‘and.’
"""
input ArticleImageFilter {
  """Checks for all expressions in this list."""
  and: [ArticleImageFilter!]

  """Filter by the object’s `article` relation."""
  article: ArticleFilter

  """Filter by the object’s `articleId` field."""
  articleId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `image` relation."""
  image: ImageFilter

  """Filter by the object’s `imageId` field."""
  imageId: IntFilter

  """Negates the expression."""
  not: ArticleImageFilter

  """Checks for any expressions in this list."""
  or: [ArticleImageFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `ArticleImage`"""
input ArticleImageInput {
  articleId: Int!
  imageId: Int!
}

"""
Represents an update to a `ArticleImage`. Fields that are set will be updated.
"""
input ArticleImagePatch {
  articleId: Int
  imageId: Int
}

"""A connection to a list of `ArticleImage` values."""
type ArticleImagesConnection {
  """
  A list of edges which contains the `ArticleImage` and cursor to aid in pagination.
  """
  edges: [ArticleImagesEdge!]!

  """A list of `ArticleImage` objects."""
  nodes: [ArticleImage]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ArticleImage` you could get from the connection."""
  totalCount: Int!
}

"""A `ArticleImage` edge in the connection."""
type ArticleImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArticleImage` at the end of the edge."""
  node: ArticleImage
}

"""Methods to use when ordering `ArticleImage`."""
enum ArticleImagesOrderBy {
  ARTICLE_ID_ASC
  ARTICLE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""An input for mutations affecting `Article`"""
input ArticleInput {
  authorId: Int
  content: String
  description: String
  galleryId: Int

  """SEO friendly name to use in url"""
  path: String!
  posterId: Int
  published: Boolean
  title: String
  updaterId: Int
}

type ArticleLocale implements Node {
  content: String
  createdAt: Datetime!
  description: String
  lang: String!

  """Reads a single `Language` that is related to this `ArticleLocale`."""
  languageByLang: Language

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Article` that is related to this `ArticleLocale`."""
  source: Article
  sourceId: Int!
  title: String
  updatedAt: Datetime!
}

"""
A condition to be used against `ArticleLocale` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ArticleLocaleCondition {
  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `lang` field."""
  lang: String

  """Checks for equality with the object’s `sourceId` field."""
  sourceId: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `ArticleLocale` object types. All fields are combined with a logical ‘and.’
"""
input ArticleLocaleFilter {
  """Checks for all expressions in this list."""
  and: [ArticleLocaleFilter!]

  """Filter by the object’s `content` field."""
  content: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `lang` field."""
  lang: StringFilter

  """Filter by the object’s `languageByLang` relation."""
  languageByLang: LanguageFilter

  """Negates the expression."""
  not: ArticleLocaleFilter

  """Checks for any expressions in this list."""
  or: [ArticleLocaleFilter!]

  """Filter by the object’s `source` relation."""
  source: ArticleFilter

  """Filter by the object’s `sourceId` field."""
  sourceId: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `ArticleLocale`"""
input ArticleLocaleInput {
  content: String
  description: String
  lang: String!
  sourceId: Int!
  title: String
}

"""
Represents an update to a `ArticleLocale`. Fields that are set will be updated.
"""
input ArticleLocalePatch {
  content: String
  description: String
  lang: String
  sourceId: Int
  title: String
}

"""A connection to a list of `ArticleLocale` values."""
type ArticleLocalesConnection {
  """
  A list of edges which contains the `ArticleLocale` and cursor to aid in pagination.
  """
  edges: [ArticleLocalesEdge!]!

  """A list of `ArticleLocale` objects."""
  nodes: [ArticleLocale]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ArticleLocale` you could get from the connection."""
  totalCount: Int!
}

"""A `ArticleLocale` edge in the connection."""
type ArticleLocalesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArticleLocale` at the end of the edge."""
  node: ArticleLocale
}

"""Methods to use when ordering `ArticleLocale`."""
enum ArticleLocalesOrderBy {
  CONTENT_ASC
  CONTENT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  LANG_ASC
  LANG_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SOURCE_ID_ASC
  SOURCE_ID_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Article`. Fields that are set will be updated.
"""
input ArticlePatch {
  authorId: Int
  content: String
  description: String
  galleryId: Int

  """SEO friendly name to use in url"""
  path: String
  posterId: Int
  published: Boolean

  """
  This is automatically changed if 'published' changed, can be manually provided by 'admin'.
  """
  publishedAt: Datetime
  title: String
  updaterId: Int
}

"""A connection to a list of `Article` values."""
type ArticlesConnection {
  """
  A list of edges which contains the `Article` and cursor to aid in pagination.
  """
  edges: [ArticlesEdge!]!

  """A list of `Article` objects."""
  nodes: [Article]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Article` you could get from the connection."""
  totalCount: Int!
}

"""A `Article` edge in the connection."""
type ArticlesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Article` at the end of the edge."""
  node: Article
}

"""Methods to use when ordering `Article`."""
enum ArticlesOrderBy {
  AUTHOR_ID_ASC
  AUTHOR_ID_DESC
  CONTENT_ASC
  CONTENT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  GALLERY_ID_ASC
  GALLERY_ID_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PATH_ASC
  PATH_DESC
  POSTER_ID_ASC
  POSTER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_ASC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  PUBLISHED_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  UPDATER_ID_ASC
  UPDATER_ID_DESC
}

type ArticleTag implements Node {
  """Reads a single `Article` that is related to this `ArticleTag`."""
  article: Article
  articleId: Int!
  createdAt: Datetime!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Tag` that is related to this `ArticleTag`."""
  tag: Tag
  tagId: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `ArticleTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ArticleTagCondition {
  """Checks for equality with the object’s `articleId` field."""
  articleId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `tagId` field."""
  tagId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `ArticleTag` object types. All fields are combined with a logical ‘and.’
"""
input ArticleTagFilter {
  """Checks for all expressions in this list."""
  and: [ArticleTagFilter!]

  """Filter by the object’s `article` relation."""
  article: ArticleFilter

  """Filter by the object’s `articleId` field."""
  articleId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Negates the expression."""
  not: ArticleTagFilter

  """Checks for any expressions in this list."""
  or: [ArticleTagFilter!]

  """Filter by the object’s `tag` relation."""
  tag: TagFilter

  """Filter by the object’s `tagId` field."""
  tagId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `ArticleTag`"""
input ArticleTagInput {
  articleId: Int!
  tagId: Int!
}

"""
Represents an update to a `ArticleTag`. Fields that are set will be updated.
"""
input ArticleTagPatch {
  articleId: Int
  tagId: Int
}

"""A connection to a list of `ArticleTag` values."""
type ArticleTagsConnection {
  """
  A list of edges which contains the `ArticleTag` and cursor to aid in pagination.
  """
  edges: [ArticleTagsEdge!]!

  """A list of `ArticleTag` objects."""
  nodes: [ArticleTag]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ArticleTag` you could get from the connection."""
  totalCount: Int!
}

"""A `ArticleTag` edge in the connection."""
type ArticleTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ArticleTag` at the end of the edge."""
  node: ArticleTag
}

"""Methods to use when ordering `ArticleTag`."""
enum ArticleTagsOrderBy {
  ARTICLE_ID_ASC
  ARTICLE_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TAG_ID_ASC
  TAG_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A filter to be used against many `ArticleGenre` object types. All fields are combined with a logical ‘and.’
"""
input ArticleToManyArticleGenreFilter {
  """
  Every related `ArticleGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ArticleGenreFilter

  """
  No related `ArticleGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ArticleGenreFilter

  """
  Some related `ArticleGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ArticleGenreFilter
}

"""
A filter to be used against many `ArticleImage` object types. All fields are combined with a logical ‘and.’
"""
input ArticleToManyArticleImageFilter {
  """
  Every related `ArticleImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ArticleImageFilter

  """
  No related `ArticleImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ArticleImageFilter

  """
  Some related `ArticleImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ArticleImageFilter
}

"""
A filter to be used against many `ArticleLocale` object types. All fields are combined with a logical ‘and.’
"""
input ArticleToManyArticleLocaleFilter {
  """
  Every related `ArticleLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ArticleLocaleFilter

  """
  No related `ArticleLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ArticleLocaleFilter

  """
  Some related `ArticleLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ArticleLocaleFilter
}

"""
A filter to be used against many `ArticleTag` object types. All fields are combined with a logical ‘and.’
"""
input ArticleToManyArticleTagFilter {
  """
  Every related `ArticleTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ArticleTagFilter

  """
  No related `ArticleTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ArticleTagFilter

  """
  Some related `ArticleTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ArticleTagFilter
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A filter to be used against BigFloat fields. All fields are combined with a logical ‘and.’
"""
input BigFloatFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigFloat

  """Equal to the specified value."""
  equalTo: BigFloat

  """Greater than the specified value."""
  greaterThan: BigFloat

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigFloat

  """Included in the specified list."""
  in: [BigFloat!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: BigFloat

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigFloat

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigFloat

  """Not equal to the specified value."""
  notEqualTo: BigFloat

  """Not included in the specified list."""
  notIn: [BigFloat!]
}

"""
A signed eight-byte integer. The upper big integer values are greater than the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

"""
A filter to be used against BigInt fields. All fields are combined with a logical ‘and.’
"""
input BigIntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: BigInt

  """Equal to the specified value."""
  equalTo: BigInt

  """Greater than the specified value."""
  greaterThan: BigInt

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: BigInt

  """Included in the specified list."""
  in: [BigInt!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: BigInt

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: BigInt

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: BigInt

  """Not equal to the specified value."""
  notEqualTo: BigInt

  """Not included in the specified list."""
  notIn: [BigInt!]
}

"""
A filter to be used against Boolean fields. All fields are combined with a logical ‘and.’
"""
input BooleanFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Boolean

  """Equal to the specified value."""
  equalTo: Boolean

  """Greater than the specified value."""
  greaterThan: Boolean

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Boolean

  """Included in the specified list."""
  in: [Boolean!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Boolean

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Boolean

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Boolean

  """Not equal to the specified value."""
  notEqualTo: Boolean

  """Not included in the specified list."""
  notIn: [Boolean!]
}

"""All input for the `changeUserRole` mutation."""
input ChangeUserRoleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  role: UserRole
  userId: Int
}

"""The output of our `changeUserRole` mutation."""
type ChangeUserRolePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""All input for the `changeUserStatus` mutation."""
input ChangeUserStatusInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  status: UserStatus
  userId: Int
}

"""The output of our `changeUserStatus` mutation."""
type ChangeUserStatusPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type Composition implements Node {
  composingEnd: Datetime
  composingStart: Datetime

  """Reads and enables pagination through a set of `CompositionLocale`."""
  compositionLocalesBySourceId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompositionLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CompositionLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CompositionLocale`."""
    orderBy: [CompositionLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompositionLocalesConnection!

  """Reads and enables pagination through a set of `CompositionLocale`."""
  compositionLocalesBySourceIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompositionLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CompositionLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CompositionLocale`."""
    orderBy: [CompositionLocalesOrderBy!]
  ): [CompositionLocale!]!
  createdAt: Datetime!
  description: String
  id: Int!

  """Reads and enables pagination through a set of `Language`."""
  languages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!]
  ): [Language!]!

  """Reads and enables pagination through a set of `MusicianComposition`."""
  musicianCompositions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCompositionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianCompositionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianComposition`."""
    orderBy: [MusicianCompositionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianCompositionsConnection!

  """Reads and enables pagination through a set of `MusicianComposition`."""
  musicianCompositionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCompositionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianCompositionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianComposition`."""
    orderBy: [MusicianCompositionsOrderBy!]
  ): [MusicianComposition!]!

  """Reads and enables pagination through a set of `Musician`."""
  musicians(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusiciansConnection!

  """Reads and enables pagination through a set of `Musician`."""
  musiciansList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!]
  ): [Musician!]!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """SEO friendly name to use in url"""
  path: String
  published: Boolean!

  """
  This is automatically changed if 'published' changed, can be manually provided by 'admin'.
  """
  publishedAt: Datetime

  """Reads and enables pagination through a set of `Score`."""
  scores(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Score`."""
    orderBy: [ScoresOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoresConnection!

  """Reads and enables pagination through a set of `Score`."""
  scoresList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Score`."""
    orderBy: [ScoresOrderBy!]
  ): [Score!]!
  title: String
  updatedAt: Datetime!
}

"""
A condition to be used against `Composition` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CompositionCondition {
  """Checks for equality with the object’s `composingEnd` field."""
  composingEnd: Datetime

  """Checks for equality with the object’s `composingStart` field."""
  composingStart: Datetime

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `path` field."""
  path: String

  """Checks for equality with the object’s `published` field."""
  published: Boolean

  """Checks for equality with the object’s `publishedAt` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Composition` object types. All fields are combined with a logical ‘and.’
"""
input CompositionFilter {
  """Checks for all expressions in this list."""
  and: [CompositionFilter!]

  """Filter by the object’s `composingEnd` field."""
  composingEnd: DatetimeFilter

  """Filter by the object’s `composingStart` field."""
  composingStart: DatetimeFilter

  """Filter by the object’s `compositionLocalesBySourceId` relation."""
  compositionLocalesBySourceId: CompositionToManyCompositionLocaleFilter

  """Some related `compositionLocalesBySourceId` exist."""
  compositionLocalesBySourceIdExist: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `musicianCompositions` relation."""
  musicianCompositions: CompositionToManyMusicianCompositionFilter

  """Some related `musicianCompositions` exist."""
  musicianCompositionsExist: Boolean

  """Negates the expression."""
  not: CompositionFilter

  """Checks for any expressions in this list."""
  or: [CompositionFilter!]

  """Filter by the object’s `path` field."""
  path: StringFilter

  """Filter by the object’s `published` field."""
  published: BooleanFilter

  """Filter by the object’s `publishedAt` field."""
  publishedAt: DatetimeFilter

  """Filter by the object’s `scores` relation."""
  scores: CompositionToManyScoreFilter

  """Some related `scores` exist."""
  scoresExist: Boolean

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Composition`"""
input CompositionInput {
  composingEnd: Datetime
  composingStart: Datetime
  description: String

  """SEO friendly name to use in url"""
  path: String
  published: Boolean
  title: String
}

type CompositionLocale implements Node {
  createdAt: Datetime!
  description: String
  lang: String!

  """Reads a single `Language` that is related to this `CompositionLocale`."""
  languageByLang: Language

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads a single `Composition` that is related to this `CompositionLocale`.
  """
  source: Composition
  sourceId: Int!
  title: String
  updatedAt: Datetime!
}

"""
A condition to be used against `CompositionLocale` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CompositionLocaleCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `lang` field."""
  lang: String

  """Checks for equality with the object’s `sourceId` field."""
  sourceId: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `CompositionLocale` object types. All fields are combined with a logical ‘and.’
"""
input CompositionLocaleFilter {
  """Checks for all expressions in this list."""
  and: [CompositionLocaleFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `lang` field."""
  lang: StringFilter

  """Filter by the object’s `languageByLang` relation."""
  languageByLang: LanguageFilter

  """Negates the expression."""
  not: CompositionLocaleFilter

  """Checks for any expressions in this list."""
  or: [CompositionLocaleFilter!]

  """Filter by the object’s `source` relation."""
  source: CompositionFilter

  """Filter by the object’s `sourceId` field."""
  sourceId: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `CompositionLocale`"""
input CompositionLocaleInput {
  description: String
  lang: String!
  sourceId: Int!
  title: String
}

"""
Represents an update to a `CompositionLocale`. Fields that are set will be updated.
"""
input CompositionLocalePatch {
  description: String
  lang: String
  sourceId: Int
  title: String
}

"""A connection to a list of `CompositionLocale` values."""
type CompositionLocalesConnection {
  """
  A list of edges which contains the `CompositionLocale` and cursor to aid in pagination.
  """
  edges: [CompositionLocalesEdge!]!

  """A list of `CompositionLocale` objects."""
  nodes: [CompositionLocale]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CompositionLocale` you could get from the connection.
  """
  totalCount: Int!
}

"""A `CompositionLocale` edge in the connection."""
type CompositionLocalesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CompositionLocale` at the end of the edge."""
  node: CompositionLocale
}

"""Methods to use when ordering `CompositionLocale`."""
enum CompositionLocalesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  LANG_ASC
  LANG_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SOURCE_ID_ASC
  SOURCE_ID_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Composition`. Fields that are set will be updated.
"""
input CompositionPatch {
  composingEnd: Datetime
  composingStart: Datetime
  description: String

  """SEO friendly name to use in url"""
  path: String
  published: Boolean

  """
  This is automatically changed if 'published' changed, can be manually provided by 'admin'.
  """
  publishedAt: Datetime
  title: String
}

"""A connection to a list of `Composition` values."""
type CompositionsConnection {
  """
  A list of edges which contains the `Composition` and cursor to aid in pagination.
  """
  edges: [CompositionsEdge!]!

  """A list of `Composition` objects."""
  nodes: [Composition]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Composition` you could get from the connection."""
  totalCount: Int!
}

"""A `Composition` edge in the connection."""
type CompositionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Composition` at the end of the edge."""
  node: Composition
}

"""Methods to use when ordering `Composition`."""
enum CompositionsOrderBy {
  COMPOSING_END_ASC
  COMPOSING_END_DESC
  COMPOSING_START_ASC
  COMPOSING_START_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PATH_ASC
  PATH_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_ASC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  PUBLISHED_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A filter to be used against many `CompositionLocale` object types. All fields are combined with a logical ‘and.’
"""
input CompositionToManyCompositionLocaleFilter {
  """
  Every related `CompositionLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CompositionLocaleFilter

  """
  No related `CompositionLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CompositionLocaleFilter

  """
  Some related `CompositionLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CompositionLocaleFilter
}

"""
A filter to be used against many `MusicianComposition` object types. All fields are combined with a logical ‘and.’
"""
input CompositionToManyMusicianCompositionFilter {
  """
  Every related `MusicianComposition` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MusicianCompositionFilter

  """
  No related `MusicianComposition` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MusicianCompositionFilter

  """
  Some related `MusicianComposition` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MusicianCompositionFilter
}

"""
A filter to be used against many `Score` object types. All fields are combined with a logical ‘and.’
"""
input CompositionToManyScoreFilter {
  """
  Every related `Score` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ScoreFilter

  """
  No related `Score` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ScoreFilter

  """
  Some related `Score` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ScoreFilter
}

input ContactInput {
  email: String!
  firstName: String
  lastName: String
}

"""All input for the create `ArticleGalleryImage` mutation."""
input CreateArticleGalleryImageInput {
  """The `ArticleGalleryImage` to be created by this mutation."""
  articleGalleryImage: ArticleGalleryImageInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `ArticleGalleryImage` mutation."""
type CreateArticleGalleryImagePayload {
  """The `ArticleGalleryImage` that was created by this mutation."""
  articleGalleryImage: ArticleGalleryImage

  """An edge for our `ArticleGalleryImage`. May be used by Relay 1."""
  articleGalleryImageEdge(
    """The method to use when ordering `ArticleGalleryImage`."""
    orderBy: [ArticleGalleryImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleGalleryImagesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `ArticleGallery` that is related to this `ArticleGalleryImage`.
  """
  gallery: ArticleGallery

  """Reads a single `Image` that is related to this `ArticleGalleryImage`."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ArticleGallery` mutation."""
input CreateArticleGalleryInput {
  articleId: Int

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `ArticleGallery` mutation."""
type CreateArticleGalleryPayload {
  """The `ArticleGallery` that was created by this mutation."""
  articleGallery: ArticleGallery

  """An edge for our `ArticleGallery`. May be used by Relay 1."""
  articleGalleryEdge(
    """The method to use when ordering `ArticleGallery`."""
    orderBy: [ArticleGalleriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleGalleriesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ArticleGenre` mutation."""
input CreateArticleGenreInput {
  """The `ArticleGenre` to be created by this mutation."""
  articleGenre: ArticleGenreInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `ArticleGenre` mutation."""
type CreateArticleGenrePayload {
  """Reads a single `Article` that is related to this `ArticleGenre`."""
  article: Article

  """The `ArticleGenre` that was created by this mutation."""
  articleGenre: ArticleGenre

  """An edge for our `ArticleGenre`. May be used by Relay 1."""
  articleGenreEdge(
    """The method to use when ordering `ArticleGenre`."""
    orderBy: [ArticleGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleGenresEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Genre` that is related to this `ArticleGenre`."""
  genre: Genre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `ArticleImage` mutation."""
input CreateArticleImageInput {
  """The `ArticleImage` to be created by this mutation."""
  articleImage: ArticleImageInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `ArticleImage` mutation."""
type CreateArticleImagePayload {
  """Reads a single `Article` that is related to this `ArticleImage`."""
  article: Article

  """The `ArticleImage` that was created by this mutation."""
  articleImage: ArticleImage

  """An edge for our `ArticleImage`. May be used by Relay 1."""
  articleImageEdge(
    """The method to use when ordering `ArticleImage`."""
    orderBy: [ArticleImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleImagesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Image` that is related to this `ArticleImage`."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Article` mutation."""
input CreateArticleInput {
  """The `Article` to be created by this mutation."""
  article: ArticleInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  createImages: [ImageInput]
  genres: [Int!]
  images: [Int!]
  tags: [Int!]
}

"""All input for the create `ArticleLocale` mutation."""
input CreateArticleLocaleInput {
  """The `ArticleLocale` to be created by this mutation."""
  articleLocale: ArticleLocaleInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `ArticleLocale` mutation."""
type CreateArticleLocalePayload {
  """The `ArticleLocale` that was created by this mutation."""
  articleLocale: ArticleLocale

  """An edge for our `ArticleLocale`. May be used by Relay 1."""
  articleLocaleEdge(
    """The method to use when ordering `ArticleLocale`."""
    orderBy: [ArticleLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleLocalesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Language` that is related to this `ArticleLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Article` that is related to this `ArticleLocale`."""
  source: Article
}

"""The output of our create `Article` mutation."""
type CreateArticlePayload {
  """The `Article` that was created by this mutation."""
  article: Article

  """An edge for our `Article`. May be used by Relay 1."""
  articleEdge(
    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticlesEdge

  """Reads a single `User` that is related to this `Article`."""
  author: User

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `ArticleGallery` that is related to this `Article`."""
  gallery: ArticleGallery

  """Reads a single `Image` that is related to this `Article`."""
  poster: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Article`."""
  updater: User
}

"""All input for the create `ArticleTag` mutation."""
input CreateArticleTagInput {
  """The `ArticleTag` to be created by this mutation."""
  articleTag: ArticleTagInput!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our create `ArticleTag` mutation."""
type CreateArticleTagPayload {
  """Reads a single `Article` that is related to this `ArticleTag`."""
  article: Article

  """The `ArticleTag` that was created by this mutation."""
  articleTag: ArticleTag

  """An edge for our `ArticleTag`. May be used by Relay 1."""
  articleTagEdge(
    """The method to use when ordering `ArticleTag`."""
    orderBy: [ArticleTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleTagsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tag` that is related to this `ArticleTag`."""
  tag: Tag
}

"""All input for the create `Composition` mutation."""
input CreateCompositionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Composition` to be created by this mutation."""
  composition: CompositionInput!
}

"""All input for the create `CompositionLocale` mutation."""
input CreateCompositionLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CompositionLocale` to be created by this mutation."""
  compositionLocale: CompositionLocaleInput!
}

"""The output of our create `CompositionLocale` mutation."""
type CreateCompositionLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CompositionLocale` that was created by this mutation."""
  compositionLocale: CompositionLocale

  """An edge for our `CompositionLocale`. May be used by Relay 1."""
  compositionLocaleEdge(
    """The method to use when ordering `CompositionLocale`."""
    orderBy: [CompositionLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompositionLocalesEdge

  """Reads a single `Language` that is related to this `CompositionLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Composition` that is related to this `CompositionLocale`.
  """
  source: Composition
}

"""The output of our create `Composition` mutation."""
type CreateCompositionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Composition` that was created by this mutation."""
  composition: Composition

  """An edge for our `Composition`. May be used by Relay 1."""
  compositionEdge(
    """The method to use when ordering `Composition`."""
    orderBy: [CompositionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompositionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Document` mutation."""
input CreateDocumentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Document` to be created by this mutation."""
  document: DocumentInput!
}

"""All input for the create `DocumentLocale` mutation."""
input CreateDocumentLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `DocumentLocale` to be created by this mutation."""
  documentLocale: DocumentLocaleInput!
}

"""The output of our create `DocumentLocale` mutation."""
type CreateDocumentLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DocumentLocale` that was created by this mutation."""
  documentLocale: DocumentLocale

  """An edge for our `DocumentLocale`. May be used by Relay 1."""
  documentLocaleEdge(
    """The method to use when ordering `DocumentLocale`."""
    orderBy: [DocumentLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DocumentLocalesEdge

  """Reads a single `Language` that is related to this `DocumentLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Document` that is related to this `DocumentLocale`."""
  source: Document
}

"""The output of our create `Document` mutation."""
type CreateDocumentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Document` that was created by this mutation."""
  document: Document

  """An edge for our `Document`. May be used by Relay 1."""
  documentEdge(
    """The method to use when ordering `Document`."""
    orderBy: [DocumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DocumentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Genre` mutation."""
input CreateGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Genre` to be created by this mutation."""
  genre: GenreInput!
}

"""All input for the create `GenreLocale` mutation."""
input CreateGenreLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GenreLocale` to be created by this mutation."""
  genreLocale: GenreLocaleInput!
}

"""The output of our create `GenreLocale` mutation."""
type CreateGenreLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GenreLocale` that was created by this mutation."""
  genreLocale: GenreLocale

  """An edge for our `GenreLocale`. May be used by Relay 1."""
  genreLocaleEdge(
    """The method to use when ordering `GenreLocale`."""
    orderBy: [GenreLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GenreLocalesEdge

  """Reads a single `Language` that is related to this `GenreLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Genre` that is related to this `GenreLocale`."""
  source: Genre
}

"""The output of our create `Genre` mutation."""
type CreateGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Genre` that was created by this mutation."""
  genre: Genre

  """An edge for our `Genre`. May be used by Relay 1."""
  genreEdge(
    """The method to use when ordering `Genre`."""
    orderBy: [GenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): GenresEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `GroupImage` mutation."""
input CreateGroupImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GroupImage` to be created by this mutation."""
  groupImage: GroupImageInput!
}

"""The output of our create `GroupImage` mutation."""
type CreateGroupImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Group` that is related to this `GroupImage`."""
  group: Group

  """The `GroupImage` that was created by this mutation."""
  groupImage: GroupImage

  """An edge for our `GroupImage`. May be used by Relay 1."""
  groupImageEdge(
    """The method to use when ordering `GroupImage`."""
    orderBy: [GroupImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupImagesEdge

  """Reads a single `Image` that is related to this `GroupImage`."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Group` mutation."""
input CreateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Group` to be created by this mutation."""
  group: GroupInput!
}

"""All input for the create `GroupLocale` mutation."""
input CreateGroupLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GroupLocale` to be created by this mutation."""
  groupLocale: GroupLocaleInput!
}

"""The output of our create `GroupLocale` mutation."""
type CreateGroupLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupLocale` that was created by this mutation."""
  groupLocale: GroupLocale

  """An edge for our `GroupLocale`. May be used by Relay 1."""
  groupLocaleEdge(
    """The method to use when ordering `GroupLocale`."""
    orderBy: [GroupLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupLocalesEdge

  """Reads a single `Language` that is related to this `GroupLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `GroupLocale`."""
  source: Group
}

"""All input for the create `GroupMusician` mutation."""
input CreateGroupMusicianInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GroupMusician` to be created by this mutation."""
  groupMusician: GroupMusicianInput!
}

"""The output of our create `GroupMusician` mutation."""
type CreateGroupMusicianPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Group` that is related to this `GroupMusician`."""
  group: Group

  """The `GroupMusician` that was created by this mutation."""
  groupMusician: GroupMusician

  """An edge for our `GroupMusician`. May be used by Relay 1."""
  groupMusicianEdge(
    """The method to use when ordering `GroupMusician`."""
    orderBy: [GroupMusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupMusiciansEdge

  """Reads a single `Musician` that is related to this `GroupMusician`."""
  musician: Musician

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our create `Group` mutation."""
type CreateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was created by this mutation."""
  group: Group

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge

  """Reads a single `Image` that is related to this `Group`."""
  photo: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `GroupPlaylist` mutation."""
input CreateGroupPlaylistInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GroupPlaylist` to be created by this mutation."""
  groupPlaylist: GroupPlaylistInput!
}

"""The output of our create `GroupPlaylist` mutation."""
type CreateGroupPlaylistPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Group` that is related to this `GroupPlaylist`."""
  group: Group

  """The `GroupPlaylist` that was created by this mutation."""
  groupPlaylist: GroupPlaylist

  """An edge for our `GroupPlaylist`. May be used by Relay 1."""
  groupPlaylistEdge(
    """The method to use when ordering `GroupPlaylist`."""
    orderBy: [GroupPlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupPlaylistsEdge

  """Reads a single `Playlist` that is related to this `GroupPlaylist`."""
  playlist: Playlist

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Image` mutation."""
input CreateImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Image` to be created by this mutation."""
  image: ImageInput!
}

"""All input for the create `ImageLocale` mutation."""
input CreateImageLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ImageLocale` to be created by this mutation."""
  imageLocale: ImageLocaleInput!
}

"""The output of our create `ImageLocale` mutation."""
type CreateImageLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ImageLocale` that was created by this mutation."""
  imageLocale: ImageLocale

  """An edge for our `ImageLocale`. May be used by Relay 1."""
  imageLocaleEdge(
    """The method to use when ordering `ImageLocale`."""
    orderBy: [ImageLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImageLocalesEdge

  """Reads a single `Language` that is related to this `ImageLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Image` that is related to this `ImageLocale`."""
  source: Image
}

"""The output of our create `Image` mutation."""
type CreateImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was created by this mutation."""
  image: Image

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Instrument` mutation."""
input CreateInstrumentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Instrument` to be created by this mutation."""
  instrument: InstrumentInput!
}

"""All input for the create `InstrumentLocale` mutation."""
input CreateInstrumentLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `InstrumentLocale` to be created by this mutation."""
  instrumentLocale: InstrumentLocaleInput!
}

"""The output of our create `InstrumentLocale` mutation."""
type CreateInstrumentLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InstrumentLocale` that was created by this mutation."""
  instrumentLocale: InstrumentLocale

  """An edge for our `InstrumentLocale`. May be used by Relay 1."""
  instrumentLocaleEdge(
    """The method to use when ordering `InstrumentLocale`."""
    orderBy: [InstrumentLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): InstrumentLocalesEdge

  """Reads a single `Language` that is related to this `InstrumentLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Instrument` that is related to this `InstrumentLocale`.
  """
  source: Instrument
}

"""The output of our create `Instrument` mutation."""
type CreateInstrumentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Instrument` that was created by this mutation."""
  instrument: Instrument

  """An edge for our `Instrument`. May be used by Relay 1."""
  instrumentEdge(
    """The method to use when ordering `Instrument`."""
    orderBy: [InstrumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InstrumentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Language` mutation."""
input CreateLanguageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Language` to be created by this mutation."""
  language: LanguageInput!
}

"""The output of our create `Language` mutation."""
type CreateLanguagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Language` that was created by this mutation."""
  language: Language

  """An edge for our `Language`. May be used by Relay 1."""
  languageEdge(
    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Media` mutation."""
input CreateMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Media` to be created by this mutation."""
  media: MediaInput!
}

"""All input for the create `MediaLocale` mutation."""
input CreateMediaLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MediaLocale` to be created by this mutation."""
  mediaLocale: MediaLocaleInput!
}

"""The output of our create `MediaLocale` mutation."""
type CreateMediaLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Language` that is related to this `MediaLocale`."""
  languageByLang: Language

  """The `MediaLocale` that was created by this mutation."""
  mediaLocale: MediaLocale

  """An edge for our `MediaLocale`. May be used by Relay 1."""
  mediaLocaleEdge(
    """The method to use when ordering `MediaLocale`."""
    orderBy: [MediaLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaLocalesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Media` that is related to this `MediaLocale`."""
  source: Media
}

"""The output of our create `Media` mutation."""
type CreateMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Media` that was created by this mutation."""
  media: Media

  """An edge for our `Media`. May be used by Relay 1."""
  mediaEdge(
    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `MusicianComposition` mutation."""
input CreateMusicianCompositionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MusicianComposition` to be created by this mutation."""
  musicianComposition: MusicianCompositionInput!
}

"""The output of our create `MusicianComposition` mutation."""
type CreateMusicianCompositionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Composition` that is related to this `MusicianComposition`.
  """
  composition: Composition

  """
  Reads a single `Musician` that is related to this `MusicianComposition`.
  """
  musician: Musician

  """The `MusicianComposition` that was created by this mutation."""
  musicianComposition: MusicianComposition

  """An edge for our `MusicianComposition`. May be used by Relay 1."""
  musicianCompositionEdge(
    """The method to use when ordering `MusicianComposition`."""
    orderBy: [MusicianCompositionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianCompositionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `MusicianGenre` mutation."""
input CreateMusicianGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MusicianGenre` to be created by this mutation."""
  musicianGenre: MusicianGenreInput!
}

"""The output of our create `MusicianGenre` mutation."""
type CreateMusicianGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Genre` that is related to this `MusicianGenre`."""
  genre: Genre

  """Reads a single `Musician` that is related to this `MusicianGenre`."""
  musician: Musician

  """The `MusicianGenre` that was created by this mutation."""
  musicianGenre: MusicianGenre

  """An edge for our `MusicianGenre`. May be used by Relay 1."""
  musicianGenreEdge(
    """The method to use when ordering `MusicianGenre`."""
    orderBy: [MusicianGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianGenresEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `MusicianImage` mutation."""
input CreateMusicianImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MusicianImage` to be created by this mutation."""
  musicianImage: MusicianImageInput!
}

"""The output of our create `MusicianImage` mutation."""
type CreateMusicianImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Image` that is related to this `MusicianImage`."""
  image: Image

  """Reads a single `Musician` that is related to this `MusicianImage`."""
  musician: Musician

  """The `MusicianImage` that was created by this mutation."""
  musicianImage: MusicianImage

  """An edge for our `MusicianImage`. May be used by Relay 1."""
  musicianImageEdge(
    """The method to use when ordering `MusicianImage`."""
    orderBy: [MusicianImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianImagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Musician` mutation."""
input CreateMusicianInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Musician` to be created by this mutation."""
  musician: MusicianInput!
}

"""All input for the create `MusicianLocale` mutation."""
input CreateMusicianLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MusicianLocale` to be created by this mutation."""
  musicianLocale: MusicianLocaleInput!
}

"""The output of our create `MusicianLocale` mutation."""
type CreateMusicianLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Language` that is related to this `MusicianLocale`."""
  languageByLang: Language

  """The `MusicianLocale` that was created by this mutation."""
  musicianLocale: MusicianLocale

  """An edge for our `MusicianLocale`. May be used by Relay 1."""
  musicianLocaleEdge(
    """The method to use when ordering `MusicianLocale`."""
    orderBy: [MusicianLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianLocalesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Musician` that is related to this `MusicianLocale`."""
  source: Musician
}

"""The output of our create `Musician` mutation."""
type CreateMusicianPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Musician` that was created by this mutation."""
  musician: Musician

  """An edge for our `Musician`. May be used by Relay 1."""
  musicianEdge(
    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusiciansEdge

  """Reads a single `Image` that is related to this `Musician`."""
  photo: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `MusicianPlaylist` mutation."""
input CreateMusicianPlaylistInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MusicianPlaylist` to be created by this mutation."""
  musicianPlaylist: MusicianPlaylistInput!
}

"""The output of our create `MusicianPlaylist` mutation."""
type CreateMusicianPlaylistPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Musician` that is related to this `MusicianPlaylist`."""
  musician: Musician

  """The `MusicianPlaylist` that was created by this mutation."""
  musicianPlaylist: MusicianPlaylist

  """An edge for our `MusicianPlaylist`. May be used by Relay 1."""
  musicianPlaylistEdge(
    """The method to use when ordering `MusicianPlaylist`."""
    orderBy: [MusicianPlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianPlaylistsEdge

  """Reads a single `Playlist` that is related to this `MusicianPlaylist`."""
  playlist: Playlist

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `MusicianProfession` mutation."""
input CreateMusicianProfessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MusicianProfession` to be created by this mutation."""
  musicianProfession: MusicianProfessionInput!
}

"""The output of our create `MusicianProfession` mutation."""
type CreateMusicianProfessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Musician` that is related to this `MusicianProfession`.
  """
  musician: Musician

  """The `MusicianProfession` that was created by this mutation."""
  musicianProfession: MusicianProfession

  """An edge for our `MusicianProfession`. May be used by Relay 1."""
  musicianProfessionEdge(
    """The method to use when ordering `MusicianProfession`."""
    orderBy: [MusicianProfessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianProfessionsEdge

  """
  Reads a single `Profession` that is related to this `MusicianProfession`.
  """
  profession: Profession

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `MusicianTag` mutation."""
input CreateMusicianTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MusicianTag` to be created by this mutation."""
  musicianTag: MusicianTagInput!
}

"""The output of our create `MusicianTag` mutation."""
type CreateMusicianTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Musician` that is related to this `MusicianTag`."""
  musician: Musician

  """The `MusicianTag` that was created by this mutation."""
  musicianTag: MusicianTag

  """An edge for our `MusicianTag`. May be used by Relay 1."""
  musicianTagEdge(
    """The method to use when ordering `MusicianTag`."""
    orderBy: [MusicianTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianTagsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tag` that is related to this `MusicianTag`."""
  tag: Tag
}

"""All input for the create `OpenMessage` mutation."""
input CreateOpenMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OpenMessage` to be created by this mutation."""
  openMessage: OpenMessageInput!
}

"""The output of our create `OpenMessage` mutation."""
type CreateOpenMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OpenMessage` that was created by this mutation."""
  openMessage: OpenMessage

  """An edge for our `OpenMessage`. May be used by Relay 1."""
  openMessageEdge(
    """The method to use when ordering `OpenMessage`."""
    orderBy: [OpenMessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OpenMessagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `PageSection` mutation."""
input CreatePageSectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PageSection` to be created by this mutation."""
  pageSection: PageSectionInput!
}

"""The output of our create `PageSection` mutation."""
type CreatePageSectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PageSection` that was created by this mutation."""
  pageSection: PageSection

  """An edge for our `PageSection`. May be used by Relay 1."""
  pageSectionEdge(
    """The method to use when ordering `PageSection`."""
    orderBy: [PageSectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PageSectionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Playlist` mutation."""
input CreatePlaylistInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Playlist` to be created by this mutation."""
  playlist: PlaylistInput!
}

"""All input for the create `PlaylistLocale` mutation."""
input CreatePlaylistLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PlaylistLocale` to be created by this mutation."""
  playlistLocale: PlaylistLocaleInput!
}

"""The output of our create `PlaylistLocale` mutation."""
type CreatePlaylistLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Language` that is related to this `PlaylistLocale`."""
  languageByLang: Language

  """The `PlaylistLocale` that was created by this mutation."""
  playlistLocale: PlaylistLocale

  """An edge for our `PlaylistLocale`. May be used by Relay 1."""
  playlistLocaleEdge(
    """The method to use when ordering `PlaylistLocale`."""
    orderBy: [PlaylistLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistLocalesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Playlist` that is related to this `PlaylistLocale`."""
  source: Playlist
}

"""All input for the create `PlaylistMedia` mutation."""
input CreatePlaylistMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PlaylistMedia` to be created by this mutation."""
  playlistMedia: PlaylistMediaInput!
}

"""The output of our create `PlaylistMedia` mutation."""
type CreatePlaylistMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Media` that is related to this `PlaylistMedia`."""
  media: Media

  """Reads a single `Playlist` that is related to this `PlaylistMedia`."""
  playlist: Playlist

  """The `PlaylistMedia` that was created by this mutation."""
  playlistMedia: PlaylistMedia

  """An edge for our `PlaylistMedia`. May be used by Relay 1."""
  playlistMediaEdge(
    """The method to use when ordering `PlaylistMedia`."""
    orderBy: [PlaylistMediasOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistMediasEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our create `Playlist` mutation."""
type CreatePlaylistPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `User` that is related to this `Playlist`."""
  owner: User

  """The `Playlist` that was created by this mutation."""
  playlist: Playlist

  """An edge for our `Playlist`. May be used by Relay 1."""
  playlistEdge(
    """The method to use when ordering `Playlist`."""
    orderBy: [PlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""
This options must be provided to create
preview document, for more details see
the PreviewOptions docs.
"""
input CreatePreviewOptions {
  """Opacity from 0.0 to 1.0"""
  opacity: Float

  """
  Pages to generate preview, for examples look
  in pdfcpu docs https://pdfcpu.io/pages/pages_remove.
  For example to add 2 and 3 pages in preview pass ["-2", "4-"]
  this will remove page 1 and all after 4 from preview.
  """
  pages: [String!]

  """Rotation degree -180.0 <= i <= 180.0"""
  rotation: Float

  """Scale 0.0 < i <= 1.0"""
  scaleFactor: Float

  """abs or rel"""
  scalePosition: String

  """
  On which pages add watermark, Ex.
  ['2-'] after first page
  ['2', '5-'] on second and after 4-th page
  """
  watermarkPages: [String!]
}

"""All input for the create `Profession` mutation."""
input CreateProfessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Profession` to be created by this mutation."""
  profession: ProfessionInput!
}

"""All input for the create `ProfessionLocale` mutation."""
input CreateProfessionLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProfessionLocale` to be created by this mutation."""
  professionLocale: ProfessionLocaleInput!
}

"""The output of our create `ProfessionLocale` mutation."""
type CreateProfessionLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Language` that is related to this `ProfessionLocale`."""
  languageByLang: Language

  """The `ProfessionLocale` that was created by this mutation."""
  professionLocale: ProfessionLocale

  """An edge for our `ProfessionLocale`. May be used by Relay 1."""
  professionLocaleEdge(
    """The method to use when ordering `ProfessionLocale`."""
    orderBy: [ProfessionLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfessionLocalesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Profession` that is related to this `ProfessionLocale`.
  """
  source: Profession
}

"""The output of our create `Profession` mutation."""
type CreateProfessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Profession` that was created by this mutation."""
  profession: Profession

  """An edge for our `Profession`. May be used by Relay 1."""
  professionEdge(
    """The method to use when ordering `Profession`."""
    orderBy: [ProfessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfessionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createPromoCode` mutation."""
input CreatePromoCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  expiresAt: Datetime
  percent: Int
  status: PromoCodeStatus
}

"""The output of our `createPromoCode` mutation."""
type CreatePromoCodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  promoCode: PromoCode

  """An edge for our `PromoCode`. May be used by Relay 1."""
  promoCodeEdge(
    """The method to use when ordering `PromoCode`."""
    orderBy: [PromoCodesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PromoCodesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `createPromoCodes` mutation."""
input CreatePromoCodesInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  count: Int!
  expiresAt: Datetime
  percent: Int!
  status: PromoCodeStatus
}

"""The output of our `createPromoCodes` mutation."""
type CreatePromoCodesPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  promoCodes: [PromoCode]

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the create `Purchase` mutation."""
input CreatePurchaseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Purchase` to be created by this mutation."""
  purchase: PurchaseInput!
}

"""The output of our create `Purchase` mutation."""
type CreatePurchasePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Purchase` that was created by this mutation."""
  purchase: Purchase

  """An edge for our `Purchase`. May be used by Relay 1."""
  purchaseEdge(
    """The method to use when ordering `Purchase`."""
    orderBy: [PurchasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PurchasesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Score` that is related to this `Purchase`."""
  score: Score

  """Reads a single `User` that is related to this `Purchase`."""
  user: User
}

"""All input for the create `Score` mutation."""
input CreateScoreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Instrument IDs to attach to this score."""
  instruments: [Int!]

  """To generate preview use this options."""
  previewOptions: CreatePreviewOptions
  prices: [Price!]

  """The `Score` to be created by this mutation."""
  score: ScoreInput!
}

"""All input for the create `ScoreInstrument` mutation."""
input CreateScoreInstrumentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ScoreInstrument` to be created by this mutation."""
  scoreInstrument: ScoreInstrumentInput!
}

"""The output of our create `ScoreInstrument` mutation."""
type CreateScoreInstrumentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Instrument` that is related to this `ScoreInstrument`."""
  instrument: Instrument

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Score` that is related to this `ScoreInstrument`."""
  score: Score

  """The `ScoreInstrument` that was created by this mutation."""
  scoreInstrument: ScoreInstrument

  """An edge for our `ScoreInstrument`. May be used by Relay 1."""
  scoreInstrumentEdge(
    """The method to use when ordering `ScoreInstrument`."""
    orderBy: [ScoreInstrumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoreInstrumentsEdge
}

"""All input for the create `ScoreLocale` mutation."""
input CreateScoreLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ScoreLocale` to be created by this mutation."""
  scoreLocale: ScoreLocaleInput!
}

"""The output of our create `ScoreLocale` mutation."""
type CreateScoreLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Language` that is related to this `ScoreLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ScoreLocale` that was created by this mutation."""
  scoreLocale: ScoreLocale

  """An edge for our `ScoreLocale`. May be used by Relay 1."""
  scoreLocaleEdge(
    """The method to use when ordering `ScoreLocale`."""
    orderBy: [ScoreLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoreLocalesEdge

  """Reads a single `Score` that is related to this `ScoreLocale`."""
  source: Score
}

"""The output of our create `Score` mutation."""
type CreateScorePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Composition` that is related to this `Score`."""
  composition: Composition

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Score` that was created by this mutation."""
  score: Score

  """An edge for our `Score`. May be used by Relay 1."""
  scoreEdge(
    """The method to use when ordering `Score`."""
    orderBy: [ScoresOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoresEdge
}

"""All input for the create `Tag` mutation."""
input CreateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Tag` to be created by this mutation."""
  tag: TagInput!
}

"""All input for the create `TagLocale` mutation."""
input CreateTagLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TagLocale` to be created by this mutation."""
  tagLocale: TagLocaleInput!
}

"""The output of our create `TagLocale` mutation."""
type CreateTagLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Language` that is related to this `TagLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tag` that is related to this `TagLocale`."""
  source: Tag

  """The `TagLocale` that was created by this mutation."""
  tagLocale: TagLocale

  """An edge for our `TagLocale`. May be used by Relay 1."""
  tagLocaleEdge(
    """The method to use when ordering `TagLocale`."""
    orderBy: [TagLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagLocalesEdge
}

"""The output of our create `Tag` mutation."""
type CreateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tag` that was created by this mutation."""
  tag: Tag

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was created by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

input CurrentUserPatch {
  avatar: Upload
  email: String
  firstName: String
  lastName: String
  password: PasswordPatch
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""The day, does not include a time."""
scalar Date

"""
A filter to be used against Date fields. All fields are combined with a logical ‘and.’
"""
input DateFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Date

  """Equal to the specified value."""
  equalTo: Date

  """Greater than the specified value."""
  greaterThan: Date

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Date

  """Included in the specified list."""
  in: [Date!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Date

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Date

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Date

  """Not equal to the specified value."""
  notEqualTo: Date

  """Not included in the specified list."""
  notIn: [Date!]
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

"""All input for the `deleteArticleByNodeId` mutation."""
input DeleteArticleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Article` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteArticleByPath` mutation."""
input DeleteArticleByPathInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """SEO friendly name to use in url"""
  path: String!
}

"""All input for the `deleteArticleGalleryByNodeId` mutation."""
input DeleteArticleGalleryByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ArticleGallery` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteArticleGalleryImageByNodeId` mutation."""
input DeleteArticleGalleryImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ArticleGalleryImage` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteArticleGalleryImage` mutation."""
input DeleteArticleGalleryImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  galleryId: Int!
  imageId: Int!
}

"""The output of our delete `ArticleGalleryImage` mutation."""
type DeleteArticleGalleryImagePayload {
  """The `ArticleGalleryImage` that was deleted by this mutation."""
  articleGalleryImage: ArticleGalleryImage

  """An edge for our `ArticleGalleryImage`. May be used by Relay 1."""
  articleGalleryImageEdge(
    """The method to use when ordering `ArticleGalleryImage`."""
    orderBy: [ArticleGalleryImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleGalleryImagesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedArticleGalleryImageNodeId: ID

  """
  Reads a single `ArticleGallery` that is related to this `ArticleGalleryImage`.
  """
  gallery: ArticleGallery

  """Reads a single `Image` that is related to this `ArticleGalleryImage`."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteArticleGallery` mutation."""
input DeleteArticleGalleryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `ArticleGallery` mutation."""
type DeleteArticleGalleryPayload {
  """The `ArticleGallery` that was deleted by this mutation."""
  articleGallery: ArticleGallery

  """An edge for our `ArticleGallery`. May be used by Relay 1."""
  articleGalleryEdge(
    """The method to use when ordering `ArticleGallery`."""
    orderBy: [ArticleGalleriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleGalleriesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedArticleGalleryNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteArticleGenreByNodeId` mutation."""
input DeleteArticleGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ArticleGenre` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteArticleGenre` mutation."""
input DeleteArticleGenreInput {
  articleId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  genreId: Int!
}

"""The output of our delete `ArticleGenre` mutation."""
type DeleteArticleGenrePayload {
  """Reads a single `Article` that is related to this `ArticleGenre`."""
  article: Article

  """The `ArticleGenre` that was deleted by this mutation."""
  articleGenre: ArticleGenre

  """An edge for our `ArticleGenre`. May be used by Relay 1."""
  articleGenreEdge(
    """The method to use when ordering `ArticleGenre`."""
    orderBy: [ArticleGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleGenresEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedArticleGenreNodeId: ID

  """Reads a single `Genre` that is related to this `ArticleGenre`."""
  genre: Genre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteArticleImageByNodeId` mutation."""
input DeleteArticleImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ArticleImage` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteArticleImage` mutation."""
input DeleteArticleImageInput {
  articleId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  imageId: Int!
}

"""The output of our delete `ArticleImage` mutation."""
type DeleteArticleImagePayload {
  """Reads a single `Article` that is related to this `ArticleImage`."""
  article: Article

  """The `ArticleImage` that was deleted by this mutation."""
  articleImage: ArticleImage

  """An edge for our `ArticleImage`. May be used by Relay 1."""
  articleImageEdge(
    """The method to use when ordering `ArticleImage`."""
    orderBy: [ArticleImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleImagesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedArticleImageNodeId: ID

  """Reads a single `Image` that is related to this `ArticleImage`."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteArticle` mutation."""
input DeleteArticleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteArticleLocaleByNodeId` mutation."""
input DeleteArticleLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ArticleLocale` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteArticleLocale` mutation."""
input DeleteArticleLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!
  sourceId: Int!
}

"""The output of our delete `ArticleLocale` mutation."""
type DeleteArticleLocalePayload {
  """The `ArticleLocale` that was deleted by this mutation."""
  articleLocale: ArticleLocale

  """An edge for our `ArticleLocale`. May be used by Relay 1."""
  articleLocaleEdge(
    """The method to use when ordering `ArticleLocale`."""
    orderBy: [ArticleLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleLocalesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedArticleLocaleNodeId: ID

  """Reads a single `Language` that is related to this `ArticleLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Article` that is related to this `ArticleLocale`."""
  source: Article
}

"""The output of our delete `Article` mutation."""
type DeleteArticlePayload {
  """The `Article` that was deleted by this mutation."""
  article: Article

  """An edge for our `Article`. May be used by Relay 1."""
  articleEdge(
    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticlesEdge

  """Reads a single `User` that is related to this `Article`."""
  author: User

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedArticleNodeId: ID

  """Reads a single `ArticleGallery` that is related to this `Article`."""
  gallery: ArticleGallery

  """Reads a single `Image` that is related to this `Article`."""
  poster: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Article`."""
  updater: User
}

"""All input for the `deleteArticleTagByNodeId` mutation."""
input DeleteArticleTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ArticleTag` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteArticleTag` mutation."""
input DeleteArticleTagInput {
  articleId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tagId: Int!
}

"""The output of our delete `ArticleTag` mutation."""
type DeleteArticleTagPayload {
  """Reads a single `Article` that is related to this `ArticleTag`."""
  article: Article

  """The `ArticleTag` that was deleted by this mutation."""
  articleTag: ArticleTag

  """An edge for our `ArticleTag`. May be used by Relay 1."""
  articleTagEdge(
    """The method to use when ordering `ArticleTag`."""
    orderBy: [ArticleTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleTagsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedArticleTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tag` that is related to this `ArticleTag`."""
  tag: Tag
}

"""All input for the `deleteCompositionByNodeId` mutation."""
input DeleteCompositionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Composition` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCompositionByPath` mutation."""
input DeleteCompositionByPathInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """SEO friendly name to use in url"""
  path: String!
}

"""All input for the `deleteComposition` mutation."""
input DeleteCompositionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteCompositionLocaleByNodeId` mutation."""
input DeleteCompositionLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CompositionLocale` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteCompositionLocale` mutation."""
input DeleteCompositionLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!
  sourceId: Int!
}

"""The output of our delete `CompositionLocale` mutation."""
type DeleteCompositionLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CompositionLocale` that was deleted by this mutation."""
  compositionLocale: CompositionLocale

  """An edge for our `CompositionLocale`. May be used by Relay 1."""
  compositionLocaleEdge(
    """The method to use when ordering `CompositionLocale`."""
    orderBy: [CompositionLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompositionLocalesEdge
  deletedCompositionLocaleNodeId: ID

  """Reads a single `Language` that is related to this `CompositionLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Composition` that is related to this `CompositionLocale`.
  """
  source: Composition
}

"""The output of our delete `Composition` mutation."""
type DeleteCompositionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Composition` that was deleted by this mutation."""
  composition: Composition

  """An edge for our `Composition`. May be used by Relay 1."""
  compositionEdge(
    """The method to use when ordering `Composition`."""
    orderBy: [CompositionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompositionsEdge
  deletedCompositionNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteDocumentByNodeId` mutation."""
input DeleteDocumentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Document` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDocument` mutation."""
input DeleteDocumentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteDocumentLocaleByNodeId` mutation."""
input DeleteDocumentLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DocumentLocale` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteDocumentLocale` mutation."""
input DeleteDocumentLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!
  sourceId: Int!
}

"""The output of our delete `DocumentLocale` mutation."""
type DeleteDocumentLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedDocumentLocaleNodeId: ID

  """The `DocumentLocale` that was deleted by this mutation."""
  documentLocale: DocumentLocale

  """An edge for our `DocumentLocale`. May be used by Relay 1."""
  documentLocaleEdge(
    """The method to use when ordering `DocumentLocale`."""
    orderBy: [DocumentLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DocumentLocalesEdge

  """Reads a single `Language` that is related to this `DocumentLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Document` that is related to this `DocumentLocale`."""
  source: Document
}

"""The output of our delete `Document` mutation."""
type DeleteDocumentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedDocumentNodeId: ID

  """The `Document` that was deleted by this mutation."""
  document: Document

  """An edge for our `Document`. May be used by Relay 1."""
  documentEdge(
    """The method to use when ordering `Document`."""
    orderBy: [DocumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DocumentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGenreByName` mutation."""
input DeleteGenreByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteGenreByNodeId` mutation."""
input DeleteGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Genre` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGenre` mutation."""
input DeleteGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteGenreLocaleByName` mutation."""
input DeleteGenreLocaleByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteGenreLocaleByNodeId` mutation."""
input DeleteGenreLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GenreLocale` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGenreLocale` mutation."""
input DeleteGenreLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!
  sourceId: Int!
}

"""The output of our delete `GenreLocale` mutation."""
type DeleteGenreLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGenreLocaleNodeId: ID

  """The `GenreLocale` that was deleted by this mutation."""
  genreLocale: GenreLocale

  """An edge for our `GenreLocale`. May be used by Relay 1."""
  genreLocaleEdge(
    """The method to use when ordering `GenreLocale`."""
    orderBy: [GenreLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GenreLocalesEdge

  """Reads a single `Language` that is related to this `GenreLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Genre` that is related to this `GenreLocale`."""
  source: Genre
}

"""The output of our delete `Genre` mutation."""
type DeleteGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGenreNodeId: ID

  """The `Genre` that was deleted by this mutation."""
  genre: Genre

  """An edge for our `Genre`. May be used by Relay 1."""
  genreEdge(
    """The method to use when ordering `Genre`."""
    orderBy: [GenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): GenresEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGroupByNodeId` mutation."""
input DeleteGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGroupImageByNodeId` mutation."""
input DeleteGroupImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupImage` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGroupImage` mutation."""
input DeleteGroupImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int!
  imageId: Int!
}

"""The output of our delete `GroupImage` mutation."""
type DeleteGroupImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGroupImageNodeId: ID

  """Reads a single `Group` that is related to this `GroupImage`."""
  group: Group

  """The `GroupImage` that was deleted by this mutation."""
  groupImage: GroupImage

  """An edge for our `GroupImage`. May be used by Relay 1."""
  groupImageEdge(
    """The method to use when ordering `GroupImage`."""
    orderBy: [GroupImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupImagesEdge

  """Reads a single `Image` that is related to this `GroupImage`."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGroup` mutation."""
input DeleteGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteGroupLocaleByNodeId` mutation."""
input DeleteGroupLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupLocale` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGroupLocale` mutation."""
input DeleteGroupLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!
  sourceId: Int!
}

"""The output of our delete `GroupLocale` mutation."""
type DeleteGroupLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGroupLocaleNodeId: ID

  """The `GroupLocale` that was deleted by this mutation."""
  groupLocale: GroupLocale

  """An edge for our `GroupLocale`. May be used by Relay 1."""
  groupLocaleEdge(
    """The method to use when ordering `GroupLocale`."""
    orderBy: [GroupLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupLocalesEdge

  """Reads a single `Language` that is related to this `GroupLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `GroupLocale`."""
  source: Group
}

"""All input for the `deleteGroupMusicianByNodeId` mutation."""
input DeleteGroupMusicianByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupMusician` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGroupMusician` mutation."""
input DeleteGroupMusicianInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int!
  musicianId: Int!
}

"""The output of our delete `GroupMusician` mutation."""
type DeleteGroupMusicianPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGroupMusicianNodeId: ID

  """Reads a single `Group` that is related to this `GroupMusician`."""
  group: Group

  """The `GroupMusician` that was deleted by this mutation."""
  groupMusician: GroupMusician

  """An edge for our `GroupMusician`. May be used by Relay 1."""
  groupMusicianEdge(
    """The method to use when ordering `GroupMusician`."""
    orderBy: [GroupMusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupMusiciansEdge

  """Reads a single `Musician` that is related to this `GroupMusician`."""
  musician: Musician

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our delete `Group` mutation."""
type DeleteGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGroupNodeId: ID

  """The `Group` that was deleted by this mutation."""
  group: Group

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge

  """Reads a single `Image` that is related to this `Group`."""
  photo: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteGroupPlaylistByNodeId` mutation."""
input DeleteGroupPlaylistByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupPlaylist` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteGroupPlaylist` mutation."""
input DeleteGroupPlaylistInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int!
  playlistId: Int!
}

"""The output of our delete `GroupPlaylist` mutation."""
type DeleteGroupPlaylistPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedGroupPlaylistNodeId: ID

  """Reads a single `Group` that is related to this `GroupPlaylist`."""
  group: Group

  """The `GroupPlaylist` that was deleted by this mutation."""
  groupPlaylist: GroupPlaylist

  """An edge for our `GroupPlaylist`. May be used by Relay 1."""
  groupPlaylistEdge(
    """The method to use when ordering `GroupPlaylist`."""
    orderBy: [GroupPlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupPlaylistsEdge

  """Reads a single `Playlist` that is related to this `GroupPlaylist`."""
  playlist: Playlist

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteImageByNodeId` mutation."""
input DeleteImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Image` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteImage` mutation."""
input DeleteImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteImageLocaleByNodeId` mutation."""
input DeleteImageLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ImageLocale` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteImageLocale` mutation."""
input DeleteImageLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!
  sourceId: Int!
}

"""The output of our delete `ImageLocale` mutation."""
type DeleteImageLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedImageLocaleNodeId: ID

  """The `ImageLocale` that was deleted by this mutation."""
  imageLocale: ImageLocale

  """An edge for our `ImageLocale`. May be used by Relay 1."""
  imageLocaleEdge(
    """The method to use when ordering `ImageLocale`."""
    orderBy: [ImageLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImageLocalesEdge

  """Reads a single `Language` that is related to this `ImageLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Image` that is related to this `ImageLocale`."""
  source: Image
}

"""The output of our delete `Image` mutation."""
type DeleteImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedImageNodeId: ID

  """The `Image` that was deleted by this mutation."""
  image: Image

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteInstrumentByNodeId` mutation."""
input DeleteInstrumentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Instrument` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteInstrument` mutation."""
input DeleteInstrumentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteInstrumentLocaleByNodeId` mutation."""
input DeleteInstrumentLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `InstrumentLocale` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteInstrumentLocale` mutation."""
input DeleteInstrumentLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!
  sourceId: Int!
}

"""The output of our delete `InstrumentLocale` mutation."""
type DeleteInstrumentLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedInstrumentLocaleNodeId: ID

  """The `InstrumentLocale` that was deleted by this mutation."""
  instrumentLocale: InstrumentLocale

  """An edge for our `InstrumentLocale`. May be used by Relay 1."""
  instrumentLocaleEdge(
    """The method to use when ordering `InstrumentLocale`."""
    orderBy: [InstrumentLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): InstrumentLocalesEdge

  """Reads a single `Language` that is related to this `InstrumentLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Instrument` that is related to this `InstrumentLocale`.
  """
  source: Instrument
}

"""The output of our delete `Instrument` mutation."""
type DeleteInstrumentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedInstrumentNodeId: ID

  """The `Instrument` that was deleted by this mutation."""
  instrument: Instrument

  """An edge for our `Instrument`. May be used by Relay 1."""
  instrumentEdge(
    """The method to use when ordering `Instrument`."""
    orderBy: [InstrumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InstrumentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMediaByNodeId` mutation."""
input DeleteMediaByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Media` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMedia` mutation."""
input DeleteMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteMediaLocaleByNodeId` mutation."""
input DeleteMediaLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MediaLocale` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMediaLocale` mutation."""
input DeleteMediaLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!
  sourceId: Int!
}

"""The output of our delete `MediaLocale` mutation."""
type DeleteMediaLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMediaLocaleNodeId: ID

  """Reads a single `Language` that is related to this `MediaLocale`."""
  languageByLang: Language

  """The `MediaLocale` that was deleted by this mutation."""
  mediaLocale: MediaLocale

  """An edge for our `MediaLocale`. May be used by Relay 1."""
  mediaLocaleEdge(
    """The method to use when ordering `MediaLocale`."""
    orderBy: [MediaLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaLocalesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Media` that is related to this `MediaLocale`."""
  source: Media
}

"""The output of our delete `Media` mutation."""
type DeleteMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMediaNodeId: ID

  """The `Media` that was deleted by this mutation."""
  media: Media

  """An edge for our `Media`. May be used by Relay 1."""
  mediaEdge(
    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMusicianByNodeId` mutation."""
input DeleteMusicianByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Musician` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMusicianByPath` mutation."""
input DeleteMusicianByPathInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """SEO friendly name to use in url"""
  path: String!
}

"""All input for the `deleteMusicianCompositionByNodeId` mutation."""
input DeleteMusicianCompositionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MusicianComposition` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMusicianComposition` mutation."""
input DeleteMusicianCompositionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  compositionId: Int!
  musicianId: Int!
}

"""The output of our delete `MusicianComposition` mutation."""
type DeleteMusicianCompositionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Composition` that is related to this `MusicianComposition`.
  """
  composition: Composition
  deletedMusicianCompositionNodeId: ID

  """
  Reads a single `Musician` that is related to this `MusicianComposition`.
  """
  musician: Musician

  """The `MusicianComposition` that was deleted by this mutation."""
  musicianComposition: MusicianComposition

  """An edge for our `MusicianComposition`. May be used by Relay 1."""
  musicianCompositionEdge(
    """The method to use when ordering `MusicianComposition`."""
    orderBy: [MusicianCompositionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianCompositionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMusicianGenreByNodeId` mutation."""
input DeleteMusicianGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MusicianGenre` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMusicianGenre` mutation."""
input DeleteMusicianGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  genreId: Int!
  musicianId: Int!
}

"""The output of our delete `MusicianGenre` mutation."""
type DeleteMusicianGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMusicianGenreNodeId: ID

  """Reads a single `Genre` that is related to this `MusicianGenre`."""
  genre: Genre

  """Reads a single `Musician` that is related to this `MusicianGenre`."""
  musician: Musician

  """The `MusicianGenre` that was deleted by this mutation."""
  musicianGenre: MusicianGenre

  """An edge for our `MusicianGenre`. May be used by Relay 1."""
  musicianGenreEdge(
    """The method to use when ordering `MusicianGenre`."""
    orderBy: [MusicianGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianGenresEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMusicianImageByNodeId` mutation."""
input DeleteMusicianImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MusicianImage` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMusicianImage` mutation."""
input DeleteMusicianImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  imageId: Int!
  musicianId: Int!
}

"""The output of our delete `MusicianImage` mutation."""
type DeleteMusicianImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMusicianImageNodeId: ID

  """Reads a single `Image` that is related to this `MusicianImage`."""
  image: Image

  """Reads a single `Musician` that is related to this `MusicianImage`."""
  musician: Musician

  """The `MusicianImage` that was deleted by this mutation."""
  musicianImage: MusicianImage

  """An edge for our `MusicianImage`. May be used by Relay 1."""
  musicianImageEdge(
    """The method to use when ordering `MusicianImage`."""
    orderBy: [MusicianImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianImagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMusician` mutation."""
input DeleteMusicianInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteMusicianLocaleByNodeId` mutation."""
input DeleteMusicianLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MusicianLocale` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMusicianLocale` mutation."""
input DeleteMusicianLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!
  sourceId: Int!
}

"""The output of our delete `MusicianLocale` mutation."""
type DeleteMusicianLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMusicianLocaleNodeId: ID

  """Reads a single `Language` that is related to this `MusicianLocale`."""
  languageByLang: Language

  """The `MusicianLocale` that was deleted by this mutation."""
  musicianLocale: MusicianLocale

  """An edge for our `MusicianLocale`. May be used by Relay 1."""
  musicianLocaleEdge(
    """The method to use when ordering `MusicianLocale`."""
    orderBy: [MusicianLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianLocalesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Musician` that is related to this `MusicianLocale`."""
  source: Musician
}

"""The output of our delete `Musician` mutation."""
type DeleteMusicianPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMusicianNodeId: ID

  """The `Musician` that was deleted by this mutation."""
  musician: Musician

  """An edge for our `Musician`. May be used by Relay 1."""
  musicianEdge(
    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusiciansEdge

  """Reads a single `Image` that is related to this `Musician`."""
  photo: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMusicianPlaylistByNodeId` mutation."""
input DeleteMusicianPlaylistByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MusicianPlaylist` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMusicianPlaylist` mutation."""
input DeleteMusicianPlaylistInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  musicianId: Int!
  playlistId: Int!
}

"""The output of our delete `MusicianPlaylist` mutation."""
type DeleteMusicianPlaylistPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMusicianPlaylistNodeId: ID

  """Reads a single `Musician` that is related to this `MusicianPlaylist`."""
  musician: Musician

  """The `MusicianPlaylist` that was deleted by this mutation."""
  musicianPlaylist: MusicianPlaylist

  """An edge for our `MusicianPlaylist`. May be used by Relay 1."""
  musicianPlaylistEdge(
    """The method to use when ordering `MusicianPlaylist`."""
    orderBy: [MusicianPlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianPlaylistsEdge

  """Reads a single `Playlist` that is related to this `MusicianPlaylist`."""
  playlist: Playlist

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMusicianProfessionByNodeId` mutation."""
input DeleteMusicianProfessionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MusicianProfession` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMusicianProfession` mutation."""
input DeleteMusicianProfessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  musicianId: Int!
  professionId: Int!
}

"""The output of our delete `MusicianProfession` mutation."""
type DeleteMusicianProfessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMusicianProfessionNodeId: ID

  """
  Reads a single `Musician` that is related to this `MusicianProfession`.
  """
  musician: Musician

  """The `MusicianProfession` that was deleted by this mutation."""
  musicianProfession: MusicianProfession

  """An edge for our `MusicianProfession`. May be used by Relay 1."""
  musicianProfessionEdge(
    """The method to use when ordering `MusicianProfession`."""
    orderBy: [MusicianProfessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianProfessionsEdge

  """
  Reads a single `Profession` that is related to this `MusicianProfession`.
  """
  profession: Profession

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteMusicianTagByNodeId` mutation."""
input DeleteMusicianTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MusicianTag` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteMusicianTag` mutation."""
input DeleteMusicianTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  musicianId: Int!
  tagId: Int!
}

"""The output of our delete `MusicianTag` mutation."""
type DeleteMusicianTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedMusicianTagNodeId: ID

  """Reads a single `Musician` that is related to this `MusicianTag`."""
  musician: Musician

  """The `MusicianTag` that was deleted by this mutation."""
  musicianTag: MusicianTag

  """An edge for our `MusicianTag`. May be used by Relay 1."""
  musicianTagEdge(
    """The method to use when ordering `MusicianTag`."""
    orderBy: [MusicianTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianTagsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tag` that is related to this `MusicianTag`."""
  tag: Tag
}

"""All input for the `deleteOpenMessageByNodeId` mutation."""
input DeleteOpenMessageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OpenMessage` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteOpenMessage` mutation."""
input DeleteOpenMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `OpenMessage` mutation."""
type DeleteOpenMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedOpenMessageNodeId: ID

  """The `OpenMessage` that was deleted by this mutation."""
  openMessage: OpenMessage

  """An edge for our `OpenMessage`. May be used by Relay 1."""
  openMessageEdge(
    """The method to use when ordering `OpenMessage`."""
    orderBy: [OpenMessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OpenMessagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePageSectionByNodeId` mutation."""
input DeletePageSectionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PageSection` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePageSection` mutation."""
input DeletePageSectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
  page: String!
}

"""The output of our delete `PageSection` mutation."""
type DeletePageSectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPageSectionNodeId: ID

  """The `PageSection` that was deleted by this mutation."""
  pageSection: PageSection

  """An edge for our `PageSection`. May be used by Relay 1."""
  pageSectionEdge(
    """The method to use when ordering `PageSection`."""
    orderBy: [PageSectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PageSectionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePlaylistByNodeId` mutation."""
input DeletePlaylistByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Playlist` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePlaylist` mutation."""
input DeletePlaylistInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deletePlaylistLocaleByNodeId` mutation."""
input DeletePlaylistLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlaylistLocale` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePlaylistLocale` mutation."""
input DeletePlaylistLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!
  sourceId: Int!
}

"""The output of our delete `PlaylistLocale` mutation."""
type DeletePlaylistLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPlaylistLocaleNodeId: ID

  """Reads a single `Language` that is related to this `PlaylistLocale`."""
  languageByLang: Language

  """The `PlaylistLocale` that was deleted by this mutation."""
  playlistLocale: PlaylistLocale

  """An edge for our `PlaylistLocale`. May be used by Relay 1."""
  playlistLocaleEdge(
    """The method to use when ordering `PlaylistLocale`."""
    orderBy: [PlaylistLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistLocalesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Playlist` that is related to this `PlaylistLocale`."""
  source: Playlist
}

"""All input for the `deletePlaylistMediaByNodeId` mutation."""
input DeletePlaylistMediaByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlaylistMedia` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePlaylistMedia` mutation."""
input DeletePlaylistMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  mediaId: Int!
  playlistId: Int!
}

"""The output of our delete `PlaylistMedia` mutation."""
type DeletePlaylistMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPlaylistMediaNodeId: ID

  """Reads a single `Media` that is related to this `PlaylistMedia`."""
  media: Media

  """Reads a single `Playlist` that is related to this `PlaylistMedia`."""
  playlist: Playlist

  """The `PlaylistMedia` that was deleted by this mutation."""
  playlistMedia: PlaylistMedia

  """An edge for our `PlaylistMedia`. May be used by Relay 1."""
  playlistMediaEdge(
    """The method to use when ordering `PlaylistMedia`."""
    orderBy: [PlaylistMediasOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistMediasEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our delete `Playlist` mutation."""
type DeletePlaylistPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPlaylistNodeId: ID

  """Reads a single `User` that is related to this `Playlist`."""
  owner: User

  """The `Playlist` that was deleted by this mutation."""
  playlist: Playlist

  """An edge for our `Playlist`. May be used by Relay 1."""
  playlistEdge(
    """The method to use when ordering `Playlist`."""
    orderBy: [PlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deleteProfessionByName` mutation."""
input DeleteProfessionByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteProfessionByNodeId` mutation."""
input DeleteProfessionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Profession` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteProfession` mutation."""
input DeleteProfessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteProfessionLocaleByName` mutation."""
input DeleteProfessionLocaleByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteProfessionLocaleByNodeId` mutation."""
input DeleteProfessionLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProfessionLocale` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteProfessionLocale` mutation."""
input DeleteProfessionLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!
  sourceId: Int!
}

"""The output of our delete `ProfessionLocale` mutation."""
type DeleteProfessionLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProfessionLocaleNodeId: ID

  """Reads a single `Language` that is related to this `ProfessionLocale`."""
  languageByLang: Language

  """The `ProfessionLocale` that was deleted by this mutation."""
  professionLocale: ProfessionLocale

  """An edge for our `ProfessionLocale`. May be used by Relay 1."""
  professionLocaleEdge(
    """The method to use when ordering `ProfessionLocale`."""
    orderBy: [ProfessionLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfessionLocalesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Profession` that is related to this `ProfessionLocale`.
  """
  source: Profession
}

"""The output of our delete `Profession` mutation."""
type DeleteProfessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedProfessionNodeId: ID

  """The `Profession` that was deleted by this mutation."""
  profession: Profession

  """An edge for our `Profession`. May be used by Relay 1."""
  professionEdge(
    """The method to use when ordering `Profession`."""
    orderBy: [ProfessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfessionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePromoCodeByNodeId` mutation."""
input DeletePromoCodeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PromoCode` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePromoCode` mutation."""
input DeletePromoCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """this also will be used as id"""
  code: String!
}

"""The output of our delete `PromoCode` mutation."""
type DeletePromoCodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPromoCodeNodeId: ID

  """The `PromoCode` that was deleted by this mutation."""
  promoCode: PromoCode

  """An edge for our `PromoCode`. May be used by Relay 1."""
  promoCodeEdge(
    """The method to use when ordering `PromoCode`."""
    orderBy: [PromoCodesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PromoCodesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `deletePurchaseByNodeId` mutation."""
input DeletePurchaseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Purchase` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePurchase` mutation."""
input DeletePurchaseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Purchase` mutation."""
type DeletePurchasePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedPurchaseNodeId: ID

  """The `Purchase` that was deleted by this mutation."""
  purchase: Purchase

  """An edge for our `Purchase`. May be used by Relay 1."""
  purchaseEdge(
    """The method to use when ordering `Purchase`."""
    orderBy: [PurchasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PurchasesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Score` that is related to this `Purchase`."""
  score: Score

  """Reads a single `User` that is related to this `Purchase`."""
  user: User
}

"""All input for the `deleteScoreByNodeId` mutation."""
input DeleteScoreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Score` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteScoreByPath` mutation."""
input DeleteScoreByPathInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """SEO friendly name to use in url"""
  path: String!
}

"""All input for the `deleteScore` mutation."""
input DeleteScoreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteScoreInstrumentByNodeId` mutation."""
input DeleteScoreInstrumentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ScoreInstrument` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteScoreInstrument` mutation."""
input DeleteScoreInstrumentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  instrumentId: Int!
  scoreId: Int!
}

"""The output of our delete `ScoreInstrument` mutation."""
type DeleteScoreInstrumentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedScoreInstrumentNodeId: ID

  """Reads a single `Instrument` that is related to this `ScoreInstrument`."""
  instrument: Instrument

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Score` that is related to this `ScoreInstrument`."""
  score: Score

  """The `ScoreInstrument` that was deleted by this mutation."""
  scoreInstrument: ScoreInstrument

  """An edge for our `ScoreInstrument`. May be used by Relay 1."""
  scoreInstrumentEdge(
    """The method to use when ordering `ScoreInstrument`."""
    orderBy: [ScoreInstrumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoreInstrumentsEdge
}

"""All input for the `deleteScoreLocaleByNodeId` mutation."""
input DeleteScoreLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ScoreLocale` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteScoreLocale` mutation."""
input DeleteScoreLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!
  sourceId: Int!
}

"""The output of our delete `ScoreLocale` mutation."""
type DeleteScoreLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedScoreLocaleNodeId: ID

  """Reads a single `Language` that is related to this `ScoreLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ScoreLocale` that was deleted by this mutation."""
  scoreLocale: ScoreLocale

  """An edge for our `ScoreLocale`. May be used by Relay 1."""
  scoreLocaleEdge(
    """The method to use when ordering `ScoreLocale`."""
    orderBy: [ScoreLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoreLocalesEdge

  """Reads a single `Score` that is related to this `ScoreLocale`."""
  source: Score
}

"""The output of our delete `Score` mutation."""
type DeleteScorePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Composition` that is related to this `Score`."""
  composition: Composition
  deletedScoreNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Score` that was deleted by this mutation."""
  score: Score

  """An edge for our `Score`. May be used by Relay 1."""
  scoreEdge(
    """The method to use when ordering `Score`."""
    orderBy: [ScoresOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoresEdge
}

"""All input for the `deleteTagByName` mutation."""
input DeleteTagByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteTagByNodeId` mutation."""
input DeleteTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tag` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTag` mutation."""
input DeleteTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteTagLocaleByName` mutation."""
input DeleteTagLocaleByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
}

"""All input for the `deleteTagLocaleByNodeId` mutation."""
input DeleteTagLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TagLocale` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteTagLocale` mutation."""
input DeleteTagLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!
  sourceId: Int!
}

"""The output of our delete `TagLocale` mutation."""
type DeleteTagLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTagLocaleNodeId: ID

  """Reads a single `Language` that is related to this `TagLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tag` that is related to this `TagLocale`."""
  source: Tag

  """The `TagLocale` that was deleted by this mutation."""
  tagLocale: TagLocale

  """An edge for our `TagLocale`. May be used by Relay 1."""
  tagLocaleEdge(
    """The method to use when ordering `TagLocale`."""
    orderBy: [TagLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagLocalesEdge
}

"""The output of our delete `Tag` mutation."""
type DeleteTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedTagNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tag` that was deleted by this mutation."""
  tag: Tag

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the `deleteUserByEmail` mutation."""
input DeleteUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!
}

"""All input for the `deleteUserByFacebookId` mutation."""
input DeleteUserByFacebookIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facebookId: BigInt!
}

"""All input for the `deleteUserByNodeId` mutation."""
input DeleteUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  deletedUserNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was deleted by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type Document implements Node {
  content: String
  createdAt: Datetime!

  """Reads and enables pagination through a set of `DocumentLocale`."""
  documentLocalesBySourceId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DocumentLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DocumentLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DocumentLocale`."""
    orderBy: [DocumentLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DocumentLocalesConnection!

  """Reads and enables pagination through a set of `DocumentLocale`."""
  documentLocalesBySourceIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DocumentLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DocumentLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `DocumentLocale`."""
    orderBy: [DocumentLocalesOrderBy!]
  ): [DocumentLocale!]!
  id: Int!

  """Reads and enables pagination through a set of `Language`."""
  languages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!]
  ): [Language!]!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
}

"""
A condition to be used against `Document` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DocumentCondition {
  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Document` object types. All fields are combined with a logical ‘and.’
"""
input DocumentFilter {
  """Checks for all expressions in this list."""
  and: [DocumentFilter!]

  """Filter by the object’s `content` field."""
  content: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `documentLocalesBySourceId` relation."""
  documentLocalesBySourceId: DocumentToManyDocumentLocaleFilter

  """Some related `documentLocalesBySourceId` exist."""
  documentLocalesBySourceIdExist: Boolean

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: DocumentFilter

  """Checks for any expressions in this list."""
  or: [DocumentFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Document`"""
input DocumentInput {
  content: String
  name: String
}

type DocumentLocale implements Node {
  content: String
  createdAt: Datetime!
  lang: String!

  """Reads a single `Language` that is related to this `DocumentLocale`."""
  languageByLang: Language

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Document` that is related to this `DocumentLocale`."""
  source: Document
  sourceId: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `DocumentLocale` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input DocumentLocaleCondition {
  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `lang` field."""
  lang: String

  """Checks for equality with the object’s `sourceId` field."""
  sourceId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `DocumentLocale` object types. All fields are combined with a logical ‘and.’
"""
input DocumentLocaleFilter {
  """Checks for all expressions in this list."""
  and: [DocumentLocaleFilter!]

  """Filter by the object’s `content` field."""
  content: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `lang` field."""
  lang: StringFilter

  """Filter by the object’s `languageByLang` relation."""
  languageByLang: LanguageFilter

  """Negates the expression."""
  not: DocumentLocaleFilter

  """Checks for any expressions in this list."""
  or: [DocumentLocaleFilter!]

  """Filter by the object’s `source` relation."""
  source: DocumentFilter

  """Filter by the object’s `sourceId` field."""
  sourceId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `DocumentLocale`"""
input DocumentLocaleInput {
  content: String
  lang: String!
  sourceId: Int!
}

"""
Represents an update to a `DocumentLocale`. Fields that are set will be updated.
"""
input DocumentLocalePatch {
  content: String
  lang: String
  sourceId: Int
}

"""A connection to a list of `DocumentLocale` values."""
type DocumentLocalesConnection {
  """
  A list of edges which contains the `DocumentLocale` and cursor to aid in pagination.
  """
  edges: [DocumentLocalesEdge!]!

  """A list of `DocumentLocale` objects."""
  nodes: [DocumentLocale]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DocumentLocale` you could get from the connection."""
  totalCount: Int!
}

"""A `DocumentLocale` edge in the connection."""
type DocumentLocalesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DocumentLocale` at the end of the edge."""
  node: DocumentLocale
}

"""Methods to use when ordering `DocumentLocale`."""
enum DocumentLocalesOrderBy {
  CONTENT_ASC
  CONTENT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  LANG_ASC
  LANG_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SOURCE_ID_ASC
  SOURCE_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Document`. Fields that are set will be updated.
"""
input DocumentPatch {
  content: String
  name: String
}

"""A connection to a list of `Document` values."""
type DocumentsConnection {
  """
  A list of edges which contains the `Document` and cursor to aid in pagination.
  """
  edges: [DocumentsEdge!]!

  """A list of `Document` objects."""
  nodes: [Document]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Document` you could get from the connection."""
  totalCount: Int!
}

"""A `Document` edge in the connection."""
type DocumentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Document` at the end of the edge."""
  node: Document
}

"""Methods to use when ordering `Document`."""
enum DocumentsOrderBy {
  CONTENT_ASC
  CONTENT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A filter to be used against many `DocumentLocale` object types. All fields are combined with a logical ‘and.’
"""
input DocumentToManyDocumentLocaleFilter {
  """
  Every related `DocumentLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DocumentLocaleFilter

  """
  No related `DocumentLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DocumentLocaleFilter

  """
  Some related `DocumentLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DocumentLocaleFilter
}

enum EmailVerificationStatus {
  NOT_VERIFIED
  SENT
  VERIFIED
}

"""
A filter to be used against EmailVerificationStatus fields. All fields are combined with a logical ‘and.’
"""
input EmailVerificationStatusFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: EmailVerificationStatus

  """Equal to the specified value."""
  equalTo: EmailVerificationStatus

  """Greater than the specified value."""
  greaterThan: EmailVerificationStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: EmailVerificationStatus

  """Included in the specified list."""
  in: [EmailVerificationStatus!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: EmailVerificationStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: EmailVerificationStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: EmailVerificationStatus

  """Not equal to the specified value."""
  notEqualTo: EmailVerificationStatus

  """Not included in the specified list."""
  notIn: [EmailVerificationStatus!]
}

type EmailVerifyResult {
  message: String
  success: Boolean
}

"""All input for the `forgotPassword` mutation."""
input ForgotPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String
}

"""The output of our `forgotPassword` mutation."""
type ForgotPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  forgotPasswordResult: ForgotPasswordResult

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type ForgotPasswordResult {
  message: String
  success: Boolean
}

type Genre implements Node {
  """Reads and enables pagination through a set of `ArticleGenre`."""
  articleGenres(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleGenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArticleGenre`."""
    orderBy: [ArticleGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleGenresConnection!

  """Reads and enables pagination through a set of `ArticleGenre`."""
  articleGenresList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleGenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArticleGenre`."""
    orderBy: [ArticleGenresOrderBy!]
  ): [ArticleGenre!]!

  """Reads and enables pagination through a set of `Article`."""
  articles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticlesConnection!

  """Reads and enables pagination through a set of `Article`."""
  articlesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!]
  ): [Article!]!
  createdAt: Datetime!

  """Reads and enables pagination through a set of `GenreLocale`."""
  genreLocalesBySourceId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GenreLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GenreLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GenreLocale`."""
    orderBy: [GenreLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GenreLocalesConnection!

  """Reads and enables pagination through a set of `GenreLocale`."""
  genreLocalesBySourceIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GenreLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GenreLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GenreLocale`."""
    orderBy: [GenreLocalesOrderBy!]
  ): [GenreLocale!]!
  id: Int!

  """Reads and enables pagination through a set of `Language`."""
  languages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!]
  ): [Language!]!

  """Reads and enables pagination through a set of `MusicianGenre`."""
  musicianGenres(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianGenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianGenre`."""
    orderBy: [MusicianGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianGenresConnection!

  """Reads and enables pagination through a set of `MusicianGenre`."""
  musicianGenresList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianGenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianGenre`."""
    orderBy: [MusicianGenresOrderBy!]
  ): [MusicianGenre!]!

  """Reads and enables pagination through a set of `Musician`."""
  musicians(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusiciansConnection!

  """Reads and enables pagination through a set of `Musician`."""
  musiciansList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!]
  ): [Musician!]!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
}

"""
A condition to be used against `Genre` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GenreCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Genre` object types. All fields are combined with a logical ‘and.’
"""
input GenreFilter {
  """Checks for all expressions in this list."""
  and: [GenreFilter!]

  """Filter by the object’s `articleGenres` relation."""
  articleGenres: GenreToManyArticleGenreFilter

  """Some related `articleGenres` exist."""
  articleGenresExist: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `genreLocalesBySourceId` relation."""
  genreLocalesBySourceId: GenreToManyGenreLocaleFilter

  """Some related `genreLocalesBySourceId` exist."""
  genreLocalesBySourceIdExist: Boolean

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `musicianGenres` relation."""
  musicianGenres: GenreToManyMusicianGenreFilter

  """Some related `musicianGenres` exist."""
  musicianGenresExist: Boolean

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: GenreFilter

  """Checks for any expressions in this list."""
  or: [GenreFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Genre`"""
input GenreInput {
  name: String
}

type GenreLocale implements Node {
  createdAt: Datetime!
  lang: String!

  """Reads a single `Language` that is related to this `GenreLocale`."""
  languageByLang: Language
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Genre` that is related to this `GenreLocale`."""
  source: Genre
  sourceId: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `GenreLocale` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GenreLocaleCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `lang` field."""
  lang: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `sourceId` field."""
  sourceId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `GenreLocale` object types. All fields are combined with a logical ‘and.’
"""
input GenreLocaleFilter {
  """Checks for all expressions in this list."""
  and: [GenreLocaleFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `lang` field."""
  lang: StringFilter

  """Filter by the object’s `languageByLang` relation."""
  languageByLang: LanguageFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: GenreLocaleFilter

  """Checks for any expressions in this list."""
  or: [GenreLocaleFilter!]

  """Filter by the object’s `source` relation."""
  source: GenreFilter

  """Filter by the object’s `sourceId` field."""
  sourceId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `GenreLocale`"""
input GenreLocaleInput {
  lang: String!
  name: String
  sourceId: Int!
}

"""
Represents an update to a `GenreLocale`. Fields that are set will be updated.
"""
input GenreLocalePatch {
  lang: String
  name: String
  sourceId: Int
}

"""A connection to a list of `GenreLocale` values."""
type GenreLocalesConnection {
  """
  A list of edges which contains the `GenreLocale` and cursor to aid in pagination.
  """
  edges: [GenreLocalesEdge!]!

  """A list of `GenreLocale` objects."""
  nodes: [GenreLocale]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GenreLocale` you could get from the connection."""
  totalCount: Int!
}

"""A `GenreLocale` edge in the connection."""
type GenreLocalesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GenreLocale` at the end of the edge."""
  node: GenreLocale
}

"""Methods to use when ordering `GenreLocale`."""
enum GenreLocalesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  LANG_ASC
  LANG_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SOURCE_ID_ASC
  SOURCE_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Genre`. Fields that are set will be updated.
"""
input GenrePatch {
  name: String
}

"""A connection to a list of `Genre` values."""
type GenresConnection {
  """
  A list of edges which contains the `Genre` and cursor to aid in pagination.
  """
  edges: [GenresEdge!]!

  """A list of `Genre` objects."""
  nodes: [Genre]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Genre` you could get from the connection."""
  totalCount: Int!
}

"""A `Genre` edge in the connection."""
type GenresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Genre` at the end of the edge."""
  node: Genre
}

"""Methods to use when ordering `Genre`."""
enum GenresOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A filter to be used against many `ArticleGenre` object types. All fields are combined with a logical ‘and.’
"""
input GenreToManyArticleGenreFilter {
  """
  Every related `ArticleGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ArticleGenreFilter

  """
  No related `ArticleGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ArticleGenreFilter

  """
  Some related `ArticleGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ArticleGenreFilter
}

"""
A filter to be used against many `GenreLocale` object types. All fields are combined with a logical ‘and.’
"""
input GenreToManyGenreLocaleFilter {
  """
  Every related `GenreLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GenreLocaleFilter

  """
  No related `GenreLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GenreLocaleFilter

  """
  Some related `GenreLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GenreLocaleFilter
}

"""
A filter to be used against many `MusicianGenre` object types. All fields are combined with a logical ‘and.’
"""
input GenreToManyMusicianGenreFilter {
  """
  Every related `MusicianGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MusicianGenreFilter

  """
  No related `MusicianGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MusicianGenreFilter

  """
  Some related `MusicianGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MusicianGenreFilter
}

type Group implements Node {
  biography: String
  createdAt: Datetime!
  founded: Datetime

  """Reads and enables pagination through a set of `GroupImage`."""
  groupImages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GroupImage`."""
    orderBy: [GroupImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupImagesConnection!

  """Reads and enables pagination through a set of `GroupImage`."""
  groupImagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GroupImage`."""
    orderBy: [GroupImagesOrderBy!]
  ): [GroupImage!]!

  """Reads and enables pagination through a set of `GroupLocale`."""
  groupLocalesBySourceId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GroupLocale`."""
    orderBy: [GroupLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupLocalesConnection!

  """Reads and enables pagination through a set of `GroupLocale`."""
  groupLocalesBySourceIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GroupLocale`."""
    orderBy: [GroupLocalesOrderBy!]
  ): [GroupLocale!]!

  """Reads and enables pagination through a set of `GroupMusician`."""
  groupMusicians(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupMusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupMusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GroupMusician`."""
    orderBy: [GroupMusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupMusiciansConnection!

  """Reads and enables pagination through a set of `GroupMusician`."""
  groupMusiciansList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupMusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupMusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GroupMusician`."""
    orderBy: [GroupMusiciansOrderBy!]
  ): [GroupMusician!]!

  """Reads and enables pagination through a set of `GroupPlaylist`."""
  groupPlaylists(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupPlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupPlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GroupPlaylist`."""
    orderBy: [GroupPlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupPlaylistsConnection!

  """Reads and enables pagination through a set of `GroupPlaylist`."""
  groupPlaylistsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupPlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupPlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GroupPlaylist`."""
    orderBy: [GroupPlaylistsOrderBy!]
  ): [GroupPlaylist!]!
  id: Int!

  """Reads and enables pagination through a set of `Image`."""
  images(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesConnection!

  """Reads and enables pagination through a set of `Image`."""
  imagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!]
  ): [Image!]!

  """Reads and enables pagination through a set of `Language`."""
  languages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!]
  ): [Language!]!

  """Reads and enables pagination through a set of `Musician`."""
  musicians(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusiciansConnection!

  """Reads and enables pagination through a set of `Musician`."""
  musiciansList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!]
  ): [Musician!]!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Image` that is related to this `Group`."""
  photo: Image
  photoId: Int

  """Reads and enables pagination through a set of `Playlist`."""
  playlists(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Playlist`."""
    orderBy: [PlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistsConnection!

  """Reads and enables pagination through a set of `Playlist`."""
  playlistsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Playlist`."""
    orderBy: [PlaylistsOrderBy!]
  ): [Playlist!]!
  updatedAt: Datetime!
}

"""
A condition to be used against `Group` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GroupCondition {
  """Checks for equality with the object’s `biography` field."""
  biography: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `founded` field."""
  founded: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `photoId` field."""
  photoId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Group` object types. All fields are combined with a logical ‘and.’
"""
input GroupFilter {
  """Checks for all expressions in this list."""
  and: [GroupFilter!]

  """Filter by the object’s `biography` field."""
  biography: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `founded` field."""
  founded: DatetimeFilter

  """Filter by the object’s `groupImages` relation."""
  groupImages: GroupToManyGroupImageFilter

  """Some related `groupImages` exist."""
  groupImagesExist: Boolean

  """Filter by the object’s `groupLocalesBySourceId` relation."""
  groupLocalesBySourceId: GroupToManyGroupLocaleFilter

  """Some related `groupLocalesBySourceId` exist."""
  groupLocalesBySourceIdExist: Boolean

  """Filter by the object’s `groupMusicians` relation."""
  groupMusicians: GroupToManyGroupMusicianFilter

  """Some related `groupMusicians` exist."""
  groupMusiciansExist: Boolean

  """Filter by the object’s `groupPlaylists` relation."""
  groupPlaylists: GroupToManyGroupPlaylistFilter

  """Some related `groupPlaylists` exist."""
  groupPlaylistsExist: Boolean

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: GroupFilter

  """Checks for any expressions in this list."""
  or: [GroupFilter!]

  """Filter by the object’s `photo` relation."""
  photo: ImageFilter

  """A related `photo` exists."""
  photoExists: Boolean

  """Filter by the object’s `photoId` field."""
  photoId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

type GroupImage implements Node {
  createdAt: Datetime!

  """Reads a single `Group` that is related to this `GroupImage`."""
  group: Group
  groupId: Int!

  """Reads a single `Image` that is related to this `GroupImage`."""
  image: Image
  imageId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
}

"""
A condition to be used against `GroupImage` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GroupImageCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `groupId` field."""
  groupId: Int

  """Checks for equality with the object’s `imageId` field."""
  imageId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `GroupImage` object types. All fields are combined with a logical ‘and.’
"""
input GroupImageFilter {
  """Checks for all expressions in this list."""
  and: [GroupImageFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `group` relation."""
  group: GroupFilter

  """Filter by the object’s `groupId` field."""
  groupId: IntFilter

  """Filter by the object’s `image` relation."""
  image: ImageFilter

  """Filter by the object’s `imageId` field."""
  imageId: IntFilter

  """Negates the expression."""
  not: GroupImageFilter

  """Checks for any expressions in this list."""
  or: [GroupImageFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `GroupImage`"""
input GroupImageInput {
  groupId: Int!
  imageId: Int!
}

"""
Represents an update to a `GroupImage`. Fields that are set will be updated.
"""
input GroupImagePatch {
  groupId: Int
  imageId: Int
}

"""A connection to a list of `GroupImage` values."""
type GroupImagesConnection {
  """
  A list of edges which contains the `GroupImage` and cursor to aid in pagination.
  """
  edges: [GroupImagesEdge!]!

  """A list of `GroupImage` objects."""
  nodes: [GroupImage]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GroupImage` you could get from the connection."""
  totalCount: Int!
}

"""A `GroupImage` edge in the connection."""
type GroupImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GroupImage` at the end of the edge."""
  node: GroupImage
}

"""Methods to use when ordering `GroupImage`."""
enum GroupImagesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""An input for mutations affecting `Group`"""
input GroupInput {
  biography: String
  founded: Datetime
  name: String
  photoId: Int
}

type GroupLocale implements Node {
  biography: String
  createdAt: Datetime!
  lang: String!

  """Reads a single `Language` that is related to this `GroupLocale`."""
  languageByLang: Language
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Group` that is related to this `GroupLocale`."""
  source: Group
  sourceId: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `GroupLocale` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GroupLocaleCondition {
  """Checks for equality with the object’s `biography` field."""
  biography: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `lang` field."""
  lang: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `sourceId` field."""
  sourceId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `GroupLocale` object types. All fields are combined with a logical ‘and.’
"""
input GroupLocaleFilter {
  """Checks for all expressions in this list."""
  and: [GroupLocaleFilter!]

  """Filter by the object’s `biography` field."""
  biography: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `lang` field."""
  lang: StringFilter

  """Filter by the object’s `languageByLang` relation."""
  languageByLang: LanguageFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: GroupLocaleFilter

  """Checks for any expressions in this list."""
  or: [GroupLocaleFilter!]

  """Filter by the object’s `source` relation."""
  source: GroupFilter

  """Filter by the object’s `sourceId` field."""
  sourceId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `GroupLocale`"""
input GroupLocaleInput {
  biography: String
  lang: String!
  name: String
  sourceId: Int!
}

"""
Represents an update to a `GroupLocale`. Fields that are set will be updated.
"""
input GroupLocalePatch {
  biography: String
  lang: String
  name: String
  sourceId: Int
}

"""A connection to a list of `GroupLocale` values."""
type GroupLocalesConnection {
  """
  A list of edges which contains the `GroupLocale` and cursor to aid in pagination.
  """
  edges: [GroupLocalesEdge!]!

  """A list of `GroupLocale` objects."""
  nodes: [GroupLocale]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GroupLocale` you could get from the connection."""
  totalCount: Int!
}

"""A `GroupLocale` edge in the connection."""
type GroupLocalesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GroupLocale` at the end of the edge."""
  node: GroupLocale
}

"""Methods to use when ordering `GroupLocale`."""
enum GroupLocalesOrderBy {
  BIOGRAPHY_ASC
  BIOGRAPHY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  LANG_ASC
  LANG_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SOURCE_ID_ASC
  SOURCE_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type GroupMusician implements Node {
  createdAt: Datetime!

  """Reads a single `Group` that is related to this `GroupMusician`."""
  group: Group
  groupId: Int!

  """Reads a single `Musician` that is related to this `GroupMusician`."""
  musician: Musician
  musicianId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
}

"""
A condition to be used against `GroupMusician` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GroupMusicianCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `groupId` field."""
  groupId: Int

  """Checks for equality with the object’s `musicianId` field."""
  musicianId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `GroupMusician` object types. All fields are combined with a logical ‘and.’
"""
input GroupMusicianFilter {
  """Checks for all expressions in this list."""
  and: [GroupMusicianFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `group` relation."""
  group: GroupFilter

  """Filter by the object’s `groupId` field."""
  groupId: IntFilter

  """Filter by the object’s `musician` relation."""
  musician: MusicianFilter

  """Filter by the object’s `musicianId` field."""
  musicianId: IntFilter

  """Negates the expression."""
  not: GroupMusicianFilter

  """Checks for any expressions in this list."""
  or: [GroupMusicianFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `GroupMusician`"""
input GroupMusicianInput {
  groupId: Int!
  musicianId: Int!
}

"""
Represents an update to a `GroupMusician`. Fields that are set will be updated.
"""
input GroupMusicianPatch {
  groupId: Int
  musicianId: Int
}

"""A connection to a list of `GroupMusician` values."""
type GroupMusiciansConnection {
  """
  A list of edges which contains the `GroupMusician` and cursor to aid in pagination.
  """
  edges: [GroupMusiciansEdge!]!

  """A list of `GroupMusician` objects."""
  nodes: [GroupMusician]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GroupMusician` you could get from the connection."""
  totalCount: Int!
}

"""A `GroupMusician` edge in the connection."""
type GroupMusiciansEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GroupMusician` at the end of the edge."""
  node: GroupMusician
}

"""Methods to use when ordering `GroupMusician`."""
enum GroupMusiciansOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  MUSICIAN_ID_ASC
  MUSICIAN_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Group`. Fields that are set will be updated.
"""
input GroupPatch {
  biography: String
  founded: Datetime
  name: String
  photoId: Int
}

type GroupPlaylist implements Node {
  createdAt: Datetime!

  """Reads a single `Group` that is related to this `GroupPlaylist`."""
  group: Group
  groupId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Playlist` that is related to this `GroupPlaylist`."""
  playlist: Playlist
  playlistId: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `GroupPlaylist` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GroupPlaylistCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `groupId` field."""
  groupId: Int

  """Checks for equality with the object’s `playlistId` field."""
  playlistId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `GroupPlaylist` object types. All fields are combined with a logical ‘and.’
"""
input GroupPlaylistFilter {
  """Checks for all expressions in this list."""
  and: [GroupPlaylistFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `group` relation."""
  group: GroupFilter

  """Filter by the object’s `groupId` field."""
  groupId: IntFilter

  """Negates the expression."""
  not: GroupPlaylistFilter

  """Checks for any expressions in this list."""
  or: [GroupPlaylistFilter!]

  """Filter by the object’s `playlist` relation."""
  playlist: PlaylistFilter

  """Filter by the object’s `playlistId` field."""
  playlistId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `GroupPlaylist`"""
input GroupPlaylistInput {
  groupId: Int!
  playlistId: Int!
}

"""
Represents an update to a `GroupPlaylist`. Fields that are set will be updated.
"""
input GroupPlaylistPatch {
  groupId: Int
  playlistId: Int
}

"""A connection to a list of `GroupPlaylist` values."""
type GroupPlaylistsConnection {
  """
  A list of edges which contains the `GroupPlaylist` and cursor to aid in pagination.
  """
  edges: [GroupPlaylistsEdge!]!

  """A list of `GroupPlaylist` objects."""
  nodes: [GroupPlaylist]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GroupPlaylist` you could get from the connection."""
  totalCount: Int!
}

"""A `GroupPlaylist` edge in the connection."""
type GroupPlaylistsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GroupPlaylist` at the end of the edge."""
  node: GroupPlaylist
}

"""Methods to use when ordering `GroupPlaylist`."""
enum GroupPlaylistsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  GROUP_ID_ASC
  GROUP_ID_DESC
  NATURAL
  PLAYLIST_ID_ASC
  PLAYLIST_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""A connection to a list of `Group` values."""
type GroupsConnection {
  """
  A list of edges which contains the `Group` and cursor to aid in pagination.
  """
  edges: [GroupsEdge!]!

  """A list of `Group` objects."""
  nodes: [Group]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Group` you could get from the connection."""
  totalCount: Int!
}

"""A `Group` edge in the connection."""
type GroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Group` at the end of the edge."""
  node: Group
}

"""Methods to use when ordering `Group`."""
enum GroupsOrderBy {
  BIOGRAPHY_ASC
  BIOGRAPHY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  FOUNDED_ASC
  FOUNDED_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PHOTO_ID_ASC
  PHOTO_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A filter to be used against many `GroupImage` object types. All fields are combined with a logical ‘and.’
"""
input GroupToManyGroupImageFilter {
  """
  Every related `GroupImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GroupImageFilter

  """
  No related `GroupImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GroupImageFilter

  """
  Some related `GroupImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GroupImageFilter
}

"""
A filter to be used against many `GroupLocale` object types. All fields are combined with a logical ‘and.’
"""
input GroupToManyGroupLocaleFilter {
  """
  Every related `GroupLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GroupLocaleFilter

  """
  No related `GroupLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GroupLocaleFilter

  """
  Some related `GroupLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GroupLocaleFilter
}

"""
A filter to be used against many `GroupMusician` object types. All fields are combined with a logical ‘and.’
"""
input GroupToManyGroupMusicianFilter {
  """
  Every related `GroupMusician` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GroupMusicianFilter

  """
  No related `GroupMusician` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GroupMusicianFilter

  """
  Some related `GroupMusician` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GroupMusicianFilter
}

"""
A filter to be used against many `GroupPlaylist` object types. All fields are combined with a logical ‘and.’
"""
input GroupToManyGroupPlaylistFilter {
  """
  Every related `GroupPlaylist` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GroupPlaylistFilter

  """
  No related `GroupPlaylist` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GroupPlaylistFilter

  """
  Some related `GroupPlaylist` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GroupPlaylistFilter
}

type Image implements Node {
  """Reads and enables pagination through a set of `ArticleGallery`."""
  articleGalleries(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleGalleryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleGalleryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArticleGallery`."""
    orderBy: [ArticleGalleriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleGalleriesConnection!

  """Reads and enables pagination through a set of `ArticleGallery`."""
  articleGalleriesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleGalleryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleGalleryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArticleGallery`."""
    orderBy: [ArticleGalleriesOrderBy!]
  ): [ArticleGallery!]!

  """Reads and enables pagination through a set of `ArticleGalleryImage`."""
  articleGalleryImages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleGalleryImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleGalleryImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArticleGalleryImage`."""
    orderBy: [ArticleGalleryImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleGalleryImagesConnection!

  """Reads and enables pagination through a set of `ArticleGalleryImage`."""
  articleGalleryImagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleGalleryImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleGalleryImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArticleGalleryImage`."""
    orderBy: [ArticleGalleryImagesOrderBy!]
  ): [ArticleGalleryImage!]!

  """Reads and enables pagination through a set of `ArticleImage`."""
  articleImages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArticleImage`."""
    orderBy: [ArticleImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleImagesConnection!

  """Reads and enables pagination through a set of `ArticleImage`."""
  articleImagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArticleImage`."""
    orderBy: [ArticleImagesOrderBy!]
  ): [ArticleImage!]!

  """Reads and enables pagination through a set of `Article`."""
  articles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticlesConnection!

  """Reads and enables pagination through a set of `Article`."""
  articlesByPosterId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticlesConnection!

  """Reads and enables pagination through a set of `Article`."""
  articlesByPosterIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!]
  ): [Article!]!

  """Reads and enables pagination through a set of `Article`."""
  articlesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!]
  ): [Article!]!
  caption: String
  createdAt: Datetime!
  description: String

  """Reads and enables pagination through a set of `GroupImage`."""
  groupImages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GroupImage`."""
    orderBy: [GroupImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupImagesConnection!

  """Reads and enables pagination through a set of `GroupImage`."""
  groupImagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GroupImage`."""
    orderBy: [GroupImagesOrderBy!]
  ): [GroupImage!]!

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsConnection!

  """Reads and enables pagination through a set of `Group`."""
  groupsByPhotoId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsConnection!

  """Reads and enables pagination through a set of `Group`."""
  groupsByPhotoIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!]
  ): [Group!]!

  """Reads and enables pagination through a set of `Group`."""
  groupsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!]
  ): [Group!]!
  id: Int!

  """Reads and enables pagination through a set of `ImageLocale`."""
  imageLocalesBySourceId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ImageLocale`."""
    orderBy: [ImageLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImageLocalesConnection!

  """Reads and enables pagination through a set of `ImageLocale`."""
  imageLocalesBySourceIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ImageLocale`."""
    orderBy: [ImageLocalesOrderBy!]
  ): [ImageLocale!]!

  """Reads and enables pagination through a set of `Language`."""
  languages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!]
  ): [Language!]!

  """Reads and enables pagination through a set of `MusicianImage`."""
  musicianImages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianImage`."""
    orderBy: [MusicianImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianImagesConnection!

  """Reads and enables pagination through a set of `MusicianImage`."""
  musicianImagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianImage`."""
    orderBy: [MusicianImagesOrderBy!]
  ): [MusicianImage!]!

  """Reads and enables pagination through a set of `Musician`."""
  musicians(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusiciansConnection!

  """Reads and enables pagination through a set of `Musician`."""
  musiciansByPhotoId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusiciansConnection!

  """Reads and enables pagination through a set of `Musician`."""
  musiciansByPhotoIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!]
  ): [Musician!]!

  """Reads and enables pagination through a set of `Musician`."""
  musiciansList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!]
  ): [Musician!]!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
  url: String!

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection!

  """Reads and enables pagination through a set of `User`."""
  usersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
  ): [User!]!
}

"""
A condition to be used against `Image` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ImageCondition {
  """Checks for equality with the object’s `caption` field."""
  caption: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `url` field."""
  url: String
}

"""
A filter to be used against `Image` object types. All fields are combined with a logical ‘and.’
"""
input ImageFilter {
  """Checks for all expressions in this list."""
  and: [ImageFilter!]

  """Filter by the object’s `articleGalleryImages` relation."""
  articleGalleryImages: ImageToManyArticleGalleryImageFilter

  """Some related `articleGalleryImages` exist."""
  articleGalleryImagesExist: Boolean

  """Filter by the object’s `articleImages` relation."""
  articleImages: ImageToManyArticleImageFilter

  """Some related `articleImages` exist."""
  articleImagesExist: Boolean

  """Filter by the object’s `articlesByPosterId` relation."""
  articlesByPosterId: ImageToManyArticleFilter

  """Some related `articlesByPosterId` exist."""
  articlesByPosterIdExist: Boolean

  """Filter by the object’s `caption` field."""
  caption: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `groupImages` relation."""
  groupImages: ImageToManyGroupImageFilter

  """Some related `groupImages` exist."""
  groupImagesExist: Boolean

  """Filter by the object’s `groupsByPhotoId` relation."""
  groupsByPhotoId: ImageToManyGroupFilter

  """Some related `groupsByPhotoId` exist."""
  groupsByPhotoIdExist: Boolean

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `imageLocalesBySourceId` relation."""
  imageLocalesBySourceId: ImageToManyImageLocaleFilter

  """Some related `imageLocalesBySourceId` exist."""
  imageLocalesBySourceIdExist: Boolean

  """Filter by the object’s `musicianImages` relation."""
  musicianImages: ImageToManyMusicianImageFilter

  """Some related `musicianImages` exist."""
  musicianImagesExist: Boolean

  """Filter by the object’s `musiciansByPhotoId` relation."""
  musiciansByPhotoId: ImageToManyMusicianFilter

  """Some related `musiciansByPhotoId` exist."""
  musiciansByPhotoIdExist: Boolean

  """Negates the expression."""
  not: ImageFilter

  """Checks for any expressions in this list."""
  or: [ImageFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `url` field."""
  url: StringFilter
}

"""An input for mutations affecting `Image`"""
input ImageInput {
  caption: String
  description: String
  url: Upload
}

type ImageLocale implements Node {
  caption: String
  createdAt: Datetime!
  description: String
  lang: String!

  """Reads a single `Language` that is related to this `ImageLocale`."""
  languageByLang: Language

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Image` that is related to this `ImageLocale`."""
  source: Image
  sourceId: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `ImageLocale` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ImageLocaleCondition {
  """Checks for equality with the object’s `caption` field."""
  caption: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `lang` field."""
  lang: String

  """Checks for equality with the object’s `sourceId` field."""
  sourceId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `ImageLocale` object types. All fields are combined with a logical ‘and.’
"""
input ImageLocaleFilter {
  """Checks for all expressions in this list."""
  and: [ImageLocaleFilter!]

  """Filter by the object’s `caption` field."""
  caption: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `lang` field."""
  lang: StringFilter

  """Filter by the object’s `languageByLang` relation."""
  languageByLang: LanguageFilter

  """Negates the expression."""
  not: ImageLocaleFilter

  """Checks for any expressions in this list."""
  or: [ImageLocaleFilter!]

  """Filter by the object’s `source` relation."""
  source: ImageFilter

  """Filter by the object’s `sourceId` field."""
  sourceId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `ImageLocale`"""
input ImageLocaleInput {
  caption: String
  description: String
  lang: String!
  sourceId: Int!
}

"""
Represents an update to a `ImageLocale`. Fields that are set will be updated.
"""
input ImageLocalePatch {
  caption: String
  description: String
  lang: String
  sourceId: Int
}

"""A connection to a list of `ImageLocale` values."""
type ImageLocalesConnection {
  """
  A list of edges which contains the `ImageLocale` and cursor to aid in pagination.
  """
  edges: [ImageLocalesEdge!]!

  """A list of `ImageLocale` objects."""
  nodes: [ImageLocale]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ImageLocale` you could get from the connection."""
  totalCount: Int!
}

"""A `ImageLocale` edge in the connection."""
type ImageLocalesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ImageLocale` at the end of the edge."""
  node: ImageLocale
}

"""Methods to use when ordering `ImageLocale`."""
enum ImageLocalesOrderBy {
  CAPTION_ASC
  CAPTION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  LANG_ASC
  LANG_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SOURCE_ID_ASC
  SOURCE_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Image`. Fields that are set will be updated.
"""
input ImagePatch {
  caption: String
  description: String
  url: Upload
}

"""A connection to a list of `Image` values."""
type ImagesConnection {
  """
  A list of edges which contains the `Image` and cursor to aid in pagination.
  """
  edges: [ImagesEdge!]!

  """A list of `Image` objects."""
  nodes: [Image]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Image` you could get from the connection."""
  totalCount: Int!
}

"""A `Image` edge in the connection."""
type ImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Image` at the end of the edge."""
  node: Image
}

"""Methods to use when ordering `Image`."""
enum ImagesOrderBy {
  CAPTION_ASC
  CAPTION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  URL_ASC
  URL_DESC
}

"""
A filter to be used against many `Article` object types. All fields are combined with a logical ‘and.’
"""
input ImageToManyArticleFilter {
  """
  Every related `Article` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ArticleFilter

  """
  No related `Article` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ArticleFilter

  """
  Some related `Article` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ArticleFilter
}

"""
A filter to be used against many `ArticleGalleryImage` object types. All fields are combined with a logical ‘and.’
"""
input ImageToManyArticleGalleryImageFilter {
  """
  Every related `ArticleGalleryImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ArticleGalleryImageFilter

  """
  No related `ArticleGalleryImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ArticleGalleryImageFilter

  """
  Some related `ArticleGalleryImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ArticleGalleryImageFilter
}

"""
A filter to be used against many `ArticleImage` object types. All fields are combined with a logical ‘and.’
"""
input ImageToManyArticleImageFilter {
  """
  Every related `ArticleImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ArticleImageFilter

  """
  No related `ArticleImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ArticleImageFilter

  """
  Some related `ArticleImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ArticleImageFilter
}

"""
A filter to be used against many `Group` object types. All fields are combined with a logical ‘and.’
"""
input ImageToManyGroupFilter {
  """
  Every related `Group` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GroupFilter

  """
  No related `Group` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GroupFilter

  """
  Some related `Group` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GroupFilter
}

"""
A filter to be used against many `GroupImage` object types. All fields are combined with a logical ‘and.’
"""
input ImageToManyGroupImageFilter {
  """
  Every related `GroupImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GroupImageFilter

  """
  No related `GroupImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GroupImageFilter

  """
  Some related `GroupImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GroupImageFilter
}

"""
A filter to be used against many `ImageLocale` object types. All fields are combined with a logical ‘and.’
"""
input ImageToManyImageLocaleFilter {
  """
  Every related `ImageLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ImageLocaleFilter

  """
  No related `ImageLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ImageLocaleFilter

  """
  Some related `ImageLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ImageLocaleFilter
}

"""
A filter to be used against many `Musician` object types. All fields are combined with a logical ‘and.’
"""
input ImageToManyMusicianFilter {
  """
  Every related `Musician` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MusicianFilter

  """
  No related `Musician` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MusicianFilter

  """
  Some related `Musician` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MusicianFilter
}

"""
A filter to be used against many `MusicianImage` object types. All fields are combined with a logical ‘and.’
"""
input ImageToManyMusicianImageFilter {
  """
  Every related `MusicianImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MusicianImageFilter

  """
  No related `MusicianImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MusicianImageFilter

  """
  Some related `MusicianImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MusicianImageFilter
}

type Instrument implements Node {
  createdAt: Datetime!
  description: String
  id: Int!

  """Reads and enables pagination through a set of `InstrumentLocale`."""
  instrumentLocalesBySourceId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InstrumentLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InstrumentLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `InstrumentLocale`."""
    orderBy: [InstrumentLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): InstrumentLocalesConnection!

  """Reads and enables pagination through a set of `InstrumentLocale`."""
  instrumentLocalesBySourceIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InstrumentLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InstrumentLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `InstrumentLocale`."""
    orderBy: [InstrumentLocalesOrderBy!]
  ): [InstrumentLocale!]!

  """Reads and enables pagination through a set of `Language`."""
  languages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!]
  ): [Language!]!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `ScoreInstrument`."""
  scoreInstruments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreInstrumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreInstrumentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ScoreInstrument`."""
    orderBy: [ScoreInstrumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoreInstrumentsConnection!

  """Reads and enables pagination through a set of `ScoreInstrument`."""
  scoreInstrumentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreInstrumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreInstrumentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ScoreInstrument`."""
    orderBy: [ScoreInstrumentsOrderBy!]
  ): [ScoreInstrument!]!

  """Reads and enables pagination through a set of `Score`."""
  scores(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Score`."""
    orderBy: [ScoresOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoresConnection!

  """Reads and enables pagination through a set of `Score`."""
  scoresList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Score`."""
    orderBy: [ScoresOrderBy!]
  ): [Score!]!
  updatedAt: Datetime!
}

"""
A condition to be used against `Instrument` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input InstrumentCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Instrument` object types. All fields are combined with a logical ‘and.’
"""
input InstrumentFilter {
  """Checks for all expressions in this list."""
  and: [InstrumentFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `instrumentLocalesBySourceId` relation."""
  instrumentLocalesBySourceId: InstrumentToManyInstrumentLocaleFilter

  """Some related `instrumentLocalesBySourceId` exist."""
  instrumentLocalesBySourceIdExist: Boolean

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: InstrumentFilter

  """Checks for any expressions in this list."""
  or: [InstrumentFilter!]

  """Filter by the object’s `scoreInstruments` relation."""
  scoreInstruments: InstrumentToManyScoreInstrumentFilter

  """Some related `scoreInstruments` exist."""
  scoreInstrumentsExist: Boolean

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Instrument`"""
input InstrumentInput {
  description: String
  name: String
}

type InstrumentLocale implements Node {
  createdAt: Datetime!
  lang: String!

  """Reads a single `Language` that is related to this `InstrumentLocale`."""
  languageByLang: Language
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads a single `Instrument` that is related to this `InstrumentLocale`.
  """
  source: Instrument
  sourceId: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `InstrumentLocale` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input InstrumentLocaleCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `lang` field."""
  lang: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `sourceId` field."""
  sourceId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `InstrumentLocale` object types. All fields are combined with a logical ‘and.’
"""
input InstrumentLocaleFilter {
  """Checks for all expressions in this list."""
  and: [InstrumentLocaleFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `lang` field."""
  lang: StringFilter

  """Filter by the object’s `languageByLang` relation."""
  languageByLang: LanguageFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: InstrumentLocaleFilter

  """Checks for any expressions in this list."""
  or: [InstrumentLocaleFilter!]

  """Filter by the object’s `source` relation."""
  source: InstrumentFilter

  """Filter by the object’s `sourceId` field."""
  sourceId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `InstrumentLocale`"""
input InstrumentLocaleInput {
  lang: String!
  name: String
  sourceId: Int!
}

"""
Represents an update to a `InstrumentLocale`. Fields that are set will be updated.
"""
input InstrumentLocalePatch {
  lang: String
  name: String
  sourceId: Int
}

"""A connection to a list of `InstrumentLocale` values."""
type InstrumentLocalesConnection {
  """
  A list of edges which contains the `InstrumentLocale` and cursor to aid in pagination.
  """
  edges: [InstrumentLocalesEdge!]!

  """A list of `InstrumentLocale` objects."""
  nodes: [InstrumentLocale]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `InstrumentLocale` you could get from the connection.
  """
  totalCount: Int!
}

"""A `InstrumentLocale` edge in the connection."""
type InstrumentLocalesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InstrumentLocale` at the end of the edge."""
  node: InstrumentLocale
}

"""Methods to use when ordering `InstrumentLocale`."""
enum InstrumentLocalesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  LANG_ASC
  LANG_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SOURCE_ID_ASC
  SOURCE_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Instrument`. Fields that are set will be updated.
"""
input InstrumentPatch {
  description: String
  name: String
}

"""A connection to a list of `Instrument` values."""
type InstrumentsConnection {
  """
  A list of edges which contains the `Instrument` and cursor to aid in pagination.
  """
  edges: [InstrumentsEdge!]!

  """A list of `Instrument` objects."""
  nodes: [Instrument]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Instrument` you could get from the connection."""
  totalCount: Int!
}

"""A `Instrument` edge in the connection."""
type InstrumentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Instrument` at the end of the edge."""
  node: Instrument
}

"""Methods to use when ordering `Instrument`."""
enum InstrumentsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A filter to be used against many `InstrumentLocale` object types. All fields are combined with a logical ‘and.’
"""
input InstrumentToManyInstrumentLocaleFilter {
  """
  Every related `InstrumentLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: InstrumentLocaleFilter

  """
  No related `InstrumentLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: InstrumentLocaleFilter

  """
  Some related `InstrumentLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: InstrumentLocaleFilter
}

"""
A filter to be used against many `ScoreInstrument` object types. All fields are combined with a logical ‘and.’
"""
input InstrumentToManyScoreInstrumentFilter {
  """
  Every related `ScoreInstrument` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ScoreInstrumentFilter

  """
  No related `ScoreInstrument` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ScoreInstrumentFilter

  """
  Some related `ScoreInstrument` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ScoreInstrumentFilter
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """Contained by the specified JSON."""
  containedBy: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contains the specified key."""
  containsKey: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value."""
  equalTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Included in the specified list."""
  in: [JSON!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """Not included in the specified list."""
  notIn: [JSON!]
}

type Language implements Node {
  """Reads and enables pagination through a set of `ArticleLocale`."""
  articleLocalesByLang(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArticleLocale`."""
    orderBy: [ArticleLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleLocalesConnection!

  """Reads and enables pagination through a set of `ArticleLocale`."""
  articleLocalesByLangList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArticleLocale`."""
    orderBy: [ArticleLocalesOrderBy!]
  ): [ArticleLocale!]!

  """Reads and enables pagination through a set of `Article`."""
  articles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticlesConnection!

  """Reads and enables pagination through a set of `Article`."""
  articlesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!]
  ): [Article!]!
  code: String!

  """Reads and enables pagination through a set of `CompositionLocale`."""
  compositionLocalesByLang(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompositionLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CompositionLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CompositionLocale`."""
    orderBy: [CompositionLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompositionLocalesConnection!

  """Reads and enables pagination through a set of `CompositionLocale`."""
  compositionLocalesByLangList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompositionLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CompositionLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CompositionLocale`."""
    orderBy: [CompositionLocalesOrderBy!]
  ): [CompositionLocale!]!

  """Reads and enables pagination through a set of `Composition`."""
  compositions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompositionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CompositionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Composition`."""
    orderBy: [CompositionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompositionsConnection!

  """Reads and enables pagination through a set of `Composition`."""
  compositionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompositionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CompositionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Composition`."""
    orderBy: [CompositionsOrderBy!]
  ): [Composition!]!

  """Reads and enables pagination through a set of `DocumentLocale`."""
  documentLocalesByLang(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DocumentLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DocumentLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DocumentLocale`."""
    orderBy: [DocumentLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DocumentLocalesConnection!

  """Reads and enables pagination through a set of `DocumentLocale`."""
  documentLocalesByLangList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DocumentLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DocumentLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `DocumentLocale`."""
    orderBy: [DocumentLocalesOrderBy!]
  ): [DocumentLocale!]!

  """Reads and enables pagination through a set of `Document`."""
  documents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DocumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DocumentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Document`."""
    orderBy: [DocumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DocumentsConnection!

  """Reads and enables pagination through a set of `Document`."""
  documentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DocumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DocumentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Document`."""
    orderBy: [DocumentsOrderBy!]
  ): [Document!]!

  """Reads and enables pagination through a set of `GenreLocale`."""
  genreLocalesByLang(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GenreLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GenreLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GenreLocale`."""
    orderBy: [GenreLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GenreLocalesConnection!

  """Reads and enables pagination through a set of `GenreLocale`."""
  genreLocalesByLangList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GenreLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GenreLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GenreLocale`."""
    orderBy: [GenreLocalesOrderBy!]
  ): [GenreLocale!]!

  """Reads and enables pagination through a set of `Genre`."""
  genres(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Genre`."""
    orderBy: [GenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): GenresConnection!

  """Reads and enables pagination through a set of `Genre`."""
  genresList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Genre`."""
    orderBy: [GenresOrderBy!]
  ): [Genre!]!

  """Reads and enables pagination through a set of `GroupLocale`."""
  groupLocalesByLang(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GroupLocale`."""
    orderBy: [GroupLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupLocalesConnection!

  """Reads and enables pagination through a set of `GroupLocale`."""
  groupLocalesByLangList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GroupLocale`."""
    orderBy: [GroupLocalesOrderBy!]
  ): [GroupLocale!]!

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsConnection!

  """Reads and enables pagination through a set of `Group`."""
  groupsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!]
  ): [Group!]!

  """Reads and enables pagination through a set of `ImageLocale`."""
  imageLocalesByLang(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ImageLocale`."""
    orderBy: [ImageLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImageLocalesConnection!

  """Reads and enables pagination through a set of `ImageLocale`."""
  imageLocalesByLangList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ImageLocale`."""
    orderBy: [ImageLocalesOrderBy!]
  ): [ImageLocale!]!

  """Reads and enables pagination through a set of `Image`."""
  images(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesConnection!

  """Reads and enables pagination through a set of `Image`."""
  imagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!]
  ): [Image!]!

  """Reads and enables pagination through a set of `InstrumentLocale`."""
  instrumentLocalesByLang(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InstrumentLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InstrumentLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `InstrumentLocale`."""
    orderBy: [InstrumentLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): InstrumentLocalesConnection!

  """Reads and enables pagination through a set of `InstrumentLocale`."""
  instrumentLocalesByLangList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InstrumentLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InstrumentLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `InstrumentLocale`."""
    orderBy: [InstrumentLocalesOrderBy!]
  ): [InstrumentLocale!]!

  """Reads and enables pagination through a set of `Instrument`."""
  instruments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InstrumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InstrumentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Instrument`."""
    orderBy: [InstrumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InstrumentsConnection!

  """Reads and enables pagination through a set of `Instrument`."""
  instrumentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InstrumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InstrumentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Instrument`."""
    orderBy: [InstrumentsOrderBy!]
  ): [Instrument!]!

  """Reads and enables pagination through a set of `Media`."""
  media(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaConnection!

  """Reads and enables pagination through a set of `Media`."""
  mediaList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!]
  ): [Media!]!

  """Reads and enables pagination through a set of `MediaLocale`."""
  mediaLocalesByLang(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaLocale`."""
    orderBy: [MediaLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaLocalesConnection!

  """Reads and enables pagination through a set of `MediaLocale`."""
  mediaLocalesByLangList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MediaLocale`."""
    orderBy: [MediaLocalesOrderBy!]
  ): [MediaLocale!]!

  """Reads and enables pagination through a set of `MusicianLocale`."""
  musicianLocalesByLang(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianLocale`."""
    orderBy: [MusicianLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianLocalesConnection!

  """Reads and enables pagination through a set of `MusicianLocale`."""
  musicianLocalesByLangList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianLocale`."""
    orderBy: [MusicianLocalesOrderBy!]
  ): [MusicianLocale!]!

  """Reads and enables pagination through a set of `Musician`."""
  musicians(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusiciansConnection!

  """Reads and enables pagination through a set of `Musician`."""
  musiciansList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!]
  ): [Musician!]!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `PlaylistLocale`."""
  playlistLocalesByLang(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlaylistLocale`."""
    orderBy: [PlaylistLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistLocalesConnection!

  """Reads and enables pagination through a set of `PlaylistLocale`."""
  playlistLocalesByLangList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PlaylistLocale`."""
    orderBy: [PlaylistLocalesOrderBy!]
  ): [PlaylistLocale!]!

  """Reads and enables pagination through a set of `Playlist`."""
  playlists(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Playlist`."""
    orderBy: [PlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistsConnection!

  """Reads and enables pagination through a set of `Playlist`."""
  playlistsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Playlist`."""
    orderBy: [PlaylistsOrderBy!]
  ): [Playlist!]!

  """Reads and enables pagination through a set of `ProfessionLocale`."""
  professionLocalesByLang(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfessionLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfessionLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProfessionLocale`."""
    orderBy: [ProfessionLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfessionLocalesConnection!

  """Reads and enables pagination through a set of `ProfessionLocale`."""
  professionLocalesByLangList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfessionLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfessionLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ProfessionLocale`."""
    orderBy: [ProfessionLocalesOrderBy!]
  ): [ProfessionLocale!]!

  """Reads and enables pagination through a set of `Profession`."""
  professions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfessionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfessionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Profession`."""
    orderBy: [ProfessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfessionsConnection!

  """Reads and enables pagination through a set of `Profession`."""
  professionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfessionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfessionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Profession`."""
    orderBy: [ProfessionsOrderBy!]
  ): [Profession!]!

  """Reads and enables pagination through a set of `ScoreLocale`."""
  scoreLocalesByLang(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ScoreLocale`."""
    orderBy: [ScoreLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoreLocalesConnection!

  """Reads and enables pagination through a set of `ScoreLocale`."""
  scoreLocalesByLangList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ScoreLocale`."""
    orderBy: [ScoreLocalesOrderBy!]
  ): [ScoreLocale!]!

  """Reads and enables pagination through a set of `Score`."""
  scores(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Score`."""
    orderBy: [ScoresOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoresConnection!

  """Reads and enables pagination through a set of `Score`."""
  scoresList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Score`."""
    orderBy: [ScoresOrderBy!]
  ): [Score!]!

  """Reads and enables pagination through a set of `TagLocale`."""
  tagLocalesByLang(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `TagLocale`."""
    orderBy: [TagLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagLocalesConnection!

  """Reads and enables pagination through a set of `TagLocale`."""
  tagLocalesByLangList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TagLocale`."""
    orderBy: [TagLocalesOrderBy!]
  ): [TagLocale!]!

  """Reads and enables pagination through a set of `Tag`."""
  tags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsConnection!

  """Reads and enables pagination through a set of `Tag`."""
  tagsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!]
  ): [Tag!]!
}

"""
A condition to be used against `Language` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input LanguageCondition {
  """Checks for equality with the object’s `code` field."""
  code: String
}

"""
A filter to be used against `Language` object types. All fields are combined with a logical ‘and.’
"""
input LanguageFilter {
  """Checks for all expressions in this list."""
  and: [LanguageFilter!]

  """Filter by the object’s `articleLocalesByLang` relation."""
  articleLocalesByLang: LanguageToManyArticleLocaleFilter

  """Some related `articleLocalesByLang` exist."""
  articleLocalesByLangExist: Boolean

  """Filter by the object’s `code` field."""
  code: StringFilter

  """Filter by the object’s `compositionLocalesByLang` relation."""
  compositionLocalesByLang: LanguageToManyCompositionLocaleFilter

  """Some related `compositionLocalesByLang` exist."""
  compositionLocalesByLangExist: Boolean

  """Filter by the object’s `documentLocalesByLang` relation."""
  documentLocalesByLang: LanguageToManyDocumentLocaleFilter

  """Some related `documentLocalesByLang` exist."""
  documentLocalesByLangExist: Boolean

  """Filter by the object’s `genreLocalesByLang` relation."""
  genreLocalesByLang: LanguageToManyGenreLocaleFilter

  """Some related `genreLocalesByLang` exist."""
  genreLocalesByLangExist: Boolean

  """Filter by the object’s `groupLocalesByLang` relation."""
  groupLocalesByLang: LanguageToManyGroupLocaleFilter

  """Some related `groupLocalesByLang` exist."""
  groupLocalesByLangExist: Boolean

  """Filter by the object’s `imageLocalesByLang` relation."""
  imageLocalesByLang: LanguageToManyImageLocaleFilter

  """Some related `imageLocalesByLang` exist."""
  imageLocalesByLangExist: Boolean

  """Filter by the object’s `instrumentLocalesByLang` relation."""
  instrumentLocalesByLang: LanguageToManyInstrumentLocaleFilter

  """Some related `instrumentLocalesByLang` exist."""
  instrumentLocalesByLangExist: Boolean

  """Filter by the object’s `mediaLocalesByLang` relation."""
  mediaLocalesByLang: LanguageToManyMediaLocaleFilter

  """Some related `mediaLocalesByLang` exist."""
  mediaLocalesByLangExist: Boolean

  """Filter by the object’s `musicianLocalesByLang` relation."""
  musicianLocalesByLang: LanguageToManyMusicianLocaleFilter

  """Some related `musicianLocalesByLang` exist."""
  musicianLocalesByLangExist: Boolean

  """Negates the expression."""
  not: LanguageFilter

  """Checks for any expressions in this list."""
  or: [LanguageFilter!]

  """Filter by the object’s `playlistLocalesByLang` relation."""
  playlistLocalesByLang: LanguageToManyPlaylistLocaleFilter

  """Some related `playlistLocalesByLang` exist."""
  playlistLocalesByLangExist: Boolean

  """Filter by the object’s `professionLocalesByLang` relation."""
  professionLocalesByLang: LanguageToManyProfessionLocaleFilter

  """Some related `professionLocalesByLang` exist."""
  professionLocalesByLangExist: Boolean

  """Filter by the object’s `scoreLocalesByLang` relation."""
  scoreLocalesByLang: LanguageToManyScoreLocaleFilter

  """Some related `scoreLocalesByLang` exist."""
  scoreLocalesByLangExist: Boolean

  """Filter by the object’s `tagLocalesByLang` relation."""
  tagLocalesByLang: LanguageToManyTagLocaleFilter

  """Some related `tagLocalesByLang` exist."""
  tagLocalesByLangExist: Boolean
}

"""An input for mutations affecting `Language`"""
input LanguageInput {
  code: String!
}

"""A connection to a list of `Language` values."""
type LanguagesConnection {
  """
  A list of edges which contains the `Language` and cursor to aid in pagination.
  """
  edges: [LanguagesEdge!]!

  """A list of `Language` objects."""
  nodes: [Language]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Language` you could get from the connection."""
  totalCount: Int!
}

"""A `Language` edge in the connection."""
type LanguagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Language` at the end of the edge."""
  node: Language
}

"""Methods to use when ordering `Language`."""
enum LanguagesOrderBy {
  CODE_ASC
  CODE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A filter to be used against many `ArticleLocale` object types. All fields are combined with a logical ‘and.’
"""
input LanguageToManyArticleLocaleFilter {
  """
  Every related `ArticleLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ArticleLocaleFilter

  """
  No related `ArticleLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ArticleLocaleFilter

  """
  Some related `ArticleLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ArticleLocaleFilter
}

"""
A filter to be used against many `CompositionLocale` object types. All fields are combined with a logical ‘and.’
"""
input LanguageToManyCompositionLocaleFilter {
  """
  Every related `CompositionLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: CompositionLocaleFilter

  """
  No related `CompositionLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: CompositionLocaleFilter

  """
  Some related `CompositionLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: CompositionLocaleFilter
}

"""
A filter to be used against many `DocumentLocale` object types. All fields are combined with a logical ‘and.’
"""
input LanguageToManyDocumentLocaleFilter {
  """
  Every related `DocumentLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: DocumentLocaleFilter

  """
  No related `DocumentLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: DocumentLocaleFilter

  """
  Some related `DocumentLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: DocumentLocaleFilter
}

"""
A filter to be used against many `GenreLocale` object types. All fields are combined with a logical ‘and.’
"""
input LanguageToManyGenreLocaleFilter {
  """
  Every related `GenreLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GenreLocaleFilter

  """
  No related `GenreLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GenreLocaleFilter

  """
  Some related `GenreLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GenreLocaleFilter
}

"""
A filter to be used against many `GroupLocale` object types. All fields are combined with a logical ‘and.’
"""
input LanguageToManyGroupLocaleFilter {
  """
  Every related `GroupLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GroupLocaleFilter

  """
  No related `GroupLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GroupLocaleFilter

  """
  Some related `GroupLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GroupLocaleFilter
}

"""
A filter to be used against many `ImageLocale` object types. All fields are combined with a logical ‘and.’
"""
input LanguageToManyImageLocaleFilter {
  """
  Every related `ImageLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ImageLocaleFilter

  """
  No related `ImageLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ImageLocaleFilter

  """
  Some related `ImageLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ImageLocaleFilter
}

"""
A filter to be used against many `InstrumentLocale` object types. All fields are combined with a logical ‘and.’
"""
input LanguageToManyInstrumentLocaleFilter {
  """
  Every related `InstrumentLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: InstrumentLocaleFilter

  """
  No related `InstrumentLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: InstrumentLocaleFilter

  """
  Some related `InstrumentLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: InstrumentLocaleFilter
}

"""
A filter to be used against many `MediaLocale` object types. All fields are combined with a logical ‘and.’
"""
input LanguageToManyMediaLocaleFilter {
  """
  Every related `MediaLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MediaLocaleFilter

  """
  No related `MediaLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MediaLocaleFilter

  """
  Some related `MediaLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MediaLocaleFilter
}

"""
A filter to be used against many `MusicianLocale` object types. All fields are combined with a logical ‘and.’
"""
input LanguageToManyMusicianLocaleFilter {
  """
  Every related `MusicianLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MusicianLocaleFilter

  """
  No related `MusicianLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MusicianLocaleFilter

  """
  Some related `MusicianLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MusicianLocaleFilter
}

"""
A filter to be used against many `PlaylistLocale` object types. All fields are combined with a logical ‘and.’
"""
input LanguageToManyPlaylistLocaleFilter {
  """
  Every related `PlaylistLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PlaylistLocaleFilter

  """
  No related `PlaylistLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PlaylistLocaleFilter

  """
  Some related `PlaylistLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PlaylistLocaleFilter
}

"""
A filter to be used against many `ProfessionLocale` object types. All fields are combined with a logical ‘and.’
"""
input LanguageToManyProfessionLocaleFilter {
  """
  Every related `ProfessionLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProfessionLocaleFilter

  """
  No related `ProfessionLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProfessionLocaleFilter

  """
  Some related `ProfessionLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProfessionLocaleFilter
}

"""
A filter to be used against many `ScoreLocale` object types. All fields are combined with a logical ‘and.’
"""
input LanguageToManyScoreLocaleFilter {
  """
  Every related `ScoreLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ScoreLocaleFilter

  """
  No related `ScoreLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ScoreLocaleFilter

  """
  Some related `ScoreLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ScoreLocaleFilter
}

"""
A filter to be used against many `TagLocale` object types. All fields are combined with a logical ‘and.’
"""
input LanguageToManyTagLocaleFilter {
  """
  Every related `TagLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TagLocaleFilter

  """
  No related `TagLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TagLocaleFilter

  """
  Some related `TagLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TagLocaleFilter
}

type LoginPayload {
  """
  0 - success
  
  1 - invalid credentials
  
  2 - try facebook
  """
  errorCode: Int!

  """Message about why login failed, null on success."""
  message: String
}

type Media implements Node {
  createdAt: Datetime!
  id: Int!

  """Reads and enables pagination through a set of `Language`."""
  languages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!]
  ): [Language!]!

  """Reads and enables pagination through a set of `MediaLocale`."""
  mediaLocalesBySourceId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaLocale`."""
    orderBy: [MediaLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaLocalesConnection!

  """Reads and enables pagination through a set of `MediaLocale`."""
  mediaLocalesBySourceIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MediaLocale`."""
    orderBy: [MediaLocalesOrderBy!]
  ): [MediaLocale!]!
  mediaType: MediaType

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `PlaylistMedia`."""
  playlistMedias(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistMediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistMediaFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlaylistMedia`."""
    orderBy: [PlaylistMediasOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistMediasConnection!

  """Reads and enables pagination through a set of `PlaylistMedia`."""
  playlistMediasList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistMediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistMediaFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PlaylistMedia`."""
    orderBy: [PlaylistMediasOrderBy!]
  ): [PlaylistMedia!]!

  """Reads and enables pagination through a set of `Playlist`."""
  playlists(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Playlist`."""
    orderBy: [PlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistsConnection!

  """Reads and enables pagination through a set of `Playlist`."""
  playlistsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Playlist`."""
    orderBy: [PlaylistsOrderBy!]
  ): [Playlist!]!
  title: String
  updatedAt: Datetime!
  url: String!
}

"""
A condition to be used against `Media` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MediaCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `mediaType` field."""
  mediaType: MediaType

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `url` field."""
  url: String
}

"""A connection to a list of `Media` values."""
type MediaConnection {
  """
  A list of edges which contains the `Media` and cursor to aid in pagination.
  """
  edges: [MediaEdge!]!

  """A list of `Media` objects."""
  nodes: [Media]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Media` you could get from the connection."""
  totalCount: Int!
}

"""A `Media` edge in the connection."""
type MediaEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Media` at the end of the edge."""
  node: Media
}

"""
A filter to be used against `Media` object types. All fields are combined with a logical ‘and.’
"""
input MediaFilter {
  """Checks for all expressions in this list."""
  and: [MediaFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `mediaLocalesBySourceId` relation."""
  mediaLocalesBySourceId: MediaToManyMediaLocaleFilter

  """Some related `mediaLocalesBySourceId` exist."""
  mediaLocalesBySourceIdExist: Boolean

  """Filter by the object’s `mediaType` field."""
  mediaType: MediaTypeFilter

  """Negates the expression."""
  not: MediaFilter

  """Checks for any expressions in this list."""
  or: [MediaFilter!]

  """Filter by the object’s `playlistMedias` relation."""
  playlistMedias: MediaToManyPlaylistMediaFilter

  """Some related `playlistMedias` exist."""
  playlistMediasExist: Boolean

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `url` field."""
  url: StringFilter
}

"""An input for mutations affecting `Media`"""
input MediaInput {
  mediaType: MediaType
  title: String
  url: Upload
}

type MediaLocale implements Node {
  createdAt: Datetime!
  lang: String!

  """Reads a single `Language` that is related to this `MediaLocale`."""
  languageByLang: Language

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Media` that is related to this `MediaLocale`."""
  source: Media
  sourceId: Int!
  title: String
  updatedAt: Datetime!
}

"""
A condition to be used against `MediaLocale` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MediaLocaleCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `lang` field."""
  lang: String

  """Checks for equality with the object’s `sourceId` field."""
  sourceId: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `MediaLocale` object types. All fields are combined with a logical ‘and.’
"""
input MediaLocaleFilter {
  """Checks for all expressions in this list."""
  and: [MediaLocaleFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `lang` field."""
  lang: StringFilter

  """Filter by the object’s `languageByLang` relation."""
  languageByLang: LanguageFilter

  """Negates the expression."""
  not: MediaLocaleFilter

  """Checks for any expressions in this list."""
  or: [MediaLocaleFilter!]

  """Filter by the object’s `source` relation."""
  source: MediaFilter

  """Filter by the object’s `sourceId` field."""
  sourceId: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `MediaLocale`"""
input MediaLocaleInput {
  lang: String!
  sourceId: Int!
  title: String
}

"""
Represents an update to a `MediaLocale`. Fields that are set will be updated.
"""
input MediaLocalePatch {
  lang: String
  sourceId: Int
  title: String
}

"""A connection to a list of `MediaLocale` values."""
type MediaLocalesConnection {
  """
  A list of edges which contains the `MediaLocale` and cursor to aid in pagination.
  """
  edges: [MediaLocalesEdge!]!

  """A list of `MediaLocale` objects."""
  nodes: [MediaLocale]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MediaLocale` you could get from the connection."""
  totalCount: Int!
}

"""A `MediaLocale` edge in the connection."""
type MediaLocalesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MediaLocale` at the end of the edge."""
  node: MediaLocale
}

"""Methods to use when ordering `MediaLocale`."""
enum MediaLocalesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  LANG_ASC
  LANG_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SOURCE_ID_ASC
  SOURCE_ID_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Methods to use when ordering `Media`."""
enum MediaOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  MEDIA_TYPE_ASC
  MEDIA_TYPE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  URL_ASC
  URL_DESC
}

"""
Represents an update to a `Media`. Fields that are set will be updated.
"""
input MediaPatch {
  mediaType: MediaType
  title: String
  url: Upload
}

"""
A filter to be used against many `MediaLocale` object types. All fields are combined with a logical ‘and.’
"""
input MediaToManyMediaLocaleFilter {
  """
  Every related `MediaLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MediaLocaleFilter

  """
  No related `MediaLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MediaLocaleFilter

  """
  Some related `MediaLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MediaLocaleFilter
}

"""
A filter to be used against many `PlaylistMedia` object types. All fields are combined with a logical ‘and.’
"""
input MediaToManyPlaylistMediaFilter {
  """
  Every related `PlaylistMedia` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PlaylistMediaFilter

  """
  No related `PlaylistMedia` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PlaylistMediaFilter

  """
  Some related `PlaylistMedia` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PlaylistMediaFilter
}

enum MediaType {
  AUDIO
  VIDEO
}

"""
A filter to be used against MediaType fields. All fields are combined with a logical ‘and.’
"""
input MediaTypeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: MediaType

  """Equal to the specified value."""
  equalTo: MediaType

  """Greater than the specified value."""
  greaterThan: MediaType

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: MediaType

  """Included in the specified list."""
  in: [MediaType!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: MediaType

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: MediaType

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: MediaType

  """Not equal to the specified value."""
  notEqualTo: MediaType

  """Not included in the specified list."""
  notIn: [MediaType!]
}

type Musician implements Node {
  biography: String
  birthday: Date

  """Reads and enables pagination through a set of `Composition`."""
  compositions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompositionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CompositionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Composition`."""
    orderBy: [CompositionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompositionsConnection!

  """Reads and enables pagination through a set of `Composition`."""
  compositionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompositionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CompositionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Composition`."""
    orderBy: [CompositionsOrderBy!]
  ): [Composition!]!
  createdAt: Datetime!
  deathday: Date
  description: String
  firstName: String

  """Reads and enables pagination through a set of `Genre`."""
  genres(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Genre`."""
    orderBy: [GenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): GenresConnection!

  """Reads and enables pagination through a set of `Genre`."""
  genresList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Genre`."""
    orderBy: [GenresOrderBy!]
  ): [Genre!]!

  """Reads and enables pagination through a set of `GroupMusician`."""
  groupMusicians(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupMusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupMusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GroupMusician`."""
    orderBy: [GroupMusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupMusiciansConnection!

  """Reads and enables pagination through a set of `GroupMusician`."""
  groupMusiciansList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupMusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupMusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GroupMusician`."""
    orderBy: [GroupMusiciansOrderBy!]
  ): [GroupMusician!]!

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsConnection!

  """Reads and enables pagination through a set of `Group`."""
  groupsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!]
  ): [Group!]!
  id: Int!

  """Reads and enables pagination through a set of `Image`."""
  images(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesConnection!

  """Reads and enables pagination through a set of `Image`."""
  imagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!]
  ): [Image!]!

  """Reads and enables pagination through a set of `Language`."""
  languages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!]
  ): [Language!]!
  lastName: String

  """Reads and enables pagination through a set of `MusicianComposition`."""
  musicianCompositions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCompositionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianCompositionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianComposition`."""
    orderBy: [MusicianCompositionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianCompositionsConnection!

  """Reads and enables pagination through a set of `MusicianComposition`."""
  musicianCompositionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCompositionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianCompositionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianComposition`."""
    orderBy: [MusicianCompositionsOrderBy!]
  ): [MusicianComposition!]!

  """Reads and enables pagination through a set of `MusicianGenre`."""
  musicianGenres(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianGenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianGenre`."""
    orderBy: [MusicianGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianGenresConnection!

  """Reads and enables pagination through a set of `MusicianGenre`."""
  musicianGenresList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianGenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianGenre`."""
    orderBy: [MusicianGenresOrderBy!]
  ): [MusicianGenre!]!

  """Reads and enables pagination through a set of `MusicianImage`."""
  musicianImages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianImage`."""
    orderBy: [MusicianImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianImagesConnection!

  """Reads and enables pagination through a set of `MusicianImage`."""
  musicianImagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianImage`."""
    orderBy: [MusicianImagesOrderBy!]
  ): [MusicianImage!]!

  """Reads and enables pagination through a set of `MusicianLocale`."""
  musicianLocalesBySourceId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianLocale`."""
    orderBy: [MusicianLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianLocalesConnection!

  """Reads and enables pagination through a set of `MusicianLocale`."""
  musicianLocalesBySourceIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianLocale`."""
    orderBy: [MusicianLocalesOrderBy!]
  ): [MusicianLocale!]!

  """Reads and enables pagination through a set of `MusicianPlaylist`."""
  musicianPlaylists(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianPlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianPlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianPlaylist`."""
    orderBy: [MusicianPlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianPlaylistsConnection!

  """Reads and enables pagination through a set of `MusicianPlaylist`."""
  musicianPlaylistsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianPlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianPlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianPlaylist`."""
    orderBy: [MusicianPlaylistsOrderBy!]
  ): [MusicianPlaylist!]!

  """Reads and enables pagination through a set of `MusicianProfession`."""
  musicianProfessions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianProfessionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianProfessionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianProfession`."""
    orderBy: [MusicianProfessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianProfessionsConnection!

  """Reads and enables pagination through a set of `MusicianProfession`."""
  musicianProfessionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianProfessionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianProfessionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianProfession`."""
    orderBy: [MusicianProfessionsOrderBy!]
  ): [MusicianProfession!]!

  """Reads and enables pagination through a set of `MusicianTag`."""
  musicianTags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianTagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianTag`."""
    orderBy: [MusicianTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianTagsConnection!

  """Reads and enables pagination through a set of `MusicianTag`."""
  musicianTagsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianTagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianTag`."""
    orderBy: [MusicianTagsOrderBy!]
  ): [MusicianTag!]!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """SEO friendly name to use in url"""
  path: String!

  """Reads a single `Image` that is related to this `Musician`."""
  photo: Image
  photoId: Int

  """Reads and enables pagination through a set of `Playlist`."""
  playlists(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Playlist`."""
    orderBy: [PlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistsConnection!

  """Reads and enables pagination through a set of `Playlist`."""
  playlistsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Playlist`."""
    orderBy: [PlaylistsOrderBy!]
  ): [Playlist!]!

  """Reads and enables pagination through a set of `Profession`."""
  professions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfessionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfessionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Profession`."""
    orderBy: [ProfessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfessionsConnection!

  """Reads and enables pagination through a set of `Profession`."""
  professionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfessionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfessionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Profession`."""
    orderBy: [ProfessionsOrderBy!]
  ): [Profession!]!
  published: Boolean!

  """
  This is automatically changed if 'published' changed, can be manually provided by 'admin'.
  """
  publishedAt: Datetime

  """Reads and enables pagination through a set of `Tag`."""
  tags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsConnection!

  """Reads and enables pagination through a set of `Tag`."""
  tagsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!]
  ): [Tag!]!
  type: String!
  updatedAt: Datetime!
}

type MusicianComposition implements Node {
  """
  Reads a single `Composition` that is related to this `MusicianComposition`.
  """
  composition: Composition
  compositionId: Int!
  createdAt: Datetime!

  """
  Reads a single `Musician` that is related to this `MusicianComposition`.
  """
  musician: Musician
  musicianId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
}

"""
A condition to be used against `MusicianComposition` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input MusicianCompositionCondition {
  """Checks for equality with the object’s `compositionId` field."""
  compositionId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `musicianId` field."""
  musicianId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `MusicianComposition` object types. All fields are combined with a logical ‘and.’
"""
input MusicianCompositionFilter {
  """Checks for all expressions in this list."""
  and: [MusicianCompositionFilter!]

  """Filter by the object’s `composition` relation."""
  composition: CompositionFilter

  """Filter by the object’s `compositionId` field."""
  compositionId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `musician` relation."""
  musician: MusicianFilter

  """Filter by the object’s `musicianId` field."""
  musicianId: IntFilter

  """Negates the expression."""
  not: MusicianCompositionFilter

  """Checks for any expressions in this list."""
  or: [MusicianCompositionFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `MusicianComposition`"""
input MusicianCompositionInput {
  compositionId: Int!
  musicianId: Int!
}

"""
Represents an update to a `MusicianComposition`. Fields that are set will be updated.
"""
input MusicianCompositionPatch {
  compositionId: Int
  musicianId: Int
}

"""A connection to a list of `MusicianComposition` values."""
type MusicianCompositionsConnection {
  """
  A list of edges which contains the `MusicianComposition` and cursor to aid in pagination.
  """
  edges: [MusicianCompositionsEdge!]!

  """A list of `MusicianComposition` objects."""
  nodes: [MusicianComposition]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MusicianComposition` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MusicianComposition` edge in the connection."""
type MusicianCompositionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MusicianComposition` at the end of the edge."""
  node: MusicianComposition
}

"""Methods to use when ordering `MusicianComposition`."""
enum MusicianCompositionsOrderBy {
  COMPOSITION_ID_ASC
  COMPOSITION_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  MUSICIAN_ID_ASC
  MUSICIAN_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A condition to be used against `Musician` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MusicianCondition {
  """Checks for equality with the object’s `biography` field."""
  biography: String

  """Checks for equality with the object’s `birthday` field."""
  birthday: Date

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `deathday` field."""
  deathday: Date

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `path` field."""
  path: String

  """Checks for equality with the object’s `photoId` field."""
  photoId: Int

  """Checks for equality with the object’s `published` field."""
  published: Boolean

  """Checks for equality with the object’s `publishedAt` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Musician` object types. All fields are combined with a logical ‘and.’
"""
input MusicianFilter {
  """Checks for all expressions in this list."""
  and: [MusicianFilter!]

  """Filter by the object’s `biography` field."""
  biography: StringFilter

  """Filter by the object’s `birthday` field."""
  birthday: DateFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `deathday` field."""
  deathday: DateFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `firstName` field."""
  firstName: StringFilter

  """Filter by the object’s `groupMusicians` relation."""
  groupMusicians: MusicianToManyGroupMusicianFilter

  """Some related `groupMusicians` exist."""
  groupMusiciansExist: Boolean

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `lastName` field."""
  lastName: StringFilter

  """Filter by the object’s `musicianCompositions` relation."""
  musicianCompositions: MusicianToManyMusicianCompositionFilter

  """Some related `musicianCompositions` exist."""
  musicianCompositionsExist: Boolean

  """Filter by the object’s `musicianGenres` relation."""
  musicianGenres: MusicianToManyMusicianGenreFilter

  """Some related `musicianGenres` exist."""
  musicianGenresExist: Boolean

  """Filter by the object’s `musicianImages` relation."""
  musicianImages: MusicianToManyMusicianImageFilter

  """Some related `musicianImages` exist."""
  musicianImagesExist: Boolean

  """Filter by the object’s `musicianLocalesBySourceId` relation."""
  musicianLocalesBySourceId: MusicianToManyMusicianLocaleFilter

  """Some related `musicianLocalesBySourceId` exist."""
  musicianLocalesBySourceIdExist: Boolean

  """Filter by the object’s `musicianPlaylists` relation."""
  musicianPlaylists: MusicianToManyMusicianPlaylistFilter

  """Some related `musicianPlaylists` exist."""
  musicianPlaylistsExist: Boolean

  """Filter by the object’s `musicianProfessions` relation."""
  musicianProfessions: MusicianToManyMusicianProfessionFilter

  """Some related `musicianProfessions` exist."""
  musicianProfessionsExist: Boolean

  """Filter by the object’s `musicianTags` relation."""
  musicianTags: MusicianToManyMusicianTagFilter

  """Some related `musicianTags` exist."""
  musicianTagsExist: Boolean

  """Negates the expression."""
  not: MusicianFilter

  """Checks for any expressions in this list."""
  or: [MusicianFilter!]

  """Filter by the object’s `path` field."""
  path: StringFilter

  """Filter by the object’s `photo` relation."""
  photo: ImageFilter

  """A related `photo` exists."""
  photoExists: Boolean

  """Filter by the object’s `photoId` field."""
  photoId: IntFilter

  """Filter by the object’s `published` field."""
  published: BooleanFilter

  """Filter by the object’s `publishedAt` field."""
  publishedAt: DatetimeFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

type MusicianGenre implements Node {
  createdAt: Datetime!

  """Reads a single `Genre` that is related to this `MusicianGenre`."""
  genre: Genre
  genreId: Int!

  """Reads a single `Musician` that is related to this `MusicianGenre`."""
  musician: Musician
  musicianId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
}

"""
A condition to be used against `MusicianGenre` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MusicianGenreCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `genreId` field."""
  genreId: Int

  """Checks for equality with the object’s `musicianId` field."""
  musicianId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `MusicianGenre` object types. All fields are combined with a logical ‘and.’
"""
input MusicianGenreFilter {
  """Checks for all expressions in this list."""
  and: [MusicianGenreFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `genre` relation."""
  genre: GenreFilter

  """Filter by the object’s `genreId` field."""
  genreId: IntFilter

  """Filter by the object’s `musician` relation."""
  musician: MusicianFilter

  """Filter by the object’s `musicianId` field."""
  musicianId: IntFilter

  """Negates the expression."""
  not: MusicianGenreFilter

  """Checks for any expressions in this list."""
  or: [MusicianGenreFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `MusicianGenre`"""
input MusicianGenreInput {
  genreId: Int!
  musicianId: Int!
}

"""
Represents an update to a `MusicianGenre`. Fields that are set will be updated.
"""
input MusicianGenrePatch {
  genreId: Int
  musicianId: Int
}

"""A connection to a list of `MusicianGenre` values."""
type MusicianGenresConnection {
  """
  A list of edges which contains the `MusicianGenre` and cursor to aid in pagination.
  """
  edges: [MusicianGenresEdge!]!

  """A list of `MusicianGenre` objects."""
  nodes: [MusicianGenre]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MusicianGenre` you could get from the connection."""
  totalCount: Int!
}

"""A `MusicianGenre` edge in the connection."""
type MusicianGenresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MusicianGenre` at the end of the edge."""
  node: MusicianGenre
}

"""Methods to use when ordering `MusicianGenre`."""
enum MusicianGenresOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  GENRE_ID_ASC
  GENRE_ID_DESC
  MUSICIAN_ID_ASC
  MUSICIAN_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type MusicianImage implements Node {
  createdAt: Datetime!

  """Reads a single `Image` that is related to this `MusicianImage`."""
  image: Image
  imageId: Int!

  """Reads a single `Musician` that is related to this `MusicianImage`."""
  musician: Musician
  musicianId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
}

"""
A condition to be used against `MusicianImage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MusicianImageCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `imageId` field."""
  imageId: Int

  """Checks for equality with the object’s `musicianId` field."""
  musicianId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `MusicianImage` object types. All fields are combined with a logical ‘and.’
"""
input MusicianImageFilter {
  """Checks for all expressions in this list."""
  and: [MusicianImageFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `image` relation."""
  image: ImageFilter

  """Filter by the object’s `imageId` field."""
  imageId: IntFilter

  """Filter by the object’s `musician` relation."""
  musician: MusicianFilter

  """Filter by the object’s `musicianId` field."""
  musicianId: IntFilter

  """Negates the expression."""
  not: MusicianImageFilter

  """Checks for any expressions in this list."""
  or: [MusicianImageFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `MusicianImage`"""
input MusicianImageInput {
  imageId: Int!
  musicianId: Int!
}

"""
Represents an update to a `MusicianImage`. Fields that are set will be updated.
"""
input MusicianImagePatch {
  imageId: Int
  musicianId: Int
}

"""A connection to a list of `MusicianImage` values."""
type MusicianImagesConnection {
  """
  A list of edges which contains the `MusicianImage` and cursor to aid in pagination.
  """
  edges: [MusicianImagesEdge!]!

  """A list of `MusicianImage` objects."""
  nodes: [MusicianImage]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MusicianImage` you could get from the connection."""
  totalCount: Int!
}

"""A `MusicianImage` edge in the connection."""
type MusicianImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MusicianImage` at the end of the edge."""
  node: MusicianImage
}

"""Methods to use when ordering `MusicianImage`."""
enum MusicianImagesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  IMAGE_ID_ASC
  IMAGE_ID_DESC
  MUSICIAN_ID_ASC
  MUSICIAN_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""An input for mutations affecting `Musician`"""
input MusicianInput {
  biography: String
  birthday: Date
  deathday: Date
  description: String
  firstName: String
  lastName: String

  """SEO friendly name to use in url"""
  path: String!
  photoId: Int
  published: Boolean
  type: String!
}

type MusicianLocale implements Node {
  biography: String
  createdAt: Datetime!
  description: String
  firstName: String
  lang: String!

  """Reads a single `Language` that is related to this `MusicianLocale`."""
  languageByLang: Language
  lastName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Musician` that is related to this `MusicianLocale`."""
  source: Musician
  sourceId: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `MusicianLocale` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MusicianLocaleCondition {
  """Checks for equality with the object’s `biography` field."""
  biography: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `lang` field."""
  lang: String

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `sourceId` field."""
  sourceId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `MusicianLocale` object types. All fields are combined with a logical ‘and.’
"""
input MusicianLocaleFilter {
  """Checks for all expressions in this list."""
  and: [MusicianLocaleFilter!]

  """Filter by the object’s `biography` field."""
  biography: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `firstName` field."""
  firstName: StringFilter

  """Filter by the object’s `lang` field."""
  lang: StringFilter

  """Filter by the object’s `languageByLang` relation."""
  languageByLang: LanguageFilter

  """Filter by the object’s `lastName` field."""
  lastName: StringFilter

  """Negates the expression."""
  not: MusicianLocaleFilter

  """Checks for any expressions in this list."""
  or: [MusicianLocaleFilter!]

  """Filter by the object’s `source` relation."""
  source: MusicianFilter

  """Filter by the object’s `sourceId` field."""
  sourceId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `MusicianLocale`"""
input MusicianLocaleInput {
  biography: String
  description: String
  firstName: String
  lang: String!
  lastName: String
  sourceId: Int!
}

"""
Represents an update to a `MusicianLocale`. Fields that are set will be updated.
"""
input MusicianLocalePatch {
  biography: String
  description: String
  firstName: String
  lang: String
  lastName: String
  sourceId: Int
}

"""A connection to a list of `MusicianLocale` values."""
type MusicianLocalesConnection {
  """
  A list of edges which contains the `MusicianLocale` and cursor to aid in pagination.
  """
  edges: [MusicianLocalesEdge!]!

  """A list of `MusicianLocale` objects."""
  nodes: [MusicianLocale]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MusicianLocale` you could get from the connection."""
  totalCount: Int!
}

"""A `MusicianLocale` edge in the connection."""
type MusicianLocalesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MusicianLocale` at the end of the edge."""
  node: MusicianLocale
}

"""Methods to use when ordering `MusicianLocale`."""
enum MusicianLocalesOrderBy {
  BIOGRAPHY_ASC
  BIOGRAPHY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LANG_ASC
  LANG_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SOURCE_ID_ASC
  SOURCE_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Musician`. Fields that are set will be updated.
"""
input MusicianPatch {
  biography: String
  birthday: Date
  deathday: Date
  description: String
  firstName: String
  lastName: String

  """SEO friendly name to use in url"""
  path: String
  photoId: Int
  published: Boolean

  """
  This is automatically changed if 'published' changed, can be manually provided by 'admin'.
  """
  publishedAt: Datetime
  type: String
}

type MusicianPlaylist implements Node {
  createdAt: Datetime!

  """Reads a single `Musician` that is related to this `MusicianPlaylist`."""
  musician: Musician
  musicianId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Playlist` that is related to this `MusicianPlaylist`."""
  playlist: Playlist
  playlistId: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `MusicianPlaylist` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MusicianPlaylistCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `musicianId` field."""
  musicianId: Int

  """Checks for equality with the object’s `playlistId` field."""
  playlistId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `MusicianPlaylist` object types. All fields are combined with a logical ‘and.’
"""
input MusicianPlaylistFilter {
  """Checks for all expressions in this list."""
  and: [MusicianPlaylistFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `musician` relation."""
  musician: MusicianFilter

  """Filter by the object’s `musicianId` field."""
  musicianId: IntFilter

  """Negates the expression."""
  not: MusicianPlaylistFilter

  """Checks for any expressions in this list."""
  or: [MusicianPlaylistFilter!]

  """Filter by the object’s `playlist` relation."""
  playlist: PlaylistFilter

  """Filter by the object’s `playlistId` field."""
  playlistId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `MusicianPlaylist`"""
input MusicianPlaylistInput {
  musicianId: Int!
  playlistId: Int!
}

"""
Represents an update to a `MusicianPlaylist`. Fields that are set will be updated.
"""
input MusicianPlaylistPatch {
  musicianId: Int
  playlistId: Int
}

"""A connection to a list of `MusicianPlaylist` values."""
type MusicianPlaylistsConnection {
  """
  A list of edges which contains the `MusicianPlaylist` and cursor to aid in pagination.
  """
  edges: [MusicianPlaylistsEdge!]!

  """A list of `MusicianPlaylist` objects."""
  nodes: [MusicianPlaylist]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MusicianPlaylist` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MusicianPlaylist` edge in the connection."""
type MusicianPlaylistsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MusicianPlaylist` at the end of the edge."""
  node: MusicianPlaylist
}

"""Methods to use when ordering `MusicianPlaylist`."""
enum MusicianPlaylistsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  MUSICIAN_ID_ASC
  MUSICIAN_ID_DESC
  NATURAL
  PLAYLIST_ID_ASC
  PLAYLIST_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type MusicianProfession implements Node {
  createdAt: Datetime!

  """
  Reads a single `Musician` that is related to this `MusicianProfession`.
  """
  musician: Musician
  musicianId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads a single `Profession` that is related to this `MusicianProfession`.
  """
  profession: Profession
  professionId: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `MusicianProfession` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MusicianProfessionCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `musicianId` field."""
  musicianId: Int

  """Checks for equality with the object’s `professionId` field."""
  professionId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `MusicianProfession` object types. All fields are combined with a logical ‘and.’
"""
input MusicianProfessionFilter {
  """Checks for all expressions in this list."""
  and: [MusicianProfessionFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `musician` relation."""
  musician: MusicianFilter

  """Filter by the object’s `musicianId` field."""
  musicianId: IntFilter

  """Negates the expression."""
  not: MusicianProfessionFilter

  """Checks for any expressions in this list."""
  or: [MusicianProfessionFilter!]

  """Filter by the object’s `profession` relation."""
  profession: ProfessionFilter

  """Filter by the object’s `professionId` field."""
  professionId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `MusicianProfession`"""
input MusicianProfessionInput {
  musicianId: Int!
  professionId: Int!
}

"""
Represents an update to a `MusicianProfession`. Fields that are set will be updated.
"""
input MusicianProfessionPatch {
  musicianId: Int
  professionId: Int
}

"""A connection to a list of `MusicianProfession` values."""
type MusicianProfessionsConnection {
  """
  A list of edges which contains the `MusicianProfession` and cursor to aid in pagination.
  """
  edges: [MusicianProfessionsEdge!]!

  """A list of `MusicianProfession` objects."""
  nodes: [MusicianProfession]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MusicianProfession` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MusicianProfession` edge in the connection."""
type MusicianProfessionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MusicianProfession` at the end of the edge."""
  node: MusicianProfession
}

"""Methods to use when ordering `MusicianProfession`."""
enum MusicianProfessionsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  MUSICIAN_ID_ASC
  MUSICIAN_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROFESSION_ID_ASC
  PROFESSION_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""A connection to a list of `Musician` values."""
type MusiciansConnection {
  """
  A list of edges which contains the `Musician` and cursor to aid in pagination.
  """
  edges: [MusiciansEdge!]!

  """A list of `Musician` objects."""
  nodes: [Musician]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Musician` you could get from the connection."""
  totalCount: Int!
}

"""A `Musician` edge in the connection."""
type MusiciansEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Musician` at the end of the edge."""
  node: Musician
}

"""Methods to use when ordering `Musician`."""
enum MusiciansOrderBy {
  BIOGRAPHY_ASC
  BIOGRAPHY_DESC
  BIRTHDAY_ASC
  BIRTHDAY_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DEATHDAY_ASC
  DEATHDAY_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  PATH_ASC
  PATH_DESC
  PHOTO_ID_ASC
  PHOTO_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_ASC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  PUBLISHED_DESC
  TYPE_ASC
  TYPE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type MusicianTag implements Node {
  createdAt: Datetime!

  """Reads a single `Musician` that is related to this `MusicianTag`."""
  musician: Musician
  musicianId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Tag` that is related to this `MusicianTag`."""
  tag: Tag
  tagId: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `MusicianTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MusicianTagCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `musicianId` field."""
  musicianId: Int

  """Checks for equality with the object’s `tagId` field."""
  tagId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `MusicianTag` object types. All fields are combined with a logical ‘and.’
"""
input MusicianTagFilter {
  """Checks for all expressions in this list."""
  and: [MusicianTagFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `musician` relation."""
  musician: MusicianFilter

  """Filter by the object’s `musicianId` field."""
  musicianId: IntFilter

  """Negates the expression."""
  not: MusicianTagFilter

  """Checks for any expressions in this list."""
  or: [MusicianTagFilter!]

  """Filter by the object’s `tag` relation."""
  tag: TagFilter

  """Filter by the object’s `tagId` field."""
  tagId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `MusicianTag`"""
input MusicianTagInput {
  musicianId: Int!
  tagId: Int!
}

"""
Represents an update to a `MusicianTag`. Fields that are set will be updated.
"""
input MusicianTagPatch {
  musicianId: Int
  tagId: Int
}

"""A connection to a list of `MusicianTag` values."""
type MusicianTagsConnection {
  """
  A list of edges which contains the `MusicianTag` and cursor to aid in pagination.
  """
  edges: [MusicianTagsEdge!]!

  """A list of `MusicianTag` objects."""
  nodes: [MusicianTag]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MusicianTag` you could get from the connection."""
  totalCount: Int!
}

"""A `MusicianTag` edge in the connection."""
type MusicianTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MusicianTag` at the end of the edge."""
  node: MusicianTag
}

"""Methods to use when ordering `MusicianTag`."""
enum MusicianTagsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  MUSICIAN_ID_ASC
  MUSICIAN_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TAG_ID_ASC
  TAG_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A filter to be used against many `GroupMusician` object types. All fields are combined with a logical ‘and.’
"""
input MusicianToManyGroupMusicianFilter {
  """
  Every related `GroupMusician` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GroupMusicianFilter

  """
  No related `GroupMusician` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GroupMusicianFilter

  """
  Some related `GroupMusician` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GroupMusicianFilter
}

"""
A filter to be used against many `MusicianComposition` object types. All fields are combined with a logical ‘and.’
"""
input MusicianToManyMusicianCompositionFilter {
  """
  Every related `MusicianComposition` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MusicianCompositionFilter

  """
  No related `MusicianComposition` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MusicianCompositionFilter

  """
  Some related `MusicianComposition` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MusicianCompositionFilter
}

"""
A filter to be used against many `MusicianGenre` object types. All fields are combined with a logical ‘and.’
"""
input MusicianToManyMusicianGenreFilter {
  """
  Every related `MusicianGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MusicianGenreFilter

  """
  No related `MusicianGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MusicianGenreFilter

  """
  Some related `MusicianGenre` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MusicianGenreFilter
}

"""
A filter to be used against many `MusicianImage` object types. All fields are combined with a logical ‘and.’
"""
input MusicianToManyMusicianImageFilter {
  """
  Every related `MusicianImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MusicianImageFilter

  """
  No related `MusicianImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MusicianImageFilter

  """
  Some related `MusicianImage` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MusicianImageFilter
}

"""
A filter to be used against many `MusicianLocale` object types. All fields are combined with a logical ‘and.’
"""
input MusicianToManyMusicianLocaleFilter {
  """
  Every related `MusicianLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MusicianLocaleFilter

  """
  No related `MusicianLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MusicianLocaleFilter

  """
  Some related `MusicianLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MusicianLocaleFilter
}

"""
A filter to be used against many `MusicianPlaylist` object types. All fields are combined with a logical ‘and.’
"""
input MusicianToManyMusicianPlaylistFilter {
  """
  Every related `MusicianPlaylist` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MusicianPlaylistFilter

  """
  No related `MusicianPlaylist` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MusicianPlaylistFilter

  """
  Some related `MusicianPlaylist` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MusicianPlaylistFilter
}

"""
A filter to be used against many `MusicianProfession` object types. All fields are combined with a logical ‘and.’
"""
input MusicianToManyMusicianProfessionFilter {
  """
  Every related `MusicianProfession` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MusicianProfessionFilter

  """
  No related `MusicianProfession` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MusicianProfessionFilter

  """
  Some related `MusicianProfession` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MusicianProfessionFilter
}

"""
A filter to be used against many `MusicianTag` object types. All fields are combined with a logical ‘and.’
"""
input MusicianToManyMusicianTagFilter {
  """
  Every related `MusicianTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MusicianTagFilter

  """
  No related `MusicianTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MusicianTagFilter

  """
  Some related `MusicianTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MusicianTagFilter
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  addContact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ContactInput!
  ): Boolean!
  changeUserRole(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangeUserRoleInput!
  ): ChangeUserRolePayload
  changeUserStatus(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ChangeUserStatusInput!
  ): ChangeUserStatusPayload

  """Creates a single `Article`."""
  createArticle(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateArticleInput!
  ): CreateArticlePayload

  """Creates a single `ArticleGallery`."""
  createArticleGallery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateArticleGalleryInput!
  ): CreateArticleGalleryPayload

  """Creates a single `ArticleGalleryImage`."""
  createArticleGalleryImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateArticleGalleryImageInput!
  ): CreateArticleGalleryImagePayload

  """Creates a single `ArticleGenre`."""
  createArticleGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateArticleGenreInput!
  ): CreateArticleGenrePayload

  """Creates a single `ArticleImage`."""
  createArticleImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateArticleImageInput!
  ): CreateArticleImagePayload

  """Creates a single `ArticleLocale`."""
  createArticleLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateArticleLocaleInput!
  ): CreateArticleLocalePayload

  """Creates a single `ArticleTag`."""
  createArticleTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateArticleTagInput!
  ): CreateArticleTagPayload

  """Creates a single `Composition`."""
  createComposition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCompositionInput!
  ): CreateCompositionPayload

  """Creates a single `CompositionLocale`."""
  createCompositionLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCompositionLocaleInput!
  ): CreateCompositionLocalePayload

  """Creates a single `Document`."""
  createDocument(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDocumentInput!
  ): CreateDocumentPayload

  """Creates a single `DocumentLocale`."""
  createDocumentLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDocumentLocaleInput!
  ): CreateDocumentLocalePayload

  """Creates a single `Genre`."""
  createGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGenreInput!
  ): CreateGenrePayload

  """Creates a single `GenreLocale`."""
  createGenreLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGenreLocaleInput!
  ): CreateGenreLocalePayload

  """Creates a single `Group`."""
  createGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupInput!
  ): CreateGroupPayload

  """Creates a single `GroupImage`."""
  createGroupImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupImageInput!
  ): CreateGroupImagePayload

  """Creates a single `GroupLocale`."""
  createGroupLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupLocaleInput!
  ): CreateGroupLocalePayload

  """Creates a single `GroupMusician`."""
  createGroupMusician(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupMusicianInput!
  ): CreateGroupMusicianPayload

  """Creates a single `GroupPlaylist`."""
  createGroupPlaylist(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupPlaylistInput!
  ): CreateGroupPlaylistPayload

  """Creates a single `Image`."""
  createImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateImageInput!
  ): CreateImagePayload

  """Creates a single `ImageLocale`."""
  createImageLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateImageLocaleInput!
  ): CreateImageLocalePayload

  """Creates a single `Instrument`."""
  createInstrument(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInstrumentInput!
  ): CreateInstrumentPayload

  """Creates a single `InstrumentLocale`."""
  createInstrumentLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInstrumentLocaleInput!
  ): CreateInstrumentLocalePayload

  """Creates a single `Language`."""
  createLanguage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateLanguageInput!
  ): CreateLanguagePayload

  """Creates a single `Media`."""
  createMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMediaInput!
  ): CreateMediaPayload

  """Creates a single `MediaLocale`."""
  createMediaLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMediaLocaleInput!
  ): CreateMediaLocalePayload

  """Creates a single `Musician`."""
  createMusician(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMusicianInput!
  ): CreateMusicianPayload

  """Creates a single `MusicianComposition`."""
  createMusicianComposition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMusicianCompositionInput!
  ): CreateMusicianCompositionPayload

  """Creates a single `MusicianGenre`."""
  createMusicianGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMusicianGenreInput!
  ): CreateMusicianGenrePayload

  """Creates a single `MusicianImage`."""
  createMusicianImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMusicianImageInput!
  ): CreateMusicianImagePayload

  """Creates a single `MusicianLocale`."""
  createMusicianLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMusicianLocaleInput!
  ): CreateMusicianLocalePayload

  """Creates a single `MusicianPlaylist`."""
  createMusicianPlaylist(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMusicianPlaylistInput!
  ): CreateMusicianPlaylistPayload

  """Creates a single `MusicianProfession`."""
  createMusicianProfession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMusicianProfessionInput!
  ): CreateMusicianProfessionPayload

  """Creates a single `MusicianTag`."""
  createMusicianTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMusicianTagInput!
  ): CreateMusicianTagPayload

  """Creates a single `OpenMessage`."""
  createOpenMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOpenMessageInput!
  ): CreateOpenMessagePayload

  """Creates a single `PageSection`."""
  createPageSection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePageSectionInput!
  ): CreatePageSectionPayload

  """Creates a single `Playlist`."""
  createPlaylist(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlaylistInput!
  ): CreatePlaylistPayload

  """Creates a single `PlaylistLocale`."""
  createPlaylistLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlaylistLocaleInput!
  ): CreatePlaylistLocalePayload

  """Creates a single `PlaylistMedia`."""
  createPlaylistMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePlaylistMediaInput!
  ): CreatePlaylistMediaPayload

  """Creates a single `Profession`."""
  createProfession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProfessionInput!
  ): CreateProfessionPayload

  """Creates a single `ProfessionLocale`."""
  createProfessionLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProfessionLocaleInput!
  ): CreateProfessionLocalePayload
  createPromoCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePromoCodeInput!
  ): CreatePromoCodePayload
  createPromoCodes(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePromoCodesInput!
  ): CreatePromoCodesPayload

  """Creates a single `Purchase`."""
  createPurchase(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePurchaseInput!
  ): CreatePurchasePayload

  """Creates a single `Score`."""
  createScore(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateScoreInput!
  ): CreateScorePayload

  """Creates a single `ScoreInstrument`."""
  createScoreInstrument(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateScoreInstrumentInput!
  ): CreateScoreInstrumentPayload

  """Creates a single `ScoreLocale`."""
  createScoreLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateScoreLocaleInput!
  ): CreateScoreLocalePayload

  """Creates a single `Tag`."""
  createTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTagInput!
  ): CreateTagPayload

  """Creates a single `TagLocale`."""
  createTagLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTagLocaleInput!
  ): CreateTagLocalePayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Deletes a single `Article` using a unique key."""
  deleteArticle(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArticleInput!
  ): DeleteArticlePayload

  """Deletes a single `Article` using its globally unique id."""
  deleteArticleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArticleByNodeIdInput!
  ): DeleteArticlePayload

  """Deletes a single `Article` using a unique key."""
  deleteArticleByPath(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArticleByPathInput!
  ): DeleteArticlePayload

  """Deletes a single `ArticleGallery` using a unique key."""
  deleteArticleGallery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArticleGalleryInput!
  ): DeleteArticleGalleryPayload

  """Deletes a single `ArticleGallery` using its globally unique id."""
  deleteArticleGalleryByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArticleGalleryByNodeIdInput!
  ): DeleteArticleGalleryPayload

  """Deletes a single `ArticleGalleryImage` using a unique key."""
  deleteArticleGalleryImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArticleGalleryImageInput!
  ): DeleteArticleGalleryImagePayload

  """Deletes a single `ArticleGalleryImage` using its globally unique id."""
  deleteArticleGalleryImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArticleGalleryImageByNodeIdInput!
  ): DeleteArticleGalleryImagePayload

  """Deletes a single `ArticleGenre` using a unique key."""
  deleteArticleGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArticleGenreInput!
  ): DeleteArticleGenrePayload

  """Deletes a single `ArticleGenre` using its globally unique id."""
  deleteArticleGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArticleGenreByNodeIdInput!
  ): DeleteArticleGenrePayload

  """Deletes a single `ArticleImage` using a unique key."""
  deleteArticleImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArticleImageInput!
  ): DeleteArticleImagePayload

  """Deletes a single `ArticleImage` using its globally unique id."""
  deleteArticleImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArticleImageByNodeIdInput!
  ): DeleteArticleImagePayload

  """Deletes a single `ArticleLocale` using a unique key."""
  deleteArticleLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArticleLocaleInput!
  ): DeleteArticleLocalePayload

  """Deletes a single `ArticleLocale` using its globally unique id."""
  deleteArticleLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArticleLocaleByNodeIdInput!
  ): DeleteArticleLocalePayload

  """Deletes a single `ArticleTag` using a unique key."""
  deleteArticleTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArticleTagInput!
  ): DeleteArticleTagPayload

  """Deletes a single `ArticleTag` using its globally unique id."""
  deleteArticleTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteArticleTagByNodeIdInput!
  ): DeleteArticleTagPayload

  """Deletes a single `Composition` using a unique key."""
  deleteComposition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompositionInput!
  ): DeleteCompositionPayload

  """Deletes a single `Composition` using its globally unique id."""
  deleteCompositionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompositionByNodeIdInput!
  ): DeleteCompositionPayload

  """Deletes a single `Composition` using a unique key."""
  deleteCompositionByPath(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompositionByPathInput!
  ): DeleteCompositionPayload

  """Deletes a single `CompositionLocale` using a unique key."""
  deleteCompositionLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompositionLocaleInput!
  ): DeleteCompositionLocalePayload

  """Deletes a single `CompositionLocale` using its globally unique id."""
  deleteCompositionLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompositionLocaleByNodeIdInput!
  ): DeleteCompositionLocalePayload

  """Deletes a single `Document` using a unique key."""
  deleteDocument(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDocumentInput!
  ): DeleteDocumentPayload

  """Deletes a single `Document` using its globally unique id."""
  deleteDocumentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDocumentByNodeIdInput!
  ): DeleteDocumentPayload

  """Deletes a single `DocumentLocale` using a unique key."""
  deleteDocumentLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDocumentLocaleInput!
  ): DeleteDocumentLocalePayload

  """Deletes a single `DocumentLocale` using its globally unique id."""
  deleteDocumentLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDocumentLocaleByNodeIdInput!
  ): DeleteDocumentLocalePayload

  """Deletes a single `Genre` using a unique key."""
  deleteGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGenreInput!
  ): DeleteGenrePayload

  """Deletes a single `Genre` using a unique key."""
  deleteGenreByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGenreByNameInput!
  ): DeleteGenrePayload

  """Deletes a single `Genre` using its globally unique id."""
  deleteGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGenreByNodeIdInput!
  ): DeleteGenrePayload

  """Deletes a single `GenreLocale` using a unique key."""
  deleteGenreLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGenreLocaleInput!
  ): DeleteGenreLocalePayload

  """Deletes a single `GenreLocale` using a unique key."""
  deleteGenreLocaleByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGenreLocaleByNameInput!
  ): DeleteGenreLocalePayload

  """Deletes a single `GenreLocale` using its globally unique id."""
  deleteGenreLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGenreLocaleByNodeIdInput!
  ): DeleteGenreLocalePayload

  """Deletes a single `Group` using a unique key."""
  deleteGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupInput!
  ): DeleteGroupPayload

  """Deletes a single `Group` using its globally unique id."""
  deleteGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupByNodeIdInput!
  ): DeleteGroupPayload

  """Deletes a single `GroupImage` using a unique key."""
  deleteGroupImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupImageInput!
  ): DeleteGroupImagePayload

  """Deletes a single `GroupImage` using its globally unique id."""
  deleteGroupImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupImageByNodeIdInput!
  ): DeleteGroupImagePayload

  """Deletes a single `GroupLocale` using a unique key."""
  deleteGroupLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupLocaleInput!
  ): DeleteGroupLocalePayload

  """Deletes a single `GroupLocale` using its globally unique id."""
  deleteGroupLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupLocaleByNodeIdInput!
  ): DeleteGroupLocalePayload

  """Deletes a single `GroupMusician` using a unique key."""
  deleteGroupMusician(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupMusicianInput!
  ): DeleteGroupMusicianPayload

  """Deletes a single `GroupMusician` using its globally unique id."""
  deleteGroupMusicianByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupMusicianByNodeIdInput!
  ): DeleteGroupMusicianPayload

  """Deletes a single `GroupPlaylist` using a unique key."""
  deleteGroupPlaylist(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupPlaylistInput!
  ): DeleteGroupPlaylistPayload

  """Deletes a single `GroupPlaylist` using its globally unique id."""
  deleteGroupPlaylistByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupPlaylistByNodeIdInput!
  ): DeleteGroupPlaylistPayload

  """Deletes a single `Image` using a unique key."""
  deleteImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImageInput!
  ): DeleteImagePayload

  """Deletes a single `Image` using its globally unique id."""
  deleteImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImageByNodeIdInput!
  ): DeleteImagePayload

  """Deletes a single `ImageLocale` using a unique key."""
  deleteImageLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImageLocaleInput!
  ): DeleteImageLocalePayload

  """Deletes a single `ImageLocale` using its globally unique id."""
  deleteImageLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImageLocaleByNodeIdInput!
  ): DeleteImageLocalePayload

  """Deletes a single `Instrument` using a unique key."""
  deleteInstrument(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInstrumentInput!
  ): DeleteInstrumentPayload

  """Deletes a single `Instrument` using its globally unique id."""
  deleteInstrumentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInstrumentByNodeIdInput!
  ): DeleteInstrumentPayload

  """Deletes a single `InstrumentLocale` using a unique key."""
  deleteInstrumentLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInstrumentLocaleInput!
  ): DeleteInstrumentLocalePayload

  """Deletes a single `InstrumentLocale` using its globally unique id."""
  deleteInstrumentLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInstrumentLocaleByNodeIdInput!
  ): DeleteInstrumentLocalePayload

  """Deletes a single `Media` using a unique key."""
  deleteMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMediaInput!
  ): DeleteMediaPayload

  """Deletes a single `Media` using its globally unique id."""
  deleteMediaByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMediaByNodeIdInput!
  ): DeleteMediaPayload

  """Deletes a single `MediaLocale` using a unique key."""
  deleteMediaLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMediaLocaleInput!
  ): DeleteMediaLocalePayload

  """Deletes a single `MediaLocale` using its globally unique id."""
  deleteMediaLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMediaLocaleByNodeIdInput!
  ): DeleteMediaLocalePayload

  """Deletes a single `Musician` using a unique key."""
  deleteMusician(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMusicianInput!
  ): DeleteMusicianPayload

  """Deletes a single `Musician` using its globally unique id."""
  deleteMusicianByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMusicianByNodeIdInput!
  ): DeleteMusicianPayload

  """Deletes a single `Musician` using a unique key."""
  deleteMusicianByPath(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMusicianByPathInput!
  ): DeleteMusicianPayload

  """Deletes a single `MusicianComposition` using a unique key."""
  deleteMusicianComposition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMusicianCompositionInput!
  ): DeleteMusicianCompositionPayload

  """Deletes a single `MusicianComposition` using its globally unique id."""
  deleteMusicianCompositionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMusicianCompositionByNodeIdInput!
  ): DeleteMusicianCompositionPayload

  """Deletes a single `MusicianGenre` using a unique key."""
  deleteMusicianGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMusicianGenreInput!
  ): DeleteMusicianGenrePayload

  """Deletes a single `MusicianGenre` using its globally unique id."""
  deleteMusicianGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMusicianGenreByNodeIdInput!
  ): DeleteMusicianGenrePayload

  """Deletes a single `MusicianImage` using a unique key."""
  deleteMusicianImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMusicianImageInput!
  ): DeleteMusicianImagePayload

  """Deletes a single `MusicianImage` using its globally unique id."""
  deleteMusicianImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMusicianImageByNodeIdInput!
  ): DeleteMusicianImagePayload

  """Deletes a single `MusicianLocale` using a unique key."""
  deleteMusicianLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMusicianLocaleInput!
  ): DeleteMusicianLocalePayload

  """Deletes a single `MusicianLocale` using its globally unique id."""
  deleteMusicianLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMusicianLocaleByNodeIdInput!
  ): DeleteMusicianLocalePayload

  """Deletes a single `MusicianPlaylist` using a unique key."""
  deleteMusicianPlaylist(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMusicianPlaylistInput!
  ): DeleteMusicianPlaylistPayload

  """Deletes a single `MusicianPlaylist` using its globally unique id."""
  deleteMusicianPlaylistByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMusicianPlaylistByNodeIdInput!
  ): DeleteMusicianPlaylistPayload

  """Deletes a single `MusicianProfession` using a unique key."""
  deleteMusicianProfession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMusicianProfessionInput!
  ): DeleteMusicianProfessionPayload

  """Deletes a single `MusicianProfession` using its globally unique id."""
  deleteMusicianProfessionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMusicianProfessionByNodeIdInput!
  ): DeleteMusicianProfessionPayload

  """Deletes a single `MusicianTag` using a unique key."""
  deleteMusicianTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMusicianTagInput!
  ): DeleteMusicianTagPayload

  """Deletes a single `MusicianTag` using its globally unique id."""
  deleteMusicianTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMusicianTagByNodeIdInput!
  ): DeleteMusicianTagPayload

  """Deletes a single `OpenMessage` using a unique key."""
  deleteOpenMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpenMessageInput!
  ): DeleteOpenMessagePayload

  """Deletes a single `OpenMessage` using its globally unique id."""
  deleteOpenMessageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpenMessageByNodeIdInput!
  ): DeleteOpenMessagePayload

  """Deletes a single `PageSection` using a unique key."""
  deletePageSection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePageSectionInput!
  ): DeletePageSectionPayload

  """Deletes a single `PageSection` using its globally unique id."""
  deletePageSectionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePageSectionByNodeIdInput!
  ): DeletePageSectionPayload

  """Deletes a single `Playlist` using a unique key."""
  deletePlaylist(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlaylistInput!
  ): DeletePlaylistPayload

  """Deletes a single `Playlist` using its globally unique id."""
  deletePlaylistByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlaylistByNodeIdInput!
  ): DeletePlaylistPayload

  """Deletes a single `PlaylistLocale` using a unique key."""
  deletePlaylistLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlaylistLocaleInput!
  ): DeletePlaylistLocalePayload

  """Deletes a single `PlaylistLocale` using its globally unique id."""
  deletePlaylistLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlaylistLocaleByNodeIdInput!
  ): DeletePlaylistLocalePayload

  """Deletes a single `PlaylistMedia` using a unique key."""
  deletePlaylistMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlaylistMediaInput!
  ): DeletePlaylistMediaPayload

  """Deletes a single `PlaylistMedia` using its globally unique id."""
  deletePlaylistMediaByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePlaylistMediaByNodeIdInput!
  ): DeletePlaylistMediaPayload

  """Deletes a single `Profession` using a unique key."""
  deleteProfession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfessionInput!
  ): DeleteProfessionPayload

  """Deletes a single `Profession` using a unique key."""
  deleteProfessionByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfessionByNameInput!
  ): DeleteProfessionPayload

  """Deletes a single `Profession` using its globally unique id."""
  deleteProfessionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfessionByNodeIdInput!
  ): DeleteProfessionPayload

  """Deletes a single `ProfessionLocale` using a unique key."""
  deleteProfessionLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfessionLocaleInput!
  ): DeleteProfessionLocalePayload

  """Deletes a single `ProfessionLocale` using a unique key."""
  deleteProfessionLocaleByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfessionLocaleByNameInput!
  ): DeleteProfessionLocalePayload

  """Deletes a single `ProfessionLocale` using its globally unique id."""
  deleteProfessionLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfessionLocaleByNodeIdInput!
  ): DeleteProfessionLocalePayload

  """Deletes a single `PromoCode` using a unique key."""
  deletePromoCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePromoCodeInput!
  ): DeletePromoCodePayload

  """Deletes a single `PromoCode` using its globally unique id."""
  deletePromoCodeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePromoCodeByNodeIdInput!
  ): DeletePromoCodePayload

  """Deletes a single `Purchase` using a unique key."""
  deletePurchase(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePurchaseInput!
  ): DeletePurchasePayload

  """Deletes a single `Purchase` using its globally unique id."""
  deletePurchaseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePurchaseByNodeIdInput!
  ): DeletePurchasePayload

  """Deletes a single `Score` using a unique key."""
  deleteScore(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScoreInput!
  ): DeleteScorePayload

  """Deletes a single `Score` using its globally unique id."""
  deleteScoreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScoreByNodeIdInput!
  ): DeleteScorePayload

  """Deletes a single `Score` using a unique key."""
  deleteScoreByPath(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScoreByPathInput!
  ): DeleteScorePayload

  """Deletes a single `ScoreInstrument` using a unique key."""
  deleteScoreInstrument(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScoreInstrumentInput!
  ): DeleteScoreInstrumentPayload

  """Deletes a single `ScoreInstrument` using its globally unique id."""
  deleteScoreInstrumentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScoreInstrumentByNodeIdInput!
  ): DeleteScoreInstrumentPayload

  """Deletes a single `ScoreLocale` using a unique key."""
  deleteScoreLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScoreLocaleInput!
  ): DeleteScoreLocalePayload

  """Deletes a single `ScoreLocale` using its globally unique id."""
  deleteScoreLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScoreLocaleByNodeIdInput!
  ): DeleteScoreLocalePayload

  """Deletes a single `Tag` using a unique key."""
  deleteTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagInput!
  ): DeleteTagPayload

  """Deletes a single `Tag` using a unique key."""
  deleteTagByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagByNameInput!
  ): DeleteTagPayload

  """Deletes a single `Tag` using its globally unique id."""
  deleteTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagByNodeIdInput!
  ): DeleteTagPayload

  """Deletes a single `TagLocale` using a unique key."""
  deleteTagLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagLocaleInput!
  ): DeleteTagLocalePayload

  """Deletes a single `TagLocale` using a unique key."""
  deleteTagLocaleByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagLocaleByNameInput!
  ): DeleteTagLocalePayload

  """Deletes a single `TagLocale` using its globally unique id."""
  deleteTagLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTagLocaleByNodeIdInput!
  ): DeleteTagLocalePayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByEmailInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByFacebookId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByFacebookIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByNodeIdInput!
  ): DeleteUserPayload
  forgotPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ForgotPasswordInput!
  ): ForgotPasswordPayload
  login(email: String!, password: String!): LoginPayload!
  logout: Boolean
  resetPassword(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ResetPasswordInput!
  ): ResetPasswordPayload
  sendVerificationEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: SendVerificationEmailInput!
  ): SendVerificationEmailPayload

  """
  "true" on success and "false" if user email not found
  or user is not authenticated
  """
  unsubscribe: Boolean!

  """Updates a single `Article` using a unique key and a patch."""
  updateArticle(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArticleInput!
  ): UpdateArticlePayload

  """Updates a single `Article` using its globally unique id and a patch."""
  updateArticleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArticleByNodeIdInput!
  ): UpdateArticlePayload

  """Updates a single `Article` using a unique key and a patch."""
  updateArticleByPath(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArticleByPathInput!
  ): UpdateArticlePayload

  """Updates a single `ArticleGalleryImage` using a unique key and a patch."""
  updateArticleGalleryImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArticleGalleryImageInput!
  ): UpdateArticleGalleryImagePayload

  """
  Updates a single `ArticleGalleryImage` using its globally unique id and a patch.
  """
  updateArticleGalleryImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArticleGalleryImageByNodeIdInput!
  ): UpdateArticleGalleryImagePayload

  """Updates a single `ArticleGenre` using a unique key and a patch."""
  updateArticleGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArticleGenreInput!
  ): UpdateArticleGenrePayload

  """
  Updates a single `ArticleGenre` using its globally unique id and a patch.
  """
  updateArticleGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArticleGenreByNodeIdInput!
  ): UpdateArticleGenrePayload

  """Updates a single `ArticleImage` using a unique key and a patch."""
  updateArticleImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArticleImageInput!
  ): UpdateArticleImagePayload

  """
  Updates a single `ArticleImage` using its globally unique id and a patch.
  """
  updateArticleImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArticleImageByNodeIdInput!
  ): UpdateArticleImagePayload

  """Updates a single `ArticleLocale` using a unique key and a patch."""
  updateArticleLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArticleLocaleInput!
  ): UpdateArticleLocalePayload

  """
  Updates a single `ArticleLocale` using its globally unique id and a patch.
  """
  updateArticleLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArticleLocaleByNodeIdInput!
  ): UpdateArticleLocalePayload

  """Updates a single `ArticleTag` using a unique key and a patch."""
  updateArticleTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArticleTagInput!
  ): UpdateArticleTagPayload

  """
  Updates a single `ArticleTag` using its globally unique id and a patch.
  """
  updateArticleTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateArticleTagByNodeIdInput!
  ): UpdateArticleTagPayload

  """Updates a single `Composition` using a unique key and a patch."""
  updateComposition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompositionInput!
  ): UpdateCompositionPayload

  """
  Updates a single `Composition` using its globally unique id and a patch.
  """
  updateCompositionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompositionByNodeIdInput!
  ): UpdateCompositionPayload

  """Updates a single `Composition` using a unique key and a patch."""
  updateCompositionByPath(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompositionByPathInput!
  ): UpdateCompositionPayload

  """Updates a single `CompositionLocale` using a unique key and a patch."""
  updateCompositionLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompositionLocaleInput!
  ): UpdateCompositionLocalePayload

  """
  Updates a single `CompositionLocale` using its globally unique id and a patch.
  """
  updateCompositionLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompositionLocaleByNodeIdInput!
  ): UpdateCompositionLocalePayload
  updateCurrentUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CurrentUserPatch!
  ): UpdateCurrentUserPayload

  """Updates a single `Document` using a unique key and a patch."""
  updateDocument(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDocumentInput!
  ): UpdateDocumentPayload

  """Updates a single `Document` using its globally unique id and a patch."""
  updateDocumentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDocumentByNodeIdInput!
  ): UpdateDocumentPayload

  """Updates a single `DocumentLocale` using a unique key and a patch."""
  updateDocumentLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDocumentLocaleInput!
  ): UpdateDocumentLocalePayload

  """
  Updates a single `DocumentLocale` using its globally unique id and a patch.
  """
  updateDocumentLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDocumentLocaleByNodeIdInput!
  ): UpdateDocumentLocalePayload

  """Updates a single `Genre` using a unique key and a patch."""
  updateGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGenreInput!
  ): UpdateGenrePayload

  """Updates a single `Genre` using a unique key and a patch."""
  updateGenreByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGenreByNameInput!
  ): UpdateGenrePayload

  """Updates a single `Genre` using its globally unique id and a patch."""
  updateGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGenreByNodeIdInput!
  ): UpdateGenrePayload

  """Updates a single `GenreLocale` using a unique key and a patch."""
  updateGenreLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGenreLocaleInput!
  ): UpdateGenreLocalePayload

  """Updates a single `GenreLocale` using a unique key and a patch."""
  updateGenreLocaleByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGenreLocaleByNameInput!
  ): UpdateGenreLocalePayload

  """
  Updates a single `GenreLocale` using its globally unique id and a patch.
  """
  updateGenreLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGenreLocaleByNodeIdInput!
  ): UpdateGenreLocalePayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupInput!
  ): UpdateGroupPayload

  """Updates a single `Group` using its globally unique id and a patch."""
  updateGroupByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupByNodeIdInput!
  ): UpdateGroupPayload

  """Updates a single `GroupImage` using a unique key and a patch."""
  updateGroupImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupImageInput!
  ): UpdateGroupImagePayload

  """
  Updates a single `GroupImage` using its globally unique id and a patch.
  """
  updateGroupImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupImageByNodeIdInput!
  ): UpdateGroupImagePayload

  """Updates a single `GroupLocale` using a unique key and a patch."""
  updateGroupLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupLocaleInput!
  ): UpdateGroupLocalePayload

  """
  Updates a single `GroupLocale` using its globally unique id and a patch.
  """
  updateGroupLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupLocaleByNodeIdInput!
  ): UpdateGroupLocalePayload

  """Updates a single `GroupMusician` using a unique key and a patch."""
  updateGroupMusician(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupMusicianInput!
  ): UpdateGroupMusicianPayload

  """
  Updates a single `GroupMusician` using its globally unique id and a patch.
  """
  updateGroupMusicianByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupMusicianByNodeIdInput!
  ): UpdateGroupMusicianPayload

  """Updates a single `GroupPlaylist` using a unique key and a patch."""
  updateGroupPlaylist(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupPlaylistInput!
  ): UpdateGroupPlaylistPayload

  """
  Updates a single `GroupPlaylist` using its globally unique id and a patch.
  """
  updateGroupPlaylistByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupPlaylistByNodeIdInput!
  ): UpdateGroupPlaylistPayload

  """Updates a single `Image` using a unique key and a patch."""
  updateImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImageInput!
  ): UpdateImagePayload

  """Updates a single `Image` using its globally unique id and a patch."""
  updateImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImageByNodeIdInput!
  ): UpdateImagePayload

  """Updates a single `ImageLocale` using a unique key and a patch."""
  updateImageLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImageLocaleInput!
  ): UpdateImageLocalePayload

  """
  Updates a single `ImageLocale` using its globally unique id and a patch.
  """
  updateImageLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImageLocaleByNodeIdInput!
  ): UpdateImageLocalePayload

  """Updates a single `Instrument` using a unique key and a patch."""
  updateInstrument(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInstrumentInput!
  ): UpdateInstrumentPayload

  """
  Updates a single `Instrument` using its globally unique id and a patch.
  """
  updateInstrumentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInstrumentByNodeIdInput!
  ): UpdateInstrumentPayload

  """Updates a single `InstrumentLocale` using a unique key and a patch."""
  updateInstrumentLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInstrumentLocaleInput!
  ): UpdateInstrumentLocalePayload

  """
  Updates a single `InstrumentLocale` using its globally unique id and a patch.
  """
  updateInstrumentLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInstrumentLocaleByNodeIdInput!
  ): UpdateInstrumentLocalePayload

  """Updates a single `Media` using a unique key and a patch."""
  updateMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMediaInput!
  ): UpdateMediaPayload

  """Updates a single `Media` using its globally unique id and a patch."""
  updateMediaByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMediaByNodeIdInput!
  ): UpdateMediaPayload

  """Updates a single `MediaLocale` using a unique key and a patch."""
  updateMediaLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMediaLocaleInput!
  ): UpdateMediaLocalePayload

  """
  Updates a single `MediaLocale` using its globally unique id and a patch.
  """
  updateMediaLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMediaLocaleByNodeIdInput!
  ): UpdateMediaLocalePayload

  """Updates a single `Musician` using a unique key and a patch."""
  updateMusician(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMusicianInput!
  ): UpdateMusicianPayload

  """Updates a single `Musician` using its globally unique id and a patch."""
  updateMusicianByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMusicianByNodeIdInput!
  ): UpdateMusicianPayload

  """Updates a single `Musician` using a unique key and a patch."""
  updateMusicianByPath(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMusicianByPathInput!
  ): UpdateMusicianPayload

  """Updates a single `MusicianComposition` using a unique key and a patch."""
  updateMusicianComposition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMusicianCompositionInput!
  ): UpdateMusicianCompositionPayload

  """
  Updates a single `MusicianComposition` using its globally unique id and a patch.
  """
  updateMusicianCompositionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMusicianCompositionByNodeIdInput!
  ): UpdateMusicianCompositionPayload

  """Updates a single `MusicianGenre` using a unique key and a patch."""
  updateMusicianGenre(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMusicianGenreInput!
  ): UpdateMusicianGenrePayload

  """
  Updates a single `MusicianGenre` using its globally unique id and a patch.
  """
  updateMusicianGenreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMusicianGenreByNodeIdInput!
  ): UpdateMusicianGenrePayload

  """Updates a single `MusicianImage` using a unique key and a patch."""
  updateMusicianImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMusicianImageInput!
  ): UpdateMusicianImagePayload

  """
  Updates a single `MusicianImage` using its globally unique id and a patch.
  """
  updateMusicianImageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMusicianImageByNodeIdInput!
  ): UpdateMusicianImagePayload

  """Updates a single `MusicianLocale` using a unique key and a patch."""
  updateMusicianLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMusicianLocaleInput!
  ): UpdateMusicianLocalePayload

  """
  Updates a single `MusicianLocale` using its globally unique id and a patch.
  """
  updateMusicianLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMusicianLocaleByNodeIdInput!
  ): UpdateMusicianLocalePayload

  """Updates a single `MusicianPlaylist` using a unique key and a patch."""
  updateMusicianPlaylist(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMusicianPlaylistInput!
  ): UpdateMusicianPlaylistPayload

  """
  Updates a single `MusicianPlaylist` using its globally unique id and a patch.
  """
  updateMusicianPlaylistByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMusicianPlaylistByNodeIdInput!
  ): UpdateMusicianPlaylistPayload

  """Updates a single `MusicianProfession` using a unique key and a patch."""
  updateMusicianProfession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMusicianProfessionInput!
  ): UpdateMusicianProfessionPayload

  """
  Updates a single `MusicianProfession` using its globally unique id and a patch.
  """
  updateMusicianProfessionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMusicianProfessionByNodeIdInput!
  ): UpdateMusicianProfessionPayload

  """Updates a single `MusicianTag` using a unique key and a patch."""
  updateMusicianTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMusicianTagInput!
  ): UpdateMusicianTagPayload

  """
  Updates a single `MusicianTag` using its globally unique id and a patch.
  """
  updateMusicianTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMusicianTagByNodeIdInput!
  ): UpdateMusicianTagPayload

  """Updates a single `OpenMessage` using a unique key and a patch."""
  updateOpenMessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpenMessageInput!
  ): UpdateOpenMessagePayload

  """
  Updates a single `OpenMessage` using its globally unique id and a patch.
  """
  updateOpenMessageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpenMessageByNodeIdInput!
  ): UpdateOpenMessagePayload

  """Updates a single `PageSection` using a unique key and a patch."""
  updatePageSection(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePageSectionInput!
  ): UpdatePageSectionPayload

  """
  Updates a single `PageSection` using its globally unique id and a patch.
  """
  updatePageSectionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePageSectionByNodeIdInput!
  ): UpdatePageSectionPayload

  """Updates a single `Playlist` using a unique key and a patch."""
  updatePlaylist(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlaylistInput!
  ): UpdatePlaylistPayload

  """Updates a single `Playlist` using its globally unique id and a patch."""
  updatePlaylistByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlaylistByNodeIdInput!
  ): UpdatePlaylistPayload

  """Updates a single `PlaylistLocale` using a unique key and a patch."""
  updatePlaylistLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlaylistLocaleInput!
  ): UpdatePlaylistLocalePayload

  """
  Updates a single `PlaylistLocale` using its globally unique id and a patch.
  """
  updatePlaylistLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlaylistLocaleByNodeIdInput!
  ): UpdatePlaylistLocalePayload

  """Updates a single `PlaylistMedia` using a unique key and a patch."""
  updatePlaylistMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlaylistMediaInput!
  ): UpdatePlaylistMediaPayload

  """
  Updates a single `PlaylistMedia` using its globally unique id and a patch.
  """
  updatePlaylistMediaByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePlaylistMediaByNodeIdInput!
  ): UpdatePlaylistMediaPayload

  """Updates a single `Profession` using a unique key and a patch."""
  updateProfession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfessionInput!
  ): UpdateProfessionPayload

  """Updates a single `Profession` using a unique key and a patch."""
  updateProfessionByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfessionByNameInput!
  ): UpdateProfessionPayload

  """
  Updates a single `Profession` using its globally unique id and a patch.
  """
  updateProfessionByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfessionByNodeIdInput!
  ): UpdateProfessionPayload

  """Updates a single `ProfessionLocale` using a unique key and a patch."""
  updateProfessionLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfessionLocaleInput!
  ): UpdateProfessionLocalePayload

  """Updates a single `ProfessionLocale` using a unique key and a patch."""
  updateProfessionLocaleByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfessionLocaleByNameInput!
  ): UpdateProfessionLocalePayload

  """
  Updates a single `ProfessionLocale` using its globally unique id and a patch.
  """
  updateProfessionLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfessionLocaleByNodeIdInput!
  ): UpdateProfessionLocalePayload

  """Updates a single `PromoCode` using a unique key and a patch."""
  updatePromoCode(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePromoCodeInput!
  ): UpdatePromoCodePayload

  """Updates a single `PromoCode` using its globally unique id and a patch."""
  updatePromoCodeByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePromoCodeByNodeIdInput!
  ): UpdatePromoCodePayload

  """Updates a single `Purchase` using a unique key and a patch."""
  updatePurchase(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePurchaseInput!
  ): UpdatePurchasePayload

  """Updates a single `Purchase` using its globally unique id and a patch."""
  updatePurchaseByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePurchaseByNodeIdInput!
  ): UpdatePurchasePayload

  """Updates a single `Score` using a unique key and a patch."""
  updateScore(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScoreInput!
  ): UpdateScorePayload

  """Updates a single `Score` using its globally unique id and a patch."""
  updateScoreByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScoreByNodeIdInput!
  ): UpdateScorePayload

  """Updates a single `Score` using a unique key and a patch."""
  updateScoreByPath(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScoreByPathInput!
  ): UpdateScorePayload

  """Updates a single `ScoreInstrument` using a unique key and a patch."""
  updateScoreInstrument(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScoreInstrumentInput!
  ): UpdateScoreInstrumentPayload

  """
  Updates a single `ScoreInstrument` using its globally unique id and a patch.
  """
  updateScoreInstrumentByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScoreInstrumentByNodeIdInput!
  ): UpdateScoreInstrumentPayload

  """Updates a single `ScoreLocale` using a unique key and a patch."""
  updateScoreLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScoreLocaleInput!
  ): UpdateScoreLocalePayload

  """
  Updates a single `ScoreLocale` using its globally unique id and a patch.
  """
  updateScoreLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScoreLocaleByNodeIdInput!
  ): UpdateScoreLocalePayload

  """Updates a single `Tag` using a unique key and a patch."""
  updateTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagInput!
  ): UpdateTagPayload

  """Updates a single `Tag` using a unique key and a patch."""
  updateTagByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagByNameInput!
  ): UpdateTagPayload

  """Updates a single `Tag` using its globally unique id and a patch."""
  updateTagByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagByNodeIdInput!
  ): UpdateTagPayload

  """Updates a single `TagLocale` using a unique key and a patch."""
  updateTagLocale(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagLocaleInput!
  ): UpdateTagLocalePayload

  """Updates a single `TagLocale` using a unique key and a patch."""
  updateTagLocaleByName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagLocaleByNameInput!
  ): UpdateTagLocalePayload

  """Updates a single `TagLocale` using its globally unique id and a patch."""
  updateTagLocaleByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTagLocaleByNodeIdInput!
  ): UpdateTagLocalePayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByEmailInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByFacebookId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByFacebookIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByNodeIdInput!
  ): UpdateUserPayload
  verifyEmail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: VerifyEmailInput!
  ): VerifyEmailPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Open message that anyone can send to support team."""
type OpenMessage implements Node {
  attachedFile: String
  createdAt: Datetime!
  email: String!
  id: Int!
  message: String!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  updatedAt: Datetime!
}

"""
A condition to be used against `OpenMessage` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OpenMessageCondition {
  """Checks for equality with the object’s `attachedFile` field."""
  attachedFile: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `message` field."""
  message: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `OpenMessage` object types. All fields are combined with a logical ‘and.’
"""
input OpenMessageFilter {
  """Checks for all expressions in this list."""
  and: [OpenMessageFilter!]

  """Filter by the object’s `attachedFile` field."""
  attachedFile: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `message` field."""
  message: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: OpenMessageFilter

  """Checks for any expressions in this list."""
  or: [OpenMessageFilter!]

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `OpenMessage`"""
input OpenMessageInput {
  attachedFile: Upload
  email: String!
  message: String!
  name: String
}

"""
Represents an update to a `OpenMessage`. Fields that are set will be updated.
"""
input OpenMessagePatch {
  attachedFile: Upload
  message: String
  name: String
}

"""A connection to a list of `OpenMessage` values."""
type OpenMessagesConnection {
  """
  A list of edges which contains the `OpenMessage` and cursor to aid in pagination.
  """
  edges: [OpenMessagesEdge!]!

  """A list of `OpenMessage` objects."""
  nodes: [OpenMessage]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `OpenMessage` you could get from the connection."""
  totalCount: Int!
}

"""A `OpenMessage` edge in the connection."""
type OpenMessagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OpenMessage` at the end of the edge."""
  node: OpenMessage
}

"""Methods to use when ordering `OpenMessage`."""
enum OpenMessagesOrderBy {
  ATTACHED_FILE_ASC
  ATTACHED_FILE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  EMAIL_ASC
  EMAIL_DESC
  ID_ASC
  ID_DESC
  MESSAGE_ASC
  MESSAGE_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type PageSection implements Node {
  attrs: JSON!
  createdAt: Datetime!
  name: String!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  page: String!
  updatedAt: Datetime!
}

"""
A condition to be used against `PageSection` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PageSectionCondition {
  """Checks for equality with the object’s `attrs` field."""
  attrs: JSON

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `page` field."""
  page: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `PageSection` object types. All fields are combined with a logical ‘and.’
"""
input PageSectionFilter {
  """Checks for all expressions in this list."""
  and: [PageSectionFilter!]

  """Filter by the object’s `attrs` field."""
  attrs: JSONFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: PageSectionFilter

  """Checks for any expressions in this list."""
  or: [PageSectionFilter!]

  """Filter by the object’s `page` field."""
  page: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `PageSection`"""
input PageSectionInput {
  attrs: JSON
  name: String!
  page: String!
}

"""
Represents an update to a `PageSection`. Fields that are set will be updated.
"""
input PageSectionPatch {
  attrs: JSON
  name: String
  page: String
}

"""A connection to a list of `PageSection` values."""
type PageSectionsConnection {
  """
  A list of edges which contains the `PageSection` and cursor to aid in pagination.
  """
  edges: [PageSectionsEdge!]!

  """A list of `PageSection` objects."""
  nodes: [PageSection]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PageSection` you could get from the connection."""
  totalCount: Int!
}

"""A `PageSection` edge in the connection."""
type PageSectionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PageSection` at the end of the edge."""
  node: PageSection
}

"""Methods to use when ordering `PageSection`."""
enum PageSectionsOrderBy {
  ATTRS_ASC
  ATTRS_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PAGE_ASC
  PAGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

input PasswordPatch {
  new: String!
  old: String!
}

type Playlist implements Node {
  createdAt: Datetime!

  """Reads and enables pagination through a set of `GroupPlaylist`."""
  groupPlaylists(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupPlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupPlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GroupPlaylist`."""
    orderBy: [GroupPlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupPlaylistsConnection!

  """Reads and enables pagination through a set of `GroupPlaylist`."""
  groupPlaylistsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupPlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupPlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GroupPlaylist`."""
    orderBy: [GroupPlaylistsOrderBy!]
  ): [GroupPlaylist!]!

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsConnection!

  """Reads and enables pagination through a set of `Group`."""
  groupsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!]
  ): [Group!]!
  id: Int!
  isPublic: Boolean

  """Reads and enables pagination through a set of `Language`."""
  languages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!]
  ): [Language!]!

  """Reads and enables pagination through a set of `Media`."""
  media(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaConnection!

  """Reads and enables pagination through a set of `Media`."""
  mediaList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!]
  ): [Media!]!

  """Reads and enables pagination through a set of `MusicianPlaylist`."""
  musicianPlaylists(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianPlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianPlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianPlaylist`."""
    orderBy: [MusicianPlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianPlaylistsConnection!

  """Reads and enables pagination through a set of `MusicianPlaylist`."""
  musicianPlaylistsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianPlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianPlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianPlaylist`."""
    orderBy: [MusicianPlaylistsOrderBy!]
  ): [MusicianPlaylist!]!

  """Reads and enables pagination through a set of `Musician`."""
  musicians(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusiciansConnection!

  """Reads and enables pagination through a set of `Musician`."""
  musiciansList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!]
  ): [Musician!]!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `User` that is related to this `Playlist`."""
  owner: User
  ownerId: Int

  """Reads and enables pagination through a set of `PlaylistLocale`."""
  playlistLocalesBySourceId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlaylistLocale`."""
    orderBy: [PlaylistLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistLocalesConnection!

  """Reads and enables pagination through a set of `PlaylistLocale`."""
  playlistLocalesBySourceIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PlaylistLocale`."""
    orderBy: [PlaylistLocalesOrderBy!]
  ): [PlaylistLocale!]!

  """Reads and enables pagination through a set of `PlaylistMedia`."""
  playlistMedias(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistMediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistMediaFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlaylistMedia`."""
    orderBy: [PlaylistMediasOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistMediasConnection!

  """Reads and enables pagination through a set of `PlaylistMedia`."""
  playlistMediasList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistMediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistMediaFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PlaylistMedia`."""
    orderBy: [PlaylistMediasOrderBy!]
  ): [PlaylistMedia!]!
  updatedAt: Datetime!
}

"""
A condition to be used against `Playlist` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PlaylistCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `isPublic` field."""
  isPublic: Boolean

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `ownerId` field."""
  ownerId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Playlist` object types. All fields are combined with a logical ‘and.’
"""
input PlaylistFilter {
  """Checks for all expressions in this list."""
  and: [PlaylistFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `groupPlaylists` relation."""
  groupPlaylists: PlaylistToManyGroupPlaylistFilter

  """Some related `groupPlaylists` exist."""
  groupPlaylistsExist: Boolean

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `isPublic` field."""
  isPublic: BooleanFilter

  """Filter by the object’s `musicianPlaylists` relation."""
  musicianPlaylists: PlaylistToManyMusicianPlaylistFilter

  """Some related `musicianPlaylists` exist."""
  musicianPlaylistsExist: Boolean

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: PlaylistFilter

  """Checks for any expressions in this list."""
  or: [PlaylistFilter!]

  """Filter by the object’s `owner` relation."""
  owner: UserFilter

  """A related `owner` exists."""
  ownerExists: Boolean

  """Filter by the object’s `ownerId` field."""
  ownerId: IntFilter

  """Filter by the object’s `playlistLocalesBySourceId` relation."""
  playlistLocalesBySourceId: PlaylistToManyPlaylistLocaleFilter

  """Some related `playlistLocalesBySourceId` exist."""
  playlistLocalesBySourceIdExist: Boolean

  """Filter by the object’s `playlistMedias` relation."""
  playlistMedias: PlaylistToManyPlaylistMediaFilter

  """Some related `playlistMedias` exist."""
  playlistMediasExist: Boolean

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Playlist`"""
input PlaylistInput {
  isPublic: Boolean
  name: String
  ownerId: Int
}

type PlaylistLocale implements Node {
  createdAt: Datetime!
  lang: String!

  """Reads a single `Language` that is related to this `PlaylistLocale`."""
  languageByLang: Language
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Playlist` that is related to this `PlaylistLocale`."""
  source: Playlist
  sourceId: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `PlaylistLocale` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PlaylistLocaleCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `lang` field."""
  lang: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `sourceId` field."""
  sourceId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `PlaylistLocale` object types. All fields are combined with a logical ‘and.’
"""
input PlaylistLocaleFilter {
  """Checks for all expressions in this list."""
  and: [PlaylistLocaleFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `lang` field."""
  lang: StringFilter

  """Filter by the object’s `languageByLang` relation."""
  languageByLang: LanguageFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: PlaylistLocaleFilter

  """Checks for any expressions in this list."""
  or: [PlaylistLocaleFilter!]

  """Filter by the object’s `source` relation."""
  source: PlaylistFilter

  """Filter by the object’s `sourceId` field."""
  sourceId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `PlaylistLocale`"""
input PlaylistLocaleInput {
  lang: String!
  name: String
  sourceId: Int!
}

"""
Represents an update to a `PlaylistLocale`. Fields that are set will be updated.
"""
input PlaylistLocalePatch {
  lang: String
  name: String
  sourceId: Int
}

"""A connection to a list of `PlaylistLocale` values."""
type PlaylistLocalesConnection {
  """
  A list of edges which contains the `PlaylistLocale` and cursor to aid in pagination.
  """
  edges: [PlaylistLocalesEdge!]!

  """A list of `PlaylistLocale` objects."""
  nodes: [PlaylistLocale]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PlaylistLocale` you could get from the connection."""
  totalCount: Int!
}

"""A `PlaylistLocale` edge in the connection."""
type PlaylistLocalesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PlaylistLocale` at the end of the edge."""
  node: PlaylistLocale
}

"""Methods to use when ordering `PlaylistLocale`."""
enum PlaylistLocalesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  LANG_ASC
  LANG_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SOURCE_ID_ASC
  SOURCE_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type PlaylistMedia implements Node {
  createdAt: Datetime!

  """Order in playlist"""
  index: Int

  """Reads a single `Media` that is related to this `PlaylistMedia`."""
  media: Media
  mediaId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Playlist` that is related to this `PlaylistMedia`."""
  playlist: Playlist
  playlistId: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `PlaylistMedia` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input PlaylistMediaCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `index` field."""
  index: Int

  """Checks for equality with the object’s `mediaId` field."""
  mediaId: Int

  """Checks for equality with the object’s `playlistId` field."""
  playlistId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `PlaylistMedia` object types. All fields are combined with a logical ‘and.’
"""
input PlaylistMediaFilter {
  """Checks for all expressions in this list."""
  and: [PlaylistMediaFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `index` field."""
  index: IntFilter

  """Filter by the object’s `media` relation."""
  media: MediaFilter

  """Filter by the object’s `mediaId` field."""
  mediaId: IntFilter

  """Negates the expression."""
  not: PlaylistMediaFilter

  """Checks for any expressions in this list."""
  or: [PlaylistMediaFilter!]

  """Filter by the object’s `playlist` relation."""
  playlist: PlaylistFilter

  """Filter by the object’s `playlistId` field."""
  playlistId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `PlaylistMedia`"""
input PlaylistMediaInput {
  """Order in playlist"""
  index: Int
  mediaId: Int!
  playlistId: Int!
}

"""
Represents an update to a `PlaylistMedia`. Fields that are set will be updated.
"""
input PlaylistMediaPatch {
  """Order in playlist"""
  index: Int
  mediaId: Int
  playlistId: Int
}

"""A connection to a list of `PlaylistMedia` values."""
type PlaylistMediasConnection {
  """
  A list of edges which contains the `PlaylistMedia` and cursor to aid in pagination.
  """
  edges: [PlaylistMediasEdge!]!

  """A list of `PlaylistMedia` objects."""
  nodes: [PlaylistMedia]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PlaylistMedia` you could get from the connection."""
  totalCount: Int!
}

"""A `PlaylistMedia` edge in the connection."""
type PlaylistMediasEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PlaylistMedia` at the end of the edge."""
  node: PlaylistMedia
}

"""Methods to use when ordering `PlaylistMedia`."""
enum PlaylistMediasOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  INDEX_ASC
  INDEX_DESC
  MEDIA_ID_ASC
  MEDIA_ID_DESC
  NATURAL
  PLAYLIST_ID_ASC
  PLAYLIST_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Playlist`. Fields that are set will be updated.
"""
input PlaylistPatch {
  isPublic: Boolean
  name: String
  ownerId: Int
}

"""A connection to a list of `Playlist` values."""
type PlaylistsConnection {
  """
  A list of edges which contains the `Playlist` and cursor to aid in pagination.
  """
  edges: [PlaylistsEdge!]!

  """A list of `Playlist` objects."""
  nodes: [Playlist]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Playlist` you could get from the connection."""
  totalCount: Int!
}

"""A `Playlist` edge in the connection."""
type PlaylistsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Playlist` at the end of the edge."""
  node: Playlist
}

"""Methods to use when ordering `Playlist`."""
enum PlaylistsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  IS_PUBLIC_ASC
  IS_PUBLIC_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  OWNER_ID_ASC
  OWNER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A filter to be used against many `GroupPlaylist` object types. All fields are combined with a logical ‘and.’
"""
input PlaylistToManyGroupPlaylistFilter {
  """
  Every related `GroupPlaylist` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: GroupPlaylistFilter

  """
  No related `GroupPlaylist` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: GroupPlaylistFilter

  """
  Some related `GroupPlaylist` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: GroupPlaylistFilter
}

"""
A filter to be used against many `MusicianPlaylist` object types. All fields are combined with a logical ‘and.’
"""
input PlaylistToManyMusicianPlaylistFilter {
  """
  Every related `MusicianPlaylist` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MusicianPlaylistFilter

  """
  No related `MusicianPlaylist` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MusicianPlaylistFilter

  """
  Some related `MusicianPlaylist` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MusicianPlaylistFilter
}

"""
A filter to be used against many `PlaylistLocale` object types. All fields are combined with a logical ‘and.’
"""
input PlaylistToManyPlaylistLocaleFilter {
  """
  Every related `PlaylistLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PlaylistLocaleFilter

  """
  No related `PlaylistLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PlaylistLocaleFilter

  """
  Some related `PlaylistLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PlaylistLocaleFilter
}

"""
A filter to be used against many `PlaylistMedia` object types. All fields are combined with a logical ‘and.’
"""
input PlaylistToManyPlaylistMediaFilter {
  """
  Every related `PlaylistMedia` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PlaylistMediaFilter

  """
  No related `PlaylistMedia` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PlaylistMediaFilter

  """
  Some related `PlaylistMedia` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PlaylistMediaFilter
}

type Preview {
  options: PreviewOptions
  url: String
}

type PreviewOptions {
  opacity: Float
  pages: [String!]
  rotation: Float
  scaleFactor: Float
  scalePosition: String
  watermarkPages: [String!]
}

input Price {
  currency: String!
  value: BigFloat!
}

type Profession implements Node {
  createdAt: Datetime!
  id: Int!

  """Reads and enables pagination through a set of `Language`."""
  languages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!]
  ): [Language!]!

  """Reads and enables pagination through a set of `MusicianProfession`."""
  musicianProfessions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianProfessionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianProfessionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianProfession`."""
    orderBy: [MusicianProfessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianProfessionsConnection!

  """Reads and enables pagination through a set of `MusicianProfession`."""
  musicianProfessionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianProfessionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianProfessionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianProfession`."""
    orderBy: [MusicianProfessionsOrderBy!]
  ): [MusicianProfession!]!

  """Reads and enables pagination through a set of `Musician`."""
  musicians(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusiciansConnection!

  """Reads and enables pagination through a set of `Musician`."""
  musiciansList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!]
  ): [Musician!]!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `ProfessionLocale`."""
  professionLocalesBySourceId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfessionLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfessionLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProfessionLocale`."""
    orderBy: [ProfessionLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfessionLocalesConnection!

  """Reads and enables pagination through a set of `ProfessionLocale`."""
  professionLocalesBySourceIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfessionLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfessionLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ProfessionLocale`."""
    orderBy: [ProfessionLocalesOrderBy!]
  ): [ProfessionLocale!]!
  updatedAt: Datetime!
}

"""
A condition to be used against `Profession` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ProfessionCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Profession` object types. All fields are combined with a logical ‘and.’
"""
input ProfessionFilter {
  """Checks for all expressions in this list."""
  and: [ProfessionFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `musicianProfessions` relation."""
  musicianProfessions: ProfessionToManyMusicianProfessionFilter

  """Some related `musicianProfessions` exist."""
  musicianProfessionsExist: Boolean

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: ProfessionFilter

  """Checks for any expressions in this list."""
  or: [ProfessionFilter!]

  """Filter by the object’s `professionLocalesBySourceId` relation."""
  professionLocalesBySourceId: ProfessionToManyProfessionLocaleFilter

  """Some related `professionLocalesBySourceId` exist."""
  professionLocalesBySourceIdExist: Boolean

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Profession`"""
input ProfessionInput {
  name: String
}

type ProfessionLocale implements Node {
  createdAt: Datetime!
  lang: String!

  """Reads a single `Language` that is related to this `ProfessionLocale`."""
  languageByLang: Language
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  Reads a single `Profession` that is related to this `ProfessionLocale`.
  """
  source: Profession
  sourceId: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `ProfessionLocale` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProfessionLocaleCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `lang` field."""
  lang: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `sourceId` field."""
  sourceId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `ProfessionLocale` object types. All fields are combined with a logical ‘and.’
"""
input ProfessionLocaleFilter {
  """Checks for all expressions in this list."""
  and: [ProfessionLocaleFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `lang` field."""
  lang: StringFilter

  """Filter by the object’s `languageByLang` relation."""
  languageByLang: LanguageFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: ProfessionLocaleFilter

  """Checks for any expressions in this list."""
  or: [ProfessionLocaleFilter!]

  """Filter by the object’s `source` relation."""
  source: ProfessionFilter

  """Filter by the object’s `sourceId` field."""
  sourceId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `ProfessionLocale`"""
input ProfessionLocaleInput {
  lang: String!
  name: String
  sourceId: Int!
}

"""
Represents an update to a `ProfessionLocale`. Fields that are set will be updated.
"""
input ProfessionLocalePatch {
  lang: String
  name: String
  sourceId: Int
}

"""A connection to a list of `ProfessionLocale` values."""
type ProfessionLocalesConnection {
  """
  A list of edges which contains the `ProfessionLocale` and cursor to aid in pagination.
  """
  edges: [ProfessionLocalesEdge!]!

  """A list of `ProfessionLocale` objects."""
  nodes: [ProfessionLocale]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProfessionLocale` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ProfessionLocale` edge in the connection."""
type ProfessionLocalesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProfessionLocale` at the end of the edge."""
  node: ProfessionLocale
}

"""Methods to use when ordering `ProfessionLocale`."""
enum ProfessionLocalesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  LANG_ASC
  LANG_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SOURCE_ID_ASC
  SOURCE_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Profession`. Fields that are set will be updated.
"""
input ProfessionPatch {
  name: String
}

"""A connection to a list of `Profession` values."""
type ProfessionsConnection {
  """
  A list of edges which contains the `Profession` and cursor to aid in pagination.
  """
  edges: [ProfessionsEdge!]!

  """A list of `Profession` objects."""
  nodes: [Profession]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Profession` you could get from the connection."""
  totalCount: Int!
}

"""A `Profession` edge in the connection."""
type ProfessionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Profession` at the end of the edge."""
  node: Profession
}

"""Methods to use when ordering `Profession`."""
enum ProfessionsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A filter to be used against many `MusicianProfession` object types. All fields are combined with a logical ‘and.’
"""
input ProfessionToManyMusicianProfessionFilter {
  """
  Every related `MusicianProfession` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MusicianProfessionFilter

  """
  No related `MusicianProfession` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MusicianProfessionFilter

  """
  Some related `MusicianProfession` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MusicianProfessionFilter
}

"""
A filter to be used against many `ProfessionLocale` object types. All fields are combined with a logical ‘and.’
"""
input ProfessionToManyProfessionLocaleFilter {
  """
  Every related `ProfessionLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ProfessionLocaleFilter

  """
  No related `ProfessionLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ProfessionLocaleFilter

  """
  Some related `ProfessionLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ProfessionLocaleFilter
}

type PromoCode implements Node {
  """this also will be used as id"""
  code: String!
  createdAt: Datetime!
  expiresAt: Datetime

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """discount percent, default is 0"""
  percent: Int!
  status: PromoCodeStatus!
  updatedAt: Datetime!
}

"""
A condition to be used against `PromoCode` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PromoCodeCondition {
  """Checks for equality with the object’s `code` field."""
  code: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `expiresAt` field."""
  expiresAt: Datetime

  """Checks for equality with the object’s `percent` field."""
  percent: Int

  """Checks for equality with the object’s `status` field."""
  status: PromoCodeStatus

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `PromoCode` object types. All fields are combined with a logical ‘and.’
"""
input PromoCodeFilter {
  """Checks for all expressions in this list."""
  and: [PromoCodeFilter!]

  """Filter by the object’s `code` field."""
  code: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `expiresAt` field."""
  expiresAt: DatetimeFilter

  """Negates the expression."""
  not: PromoCodeFilter

  """Checks for any expressions in this list."""
  or: [PromoCodeFilter!]

  """Filter by the object’s `percent` field."""
  percent: IntFilter

  """Filter by the object’s `status` field."""
  status: PromoCodeStatusFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""
Represents an update to a `PromoCode`. Fields that are set will be updated.
"""
input PromoCodePatch {
  expiresAt: Datetime

  """discount percent, default is 0"""
  percent: Int
  status: PromoCodeStatus
}

"""A connection to a list of `PromoCode` values."""
type PromoCodesConnection {
  """
  A list of edges which contains the `PromoCode` and cursor to aid in pagination.
  """
  edges: [PromoCodesEdge!]!

  """A list of `PromoCode` objects."""
  nodes: [PromoCode]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PromoCode` you could get from the connection."""
  totalCount: Int!
}

"""A `PromoCode` edge in the connection."""
type PromoCodesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PromoCode` at the end of the edge."""
  node: PromoCode
}

"""Methods to use when ordering `PromoCode`."""
enum PromoCodesOrderBy {
  CODE_ASC
  CODE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  EXPIRES_AT_ASC
  EXPIRES_AT_DESC
  NATURAL
  PERCENT_ASC
  PERCENT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  STATUS_ASC
  STATUS_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

enum PromoCodeStatus {
  ACTIVE
  CANCELED
  USED
}

"""
A filter to be used against PromoCodeStatus fields. All fields are combined with a logical ‘and.’
"""
input PromoCodeStatusFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: PromoCodeStatus

  """Equal to the specified value."""
  equalTo: PromoCodeStatus

  """Greater than the specified value."""
  greaterThan: PromoCodeStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: PromoCodeStatus

  """Included in the specified list."""
  in: [PromoCodeStatus!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: PromoCodeStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: PromoCodeStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: PromoCodeStatus

  """Not equal to the specified value."""
  notEqualTo: PromoCodeStatus

  """Not included in the specified list."""
  notIn: [PromoCodeStatus!]
}

type Purchase implements Node {
  createdAt: Datetime!

  """Currency requested fot this purchase"""
  currency: String!
  discountPrice: BigFloat
  id: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  price: BigFloat!
  promoCode: String

  """Reads a single `Score` that is related to this `Purchase`."""
  score: Score
  scoreId: Int!
  status: PurchaseStatus!
  updatedAt: Datetime!

  """Reads a single `User` that is related to this `Purchase`."""
  user: User
  userId: Int
}

"""
A condition to be used against `Purchase` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PurchaseCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `currency` field."""
  currency: String

  """Checks for equality with the object’s `discountPrice` field."""
  discountPrice: BigFloat

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `price` field."""
  price: BigFloat

  """Checks for equality with the object’s `promoCode` field."""
  promoCode: String

  """Checks for equality with the object’s `scoreId` field."""
  scoreId: Int

  """Checks for equality with the object’s `status` field."""
  status: PurchaseStatus

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `userId` field."""
  userId: Int
}

"""
A filter to be used against `Purchase` object types. All fields are combined with a logical ‘and.’
"""
input PurchaseFilter {
  """Checks for all expressions in this list."""
  and: [PurchaseFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `currency` field."""
  currency: StringFilter

  """Filter by the object’s `discountPrice` field."""
  discountPrice: BigFloatFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Negates the expression."""
  not: PurchaseFilter

  """Checks for any expressions in this list."""
  or: [PurchaseFilter!]

  """Filter by the object’s `price` field."""
  price: BigFloatFilter

  """Filter by the object’s `promoCode` field."""
  promoCode: StringFilter

  """Filter by the object’s `score` relation."""
  score: ScoreFilter

  """Filter by the object’s `scoreId` field."""
  scoreId: IntFilter

  """Filter by the object’s `status` field."""
  status: PurchaseStatusFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `user` relation."""
  user: UserFilter

  """A related `user` exists."""
  userExists: Boolean

  """Filter by the object’s `userId` field."""
  userId: IntFilter
}

"""An input for mutations affecting `Purchase`"""
input PurchaseInput {
  discountPrice: BigFloat
  price: BigFloat!
  promoCode: String
  scoreId: Int!
  status: PurchaseStatus
  userId: Int
}

"""
Represents an update to a `Purchase`. Fields that are set will be updated.
"""
input PurchasePatch {
  """Currency requested fot this purchase"""
  currency: String
  discountPrice: BigFloat
  price: BigFloat
  promoCode: String
  scoreId: Int
  status: PurchaseStatus
  userId: Int
}

"""A connection to a list of `Purchase` values."""
type PurchasesConnection {
  """
  A list of edges which contains the `Purchase` and cursor to aid in pagination.
  """
  edges: [PurchasesEdge!]!

  """A list of `Purchase` objects."""
  nodes: [Purchase]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Purchase` you could get from the connection."""
  totalCount: Int!
}

input PurchaseScoreInput {
  """
  ISO country code, AM for
  purchase with Ameria
  """
  country: String!

  """Default is USD"""
  currency: String!

  """
  ISO language code, this will be used
  for Ameria payment page language.
  """
  lang: String
  promoCode: String

  """
  Where to redirect user after successful checkout,
  must have same domain with API.
  """
  redirect: String
  scoreId: Int!
}

"""A `Purchase` edge in the connection."""
type PurchasesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Purchase` at the end of the edge."""
  node: Purchase
}

"""Methods to use when ordering `Purchase`."""
enum PurchasesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  CURRENCY_ASC
  CURRENCY_DESC
  DISCOUNT_PRICE_ASC
  DISCOUNT_PRICE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PRICE_ASC
  PRICE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROMO_CODE_ASC
  PROMO_CODE_DESC
  SCORE_ID_ASC
  SCORE_ID_DESC
  STATUS_ASC
  STATUS_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  USER_ID_ASC
  USER_ID_DESC
}

enum PurchaseStatus {
  CANCELED
  PAID
  PENDING
}

"""
A filter to be used against PurchaseStatus fields. All fields are combined with a logical ‘and.’
"""
input PurchaseStatusFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: PurchaseStatus

  """Equal to the specified value."""
  equalTo: PurchaseStatus

  """Greater than the specified value."""
  greaterThan: PurchaseStatus

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: PurchaseStatus

  """Included in the specified list."""
  in: [PurchaseStatus!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: PurchaseStatus

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: PurchaseStatus

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: PurchaseStatus

  """Not equal to the specified value."""
  notEqualTo: PurchaseStatus

  """Not included in the specified list."""
  notIn: [PurchaseStatus!]
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  article(id: Int!): Article

  """Reads a single `Article` using its globally unique `ID`."""
  articleByNodeId(
    """The globally unique `ID` to be used in selecting a single `Article`."""
    nodeId: ID!
  ): Article
  articleByPath(path: String!): Article

  """Reads and enables pagination through a set of `ArticleGallery`."""
  articleGalleries(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleGalleryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleGalleryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArticleGallery`."""
    orderBy: [ArticleGalleriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleGalleriesConnection

  """Reads a set of `ArticleGallery`."""
  articleGalleriesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleGalleryCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleGalleryFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArticleGallery`."""
    orderBy: [ArticleGalleriesOrderBy!]
  ): [ArticleGallery!]
  articleGallery(id: Int!): ArticleGallery

  """Reads a single `ArticleGallery` using its globally unique `ID`."""
  articleGalleryByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ArticleGallery`.
    """
    nodeId: ID!
  ): ArticleGallery
  articleGalleryImage(galleryId: Int!, imageId: Int!): ArticleGalleryImage

  """Reads a single `ArticleGalleryImage` using its globally unique `ID`."""
  articleGalleryImageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ArticleGalleryImage`.
    """
    nodeId: ID!
  ): ArticleGalleryImage

  """Reads and enables pagination through a set of `ArticleGalleryImage`."""
  articleGalleryImages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleGalleryImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleGalleryImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArticleGalleryImage`."""
    orderBy: [ArticleGalleryImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleGalleryImagesConnection

  """Reads a set of `ArticleGalleryImage`."""
  articleGalleryImagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleGalleryImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleGalleryImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArticleGalleryImage`."""
    orderBy: [ArticleGalleryImagesOrderBy!]
  ): [ArticleGalleryImage!]
  articleGenre(articleId: Int!, genreId: Int!): ArticleGenre

  """Reads a single `ArticleGenre` using its globally unique `ID`."""
  articleGenreByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ArticleGenre`.
    """
    nodeId: ID!
  ): ArticleGenre

  """Reads and enables pagination through a set of `ArticleGenre`."""
  articleGenres(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleGenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArticleGenre`."""
    orderBy: [ArticleGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleGenresConnection

  """Reads a set of `ArticleGenre`."""
  articleGenresList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleGenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArticleGenre`."""
    orderBy: [ArticleGenresOrderBy!]
  ): [ArticleGenre!]
  articleImage(articleId: Int!, imageId: Int!): ArticleImage

  """Reads a single `ArticleImage` using its globally unique `ID`."""
  articleImageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ArticleImage`.
    """
    nodeId: ID!
  ): ArticleImage

  """Reads and enables pagination through a set of `ArticleImage`."""
  articleImages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArticleImage`."""
    orderBy: [ArticleImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleImagesConnection

  """Reads a set of `ArticleImage`."""
  articleImagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArticleImage`."""
    orderBy: [ArticleImagesOrderBy!]
  ): [ArticleImage!]
  articleLocale(lang: String!, sourceId: Int!): ArticleLocale

  """Reads a single `ArticleLocale` using its globally unique `ID`."""
  articleLocaleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ArticleLocale`.
    """
    nodeId: ID!
  ): ArticleLocale

  """Reads and enables pagination through a set of `ArticleLocale`."""
  articleLocales(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArticleLocale`."""
    orderBy: [ArticleLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleLocalesConnection

  """Reads a set of `ArticleLocale`."""
  articleLocalesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArticleLocale`."""
    orderBy: [ArticleLocalesOrderBy!]
  ): [ArticleLocale!]

  """Reads and enables pagination through a set of `Article`."""
  articles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticlesConnection

  """Reads a set of `Article`."""
  articlesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!]
  ): [Article!]
  articleTag(articleId: Int!, tagId: Int!): ArticleTag

  """Reads a single `ArticleTag` using its globally unique `ID`."""
  articleTagByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ArticleTag`.
    """
    nodeId: ID!
  ): ArticleTag

  """Reads and enables pagination through a set of `ArticleTag`."""
  articleTags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleTagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArticleTag`."""
    orderBy: [ArticleTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleTagsConnection

  """Reads a set of `ArticleTag`."""
  articleTagsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleTagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArticleTag`."""
    orderBy: [ArticleTagsOrderBy!]
  ): [ArticleTag!]
  composition(id: Int!): Composition

  """Reads a single `Composition` using its globally unique `ID`."""
  compositionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Composition`.
    """
    nodeId: ID!
  ): Composition
  compositionByPath(path: String!): Composition
  compositionLocale(lang: String!, sourceId: Int!): CompositionLocale

  """Reads a single `CompositionLocale` using its globally unique `ID`."""
  compositionLocaleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `CompositionLocale`.
    """
    nodeId: ID!
  ): CompositionLocale

  """Reads and enables pagination through a set of `CompositionLocale`."""
  compositionLocales(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompositionLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CompositionLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `CompositionLocale`."""
    orderBy: [CompositionLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompositionLocalesConnection

  """Reads a set of `CompositionLocale`."""
  compositionLocalesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompositionLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CompositionLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `CompositionLocale`."""
    orderBy: [CompositionLocalesOrderBy!]
  ): [CompositionLocale!]

  """Reads and enables pagination through a set of `Composition`."""
  compositions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompositionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CompositionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Composition`."""
    orderBy: [CompositionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompositionsConnection

  """Reads a set of `Composition`."""
  compositionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompositionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: CompositionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Composition`."""
    orderBy: [CompositionsOrderBy!]
  ): [Composition!]
  currentUser(notNull: Boolean): User
  currentUserId(notNull: Boolean): Int
  currentUserRole: UserRole
  document(id: Int!): Document

  """Reads a single `Document` using its globally unique `ID`."""
  documentByNodeId(
    """The globally unique `ID` to be used in selecting a single `Document`."""
    nodeId: ID!
  ): Document
  documentLocale(lang: String!, sourceId: Int!): DocumentLocale

  """Reads a single `DocumentLocale` using its globally unique `ID`."""
  documentLocaleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `DocumentLocale`.
    """
    nodeId: ID!
  ): DocumentLocale

  """Reads and enables pagination through a set of `DocumentLocale`."""
  documentLocales(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DocumentLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DocumentLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DocumentLocale`."""
    orderBy: [DocumentLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DocumentLocalesConnection

  """Reads a set of `DocumentLocale`."""
  documentLocalesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DocumentLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DocumentLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `DocumentLocale`."""
    orderBy: [DocumentLocalesOrderBy!]
  ): [DocumentLocale!]

  """Reads and enables pagination through a set of `Document`."""
  documents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DocumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DocumentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Document`."""
    orderBy: [DocumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DocumentsConnection

  """Reads a set of `Document`."""
  documentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DocumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DocumentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Document`."""
    orderBy: [DocumentsOrderBy!]
  ): [Document!]
  genre(id: Int!): Genre
  genreByName(name: String!): Genre

  """Reads a single `Genre` using its globally unique `ID`."""
  genreByNodeId(
    """The globally unique `ID` to be used in selecting a single `Genre`."""
    nodeId: ID!
  ): Genre
  genreLocale(lang: String!, sourceId: Int!): GenreLocale
  genreLocaleByName(name: String!): GenreLocale

  """Reads a single `GenreLocale` using its globally unique `ID`."""
  genreLocaleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `GenreLocale`.
    """
    nodeId: ID!
  ): GenreLocale

  """Reads and enables pagination through a set of `GenreLocale`."""
  genreLocales(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GenreLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GenreLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GenreLocale`."""
    orderBy: [GenreLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GenreLocalesConnection

  """Reads a set of `GenreLocale`."""
  genreLocalesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GenreLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GenreLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GenreLocale`."""
    orderBy: [GenreLocalesOrderBy!]
  ): [GenreLocale!]

  """Reads and enables pagination through a set of `Genre`."""
  genres(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Genre`."""
    orderBy: [GenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): GenresConnection

  """Reads a set of `Genre`."""
  genresList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Genre`."""
    orderBy: [GenresOrderBy!]
  ): [Genre!]
  group(id: Int!): Group

  """Reads a single `Group` using its globally unique `ID`."""
  groupByNodeId(
    """The globally unique `ID` to be used in selecting a single `Group`."""
    nodeId: ID!
  ): Group
  groupImage(groupId: Int!, imageId: Int!): GroupImage

  """Reads a single `GroupImage` using its globally unique `ID`."""
  groupImageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `GroupImage`.
    """
    nodeId: ID!
  ): GroupImage

  """Reads and enables pagination through a set of `GroupImage`."""
  groupImages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GroupImage`."""
    orderBy: [GroupImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupImagesConnection

  """Reads a set of `GroupImage`."""
  groupImagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GroupImage`."""
    orderBy: [GroupImagesOrderBy!]
  ): [GroupImage!]
  groupLocale(lang: String!, sourceId: Int!): GroupLocale

  """Reads a single `GroupLocale` using its globally unique `ID`."""
  groupLocaleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `GroupLocale`.
    """
    nodeId: ID!
  ): GroupLocale

  """Reads and enables pagination through a set of `GroupLocale`."""
  groupLocales(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GroupLocale`."""
    orderBy: [GroupLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupLocalesConnection

  """Reads a set of `GroupLocale`."""
  groupLocalesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GroupLocale`."""
    orderBy: [GroupLocalesOrderBy!]
  ): [GroupLocale!]
  groupMusician(groupId: Int!, musicianId: Int!): GroupMusician

  """Reads a single `GroupMusician` using its globally unique `ID`."""
  groupMusicianByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `GroupMusician`.
    """
    nodeId: ID!
  ): GroupMusician

  """Reads and enables pagination through a set of `GroupMusician`."""
  groupMusicians(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupMusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupMusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GroupMusician`."""
    orderBy: [GroupMusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupMusiciansConnection

  """Reads a set of `GroupMusician`."""
  groupMusiciansList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupMusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupMusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GroupMusician`."""
    orderBy: [GroupMusiciansOrderBy!]
  ): [GroupMusician!]
  groupPlaylist(groupId: Int!, playlistId: Int!): GroupPlaylist

  """Reads a single `GroupPlaylist` using its globally unique `ID`."""
  groupPlaylistByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `GroupPlaylist`.
    """
    nodeId: ID!
  ): GroupPlaylist

  """Reads and enables pagination through a set of `GroupPlaylist`."""
  groupPlaylists(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupPlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupPlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `GroupPlaylist`."""
    orderBy: [GroupPlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupPlaylistsConnection

  """Reads a set of `GroupPlaylist`."""
  groupPlaylistsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupPlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupPlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `GroupPlaylist`."""
    orderBy: [GroupPlaylistsOrderBy!]
  ): [GroupPlaylist!]

  """Reads and enables pagination through a set of `Group`."""
  groups(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsConnection

  """Reads a set of `Group`."""
  groupsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: GroupFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!]
  ): [Group!]
  image(id: Int!): Image

  """Reads a single `Image` using its globally unique `ID`."""
  imageByNodeId(
    """The globally unique `ID` to be used in selecting a single `Image`."""
    nodeId: ID!
  ): Image
  imageLocale(lang: String!, sourceId: Int!): ImageLocale

  """Reads a single `ImageLocale` using its globally unique `ID`."""
  imageLocaleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ImageLocale`.
    """
    nodeId: ID!
  ): ImageLocale

  """Reads and enables pagination through a set of `ImageLocale`."""
  imageLocales(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ImageLocale`."""
    orderBy: [ImageLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImageLocalesConnection

  """Reads a set of `ImageLocale`."""
  imageLocalesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ImageLocale`."""
    orderBy: [ImageLocalesOrderBy!]
  ): [ImageLocale!]

  """Reads and enables pagination through a set of `Image`."""
  images(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesConnection

  """Reads a set of `Image`."""
  imagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!]
  ): [Image!]
  instrument(id: Int!): Instrument

  """Reads a single `Instrument` using its globally unique `ID`."""
  instrumentByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Instrument`.
    """
    nodeId: ID!
  ): Instrument
  instrumentLocale(lang: String!, sourceId: Int!): InstrumentLocale

  """Reads a single `InstrumentLocale` using its globally unique `ID`."""
  instrumentLocaleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `InstrumentLocale`.
    """
    nodeId: ID!
  ): InstrumentLocale

  """Reads and enables pagination through a set of `InstrumentLocale`."""
  instrumentLocales(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InstrumentLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InstrumentLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `InstrumentLocale`."""
    orderBy: [InstrumentLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): InstrumentLocalesConnection

  """Reads a set of `InstrumentLocale`."""
  instrumentLocalesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InstrumentLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InstrumentLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `InstrumentLocale`."""
    orderBy: [InstrumentLocalesOrderBy!]
  ): [InstrumentLocale!]

  """Reads and enables pagination through a set of `Instrument`."""
  instruments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InstrumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InstrumentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Instrument`."""
    orderBy: [InstrumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InstrumentsConnection

  """Reads a set of `Instrument`."""
  instrumentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InstrumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InstrumentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Instrument`."""
    orderBy: [InstrumentsOrderBy!]
  ): [Instrument!]

  """Check if current user have purchased the score."""
  isScorePurchased(scoreId: Int!): Boolean
  language(code: String!): Language

  """Reads a single `Language` using its globally unique `ID`."""
  languageByNodeId(
    """The globally unique `ID` to be used in selecting a single `Language`."""
    nodeId: ID!
  ): Language

  """Reads and enables pagination through a set of `Language`."""
  languages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesConnection

  """Reads a set of `Language`."""
  languagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!]
  ): [Language!]
  media(id: Int!): Media

  """Reads a single `Media` using its globally unique `ID`."""
  mediaByNodeId(
    """The globally unique `ID` to be used in selecting a single `Media`."""
    nodeId: ID!
  ): Media
  mediaLocale(lang: String!, sourceId: Int!): MediaLocale

  """Reads a single `MediaLocale` using its globally unique `ID`."""
  mediaLocaleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MediaLocale`.
    """
    nodeId: ID!
  ): MediaLocale

  """Reads and enables pagination through a set of `MediaLocale`."""
  mediaLocales(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaLocale`."""
    orderBy: [MediaLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaLocalesConnection

  """Reads a set of `MediaLocale`."""
  mediaLocalesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MediaLocale`."""
    orderBy: [MediaLocalesOrderBy!]
  ): [MediaLocale!]

  """Reads and enables pagination through a set of `Media`."""
  medias(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaConnection

  """Reads a set of `Media`."""
  mediasList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!]
  ): [Media!]
  musician(id: Int!): Musician

  """Reads a single `Musician` using its globally unique `ID`."""
  musicianByNodeId(
    """The globally unique `ID` to be used in selecting a single `Musician`."""
    nodeId: ID!
  ): Musician
  musicianByPath(path: String!): Musician
  musicianComposition(compositionId: Int!, musicianId: Int!): MusicianComposition

  """Reads a single `MusicianComposition` using its globally unique `ID`."""
  musicianCompositionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MusicianComposition`.
    """
    nodeId: ID!
  ): MusicianComposition

  """Reads and enables pagination through a set of `MusicianComposition`."""
  musicianCompositions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCompositionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianCompositionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianComposition`."""
    orderBy: [MusicianCompositionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianCompositionsConnection

  """Reads a set of `MusicianComposition`."""
  musicianCompositionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCompositionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianCompositionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianComposition`."""
    orderBy: [MusicianCompositionsOrderBy!]
  ): [MusicianComposition!]
  musicianGenre(genreId: Int!, musicianId: Int!): MusicianGenre

  """Reads a single `MusicianGenre` using its globally unique `ID`."""
  musicianGenreByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MusicianGenre`.
    """
    nodeId: ID!
  ): MusicianGenre

  """Reads and enables pagination through a set of `MusicianGenre`."""
  musicianGenres(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianGenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianGenre`."""
    orderBy: [MusicianGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianGenresConnection

  """Reads a set of `MusicianGenre`."""
  musicianGenresList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianGenreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianGenreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianGenre`."""
    orderBy: [MusicianGenresOrderBy!]
  ): [MusicianGenre!]
  musicianImage(imageId: Int!, musicianId: Int!): MusicianImage

  """Reads a single `MusicianImage` using its globally unique `ID`."""
  musicianImageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MusicianImage`.
    """
    nodeId: ID!
  ): MusicianImage

  """Reads and enables pagination through a set of `MusicianImage`."""
  musicianImages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianImage`."""
    orderBy: [MusicianImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianImagesConnection

  """Reads a set of `MusicianImage`."""
  musicianImagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianImage`."""
    orderBy: [MusicianImagesOrderBy!]
  ): [MusicianImage!]
  musicianLocale(lang: String!, sourceId: Int!): MusicianLocale

  """Reads a single `MusicianLocale` using its globally unique `ID`."""
  musicianLocaleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MusicianLocale`.
    """
    nodeId: ID!
  ): MusicianLocale

  """Reads and enables pagination through a set of `MusicianLocale`."""
  musicianLocales(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianLocale`."""
    orderBy: [MusicianLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianLocalesConnection

  """Reads a set of `MusicianLocale`."""
  musicianLocalesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianLocale`."""
    orderBy: [MusicianLocalesOrderBy!]
  ): [MusicianLocale!]
  musicianPlaylist(musicianId: Int!, playlistId: Int!): MusicianPlaylist

  """Reads a single `MusicianPlaylist` using its globally unique `ID`."""
  musicianPlaylistByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MusicianPlaylist`.
    """
    nodeId: ID!
  ): MusicianPlaylist

  """Reads and enables pagination through a set of `MusicianPlaylist`."""
  musicianPlaylists(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianPlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianPlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianPlaylist`."""
    orderBy: [MusicianPlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianPlaylistsConnection

  """Reads a set of `MusicianPlaylist`."""
  musicianPlaylistsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianPlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianPlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianPlaylist`."""
    orderBy: [MusicianPlaylistsOrderBy!]
  ): [MusicianPlaylist!]
  musicianProfession(musicianId: Int!, professionId: Int!): MusicianProfession

  """Reads a single `MusicianProfession` using its globally unique `ID`."""
  musicianProfessionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MusicianProfession`.
    """
    nodeId: ID!
  ): MusicianProfession

  """Reads and enables pagination through a set of `MusicianProfession`."""
  musicianProfessions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianProfessionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianProfessionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianProfession`."""
    orderBy: [MusicianProfessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianProfessionsConnection

  """Reads a set of `MusicianProfession`."""
  musicianProfessionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianProfessionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianProfessionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianProfession`."""
    orderBy: [MusicianProfessionsOrderBy!]
  ): [MusicianProfession!]

  """Reads and enables pagination through a set of `Musician`."""
  musicians(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusiciansConnection

  """Reads a set of `Musician`."""
  musiciansList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!]
  ): [Musician!]
  musicianTag(musicianId: Int!, tagId: Int!): MusicianTag

  """Reads a single `MusicianTag` using its globally unique `ID`."""
  musicianTagByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `MusicianTag`.
    """
    nodeId: ID!
  ): MusicianTag

  """Reads and enables pagination through a set of `MusicianTag`."""
  musicianTags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianTagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianTag`."""
    orderBy: [MusicianTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianTagsConnection

  """Reads a set of `MusicianTag`."""
  musicianTagsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianTagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianTag`."""
    orderBy: [MusicianTagsOrderBy!]
  ): [MusicianTag!]

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!
  openMessage(id: Int!): OpenMessage

  """Reads a single `OpenMessage` using its globally unique `ID`."""
  openMessageByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `OpenMessage`.
    """
    nodeId: ID!
  ): OpenMessage

  """Reads and enables pagination through a set of `OpenMessage`."""
  openMessages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpenMessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OpenMessageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `OpenMessage`."""
    orderBy: [OpenMessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OpenMessagesConnection

  """Reads a set of `OpenMessage`."""
  openMessagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpenMessageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: OpenMessageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `OpenMessage`."""
    orderBy: [OpenMessagesOrderBy!]
  ): [OpenMessage!]
  pageSection(name: String!, page: String!): PageSection

  """Reads a single `PageSection` using its globally unique `ID`."""
  pageSectionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PageSection`.
    """
    nodeId: ID!
  ): PageSection

  """Reads and enables pagination through a set of `PageSection`."""
  pageSections(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PageSectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PageSectionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PageSection`."""
    orderBy: [PageSectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PageSectionsConnection

  """Reads a set of `PageSection`."""
  pageSectionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PageSectionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PageSectionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PageSection`."""
    orderBy: [PageSectionsOrderBy!]
  ): [PageSection!]
  playlist(id: Int!): Playlist

  """Reads a single `Playlist` using its globally unique `ID`."""
  playlistByNodeId(
    """The globally unique `ID` to be used in selecting a single `Playlist`."""
    nodeId: ID!
  ): Playlist
  playlistLocale(lang: String!, sourceId: Int!): PlaylistLocale

  """Reads a single `PlaylistLocale` using its globally unique `ID`."""
  playlistLocaleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PlaylistLocale`.
    """
    nodeId: ID!
  ): PlaylistLocale

  """Reads and enables pagination through a set of `PlaylistLocale`."""
  playlistLocales(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlaylistLocale`."""
    orderBy: [PlaylistLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistLocalesConnection

  """Reads a set of `PlaylistLocale`."""
  playlistLocalesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PlaylistLocale`."""
    orderBy: [PlaylistLocalesOrderBy!]
  ): [PlaylistLocale!]
  playlistMedia(mediaId: Int!, playlistId: Int!): PlaylistMedia

  """Reads a single `PlaylistMedia` using its globally unique `ID`."""
  playlistMediaByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `PlaylistMedia`.
    """
    nodeId: ID!
  ): PlaylistMedia

  """Reads and enables pagination through a set of `PlaylistMedia`."""
  playlistMedias(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistMediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistMediaFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PlaylistMedia`."""
    orderBy: [PlaylistMediasOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistMediasConnection

  """Reads a set of `PlaylistMedia`."""
  playlistMediasList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistMediaCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistMediaFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PlaylistMedia`."""
    orderBy: [PlaylistMediasOrderBy!]
  ): [PlaylistMedia!]

  """Reads and enables pagination through a set of `Playlist`."""
  playlists(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Playlist`."""
    orderBy: [PlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistsConnection

  """Reads a set of `Playlist`."""
  playlistsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Playlist`."""
    orderBy: [PlaylistsOrderBy!]
  ): [Playlist!]
  profession(id: Int!): Profession
  professionByName(name: String!): Profession

  """Reads a single `Profession` using its globally unique `ID`."""
  professionByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `Profession`.
    """
    nodeId: ID!
  ): Profession
  professionLocale(lang: String!, sourceId: Int!): ProfessionLocale
  professionLocaleByName(name: String!): ProfessionLocale

  """Reads a single `ProfessionLocale` using its globally unique `ID`."""
  professionLocaleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ProfessionLocale`.
    """
    nodeId: ID!
  ): ProfessionLocale

  """Reads and enables pagination through a set of `ProfessionLocale`."""
  professionLocales(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfessionLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfessionLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ProfessionLocale`."""
    orderBy: [ProfessionLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfessionLocalesConnection

  """Reads a set of `ProfessionLocale`."""
  professionLocalesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfessionLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfessionLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ProfessionLocale`."""
    orderBy: [ProfessionLocalesOrderBy!]
  ): [ProfessionLocale!]

  """Reads and enables pagination through a set of `Profession`."""
  professions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfessionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfessionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Profession`."""
    orderBy: [ProfessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfessionsConnection

  """Reads a set of `Profession`."""
  professionsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfessionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ProfessionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Profession`."""
    orderBy: [ProfessionsOrderBy!]
  ): [Profession!]
  promoCode(code: String!): PromoCode

  """Reads a single `PromoCode` using its globally unique `ID`."""
  promoCodeByNodeId(
    """The globally unique `ID` to be used in selecting a single `PromoCode`."""
    nodeId: ID!
  ): PromoCode

  """Reads and enables pagination through a set of `PromoCode`."""
  promoCodes(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PromoCodeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PromoCodeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `PromoCode`."""
    orderBy: [PromoCodesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PromoCodesConnection

  """Reads a set of `PromoCode`."""
  promoCodesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PromoCodeCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PromoCodeFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `PromoCode`."""
    orderBy: [PromoCodesOrderBy!]
  ): [PromoCode!]
  purchase(id: Int!): Purchase

  """Reads a single `Purchase` using its globally unique `ID`."""
  purchaseByNodeId(
    """The globally unique `ID` to be used in selecting a single `Purchase`."""
    nodeId: ID!
  ): Purchase

  """Reads and enables pagination through a set of `Purchase`."""
  purchases(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PurchaseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PurchaseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Purchase`."""
    orderBy: [PurchasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PurchasesConnection

  """Reads a set of `Purchase`."""
  purchasesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PurchaseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PurchaseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Purchase`."""
    orderBy: [PurchasesOrderBy!]
  ): [Purchase!]

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  score(id: Int!): Score

  """Reads a single `Score` using its globally unique `ID`."""
  scoreByNodeId(
    """The globally unique `ID` to be used in selecting a single `Score`."""
    nodeId: ID!
  ): Score
  scoreByPath(path: String!): Score

  """
  Calculate discount price for score, if score
  don't have price it will return 'null'.
  """
  scoreDiscount(code: String!, scoreId: Int!): Float
  scoreInstrument(instrumentId: Int!, scoreId: Int!): ScoreInstrument

  """Reads a single `ScoreInstrument` using its globally unique `ID`."""
  scoreInstrumentByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ScoreInstrument`.
    """
    nodeId: ID!
  ): ScoreInstrument

  """Reads and enables pagination through a set of `ScoreInstrument`."""
  scoreInstruments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreInstrumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreInstrumentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ScoreInstrument`."""
    orderBy: [ScoreInstrumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoreInstrumentsConnection

  """Reads a set of `ScoreInstrument`."""
  scoreInstrumentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreInstrumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreInstrumentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ScoreInstrument`."""
    orderBy: [ScoreInstrumentsOrderBy!]
  ): [ScoreInstrument!]
  scoreLocale(lang: String!, sourceId: Int!): ScoreLocale

  """Reads a single `ScoreLocale` using its globally unique `ID`."""
  scoreLocaleByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `ScoreLocale`.
    """
    nodeId: ID!
  ): ScoreLocale

  """Reads and enables pagination through a set of `ScoreLocale`."""
  scoreLocales(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ScoreLocale`."""
    orderBy: [ScoreLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoreLocalesConnection

  """Reads a set of `ScoreLocale`."""
  scoreLocalesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ScoreLocale`."""
    orderBy: [ScoreLocalesOrderBy!]
  ): [ScoreLocale!]

  """
  Generate purchase URL for specified score and current user,
  link will be valid only today. If score is already purchased
  by this user, resolver will return the score url.
  """
  scorePurchaseLink(input: PurchaseScoreInput!): String

  """Reads and enables pagination through a set of `Score`."""
  scores(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Score`."""
    orderBy: [ScoresOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoresConnection

  """Reads a set of `Score`."""
  scoresList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Score`."""
    orderBy: [ScoresOrderBy!]
  ): [Score!]
  tag(id: Int!): Tag
  tagByName(name: String!): Tag

  """Reads a single `Tag` using its globally unique `ID`."""
  tagByNodeId(
    """The globally unique `ID` to be used in selecting a single `Tag`."""
    nodeId: ID!
  ): Tag
  tagLocale(lang: String!, sourceId: Int!): TagLocale
  tagLocaleByName(name: String!): TagLocale

  """Reads a single `TagLocale` using its globally unique `ID`."""
  tagLocaleByNodeId(
    """The globally unique `ID` to be used in selecting a single `TagLocale`."""
    nodeId: ID!
  ): TagLocale

  """Reads and enables pagination through a set of `TagLocale`."""
  tagLocales(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `TagLocale`."""
    orderBy: [TagLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagLocalesConnection

  """Reads a set of `TagLocale`."""
  tagLocalesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TagLocale`."""
    orderBy: [TagLocalesOrderBy!]
  ): [TagLocale!]

  """Reads and enables pagination through a set of `Tag`."""
  tags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsConnection

  """Reads a set of `Tag`."""
  tagsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!]
  ): [Tag!]
  user(id: Int!): User
  userByEmail(email: String!): User
  userByFacebookId(facebookId: BigInt!): User

  """Reads a single `User` using its globally unique `ID`."""
  userByNodeId(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection

  """Reads a set of `User`."""
  usersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
  ): [User!]
}

"""All input for the `resetPassword` mutation."""
input ResetPasswordInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  password: String
  token: String
}

"""The output of our `resetPassword` mutation."""
type ResetPasswordPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  resetPasswordResult: ResetPasswordResult
}

type ResetPasswordResult {
  message: String
  success: Boolean
}

type Score implements Node {
  """Reads a single `Composition` that is related to this `Score`."""
  composition: Composition
  compositionId: Int
  createdAt: Datetime!
  description: String
  id: Int!

  """Reads and enables pagination through a set of `Instrument`."""
  instruments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InstrumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InstrumentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Instrument`."""
    orderBy: [InstrumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InstrumentsConnection!

  """Reads and enables pagination through a set of `Instrument`."""
  instrumentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InstrumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: InstrumentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Instrument`."""
    orderBy: [InstrumentsOrderBy!]
  ): [Instrument!]!
  isPurchased: Boolean

  """Reads and enables pagination through a set of `Language`."""
  languages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!]
  ): [Language!]!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """SEO friendly name to use in url"""
  path: String!
  preview: Preview

  """amount - currency pairs"""
  prices: JSON
  published: Boolean!

  """
  This is automatically changed if 'published' changed, can be manually provided by 'admin'
  """
  publishedAt: Datetime

  """Reads and enables pagination through a set of `Purchase`."""
  purchases(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PurchaseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PurchaseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Purchase`."""
    orderBy: [PurchasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PurchasesConnection!

  """Reads and enables pagination through a set of `Purchase`."""
  purchasesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PurchaseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PurchaseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Purchase`."""
    orderBy: [PurchasesOrderBy!]
  ): [Purchase!]!

  """Reads and enables pagination through a set of `ScoreInstrument`."""
  scoreInstruments(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreInstrumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreInstrumentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ScoreInstrument`."""
    orderBy: [ScoreInstrumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoreInstrumentsConnection!

  """Reads and enables pagination through a set of `ScoreInstrument`."""
  scoreInstrumentsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreInstrumentCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreInstrumentFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ScoreInstrument`."""
    orderBy: [ScoreInstrumentsOrderBy!]
  ): [ScoreInstrument!]!

  """Reads and enables pagination through a set of `ScoreLocale`."""
  scoreLocalesBySourceId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ScoreLocale`."""
    orderBy: [ScoreLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoreLocalesConnection!

  """Reads and enables pagination through a set of `ScoreLocale`."""
  scoreLocalesBySourceIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ScoreLocale`."""
    orderBy: [ScoreLocalesOrderBy!]
  ): [ScoreLocale!]!

  """
  Center side stamp page selection https://pdfcpu.io/getting_started/page_selection, ex. 2-
  """
  stampCenter: String

  """
  Right side stamp page selection https://pdfcpu.io/getting_started/page_selection, ex. 1
  """
  stampRight: String
  title: String
  updatedAt: Datetime!
  url: String

  """Reads and enables pagination through a set of `User`."""
  users(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersConnection!

  """Reads and enables pagination through a set of `User`."""
  usersList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: UserFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!]
  ): [User!]!
}

"""
A condition to be used against `Score` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ScoreCondition {
  """Checks for equality with the object’s `compositionId` field."""
  compositionId: Int

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `path` field."""
  path: String

  """Checks for equality with the object’s `prices` field."""
  prices: JSON

  """Checks for equality with the object’s `published` field."""
  published: Boolean

  """Checks for equality with the object’s `publishedAt` field."""
  publishedAt: Datetime

  """Checks for equality with the object’s `stampCenter` field."""
  stampCenter: String

  """Checks for equality with the object’s `stampRight` field."""
  stampRight: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime

  """Checks for equality with the object’s `url` field."""
  url: String
}

"""
A filter to be used against `Score` object types. All fields are combined with a logical ‘and.’
"""
input ScoreFilter {
  """Checks for all expressions in this list."""
  and: [ScoreFilter!]

  """Filter by the object’s `composition` relation."""
  composition: CompositionFilter

  """A related `composition` exists."""
  compositionExists: Boolean

  """Filter by the object’s `compositionId` field."""
  compositionId: IntFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `isPurchased` field."""
  isPurchased: BooleanFilter

  """Negates the expression."""
  not: ScoreFilter

  """Checks for any expressions in this list."""
  or: [ScoreFilter!]

  """Filter by the object’s `path` field."""
  path: StringFilter

  """Filter by the object’s `prices` field."""
  prices: JSONFilter

  """Filter by the object’s `published` field."""
  published: BooleanFilter

  """Filter by the object’s `publishedAt` field."""
  publishedAt: DatetimeFilter

  """Filter by the object’s `purchases` relation."""
  purchases: ScoreToManyPurchaseFilter

  """Some related `purchases` exist."""
  purchasesExist: Boolean

  """Filter by the object’s `scoreInstruments` relation."""
  scoreInstruments: ScoreToManyScoreInstrumentFilter

  """Some related `scoreInstruments` exist."""
  scoreInstrumentsExist: Boolean

  """Filter by the object’s `scoreLocalesBySourceId` relation."""
  scoreLocalesBySourceId: ScoreToManyScoreLocaleFilter

  """Some related `scoreLocalesBySourceId` exist."""
  scoreLocalesBySourceIdExist: Boolean

  """Filter by the object’s `stampCenter` field."""
  stampCenter: StringFilter

  """Filter by the object’s `stampRight` field."""
  stampRight: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter

  """Filter by the object’s `url` field."""
  url: StringFilter
}

"""An input for mutations affecting `Score`"""
input ScoreInput {
  compositionId: Int
  description: String

  """SEO friendly name to use in url"""
  path: String!

  """amount - currency pairs"""
  prices: JSON
  published: Boolean

  """
  Center side stamp page selection https://pdfcpu.io/getting_started/page_selection, ex. 2-
  """
  stampCenter: String

  """
  Right side stamp page selection https://pdfcpu.io/getting_started/page_selection, ex. 1
  """
  stampRight: String
  title: String
  url: Upload
}

type ScoreInstrument implements Node {
  createdAt: Datetime!

  """Reads a single `Instrument` that is related to this `ScoreInstrument`."""
  instrument: Instrument
  instrumentId: Int!

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Score` that is related to this `ScoreInstrument`."""
  score: Score
  scoreId: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `ScoreInstrument` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ScoreInstrumentCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `instrumentId` field."""
  instrumentId: Int

  """Checks for equality with the object’s `scoreId` field."""
  scoreId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `ScoreInstrument` object types. All fields are combined with a logical ‘and.’
"""
input ScoreInstrumentFilter {
  """Checks for all expressions in this list."""
  and: [ScoreInstrumentFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `instrument` relation."""
  instrument: InstrumentFilter

  """Filter by the object’s `instrumentId` field."""
  instrumentId: IntFilter

  """Negates the expression."""
  not: ScoreInstrumentFilter

  """Checks for any expressions in this list."""
  or: [ScoreInstrumentFilter!]

  """Filter by the object’s `score` relation."""
  score: ScoreFilter

  """Filter by the object’s `scoreId` field."""
  scoreId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `ScoreInstrument`"""
input ScoreInstrumentInput {
  instrumentId: Int!
  scoreId: Int!
}

"""
Represents an update to a `ScoreInstrument`. Fields that are set will be updated.
"""
input ScoreInstrumentPatch {
  instrumentId: Int
  scoreId: Int
}

"""A connection to a list of `ScoreInstrument` values."""
type ScoreInstrumentsConnection {
  """
  A list of edges which contains the `ScoreInstrument` and cursor to aid in pagination.
  """
  edges: [ScoreInstrumentsEdge!]!

  """A list of `ScoreInstrument` objects."""
  nodes: [ScoreInstrument]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ScoreInstrument` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ScoreInstrument` edge in the connection."""
type ScoreInstrumentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ScoreInstrument` at the end of the edge."""
  node: ScoreInstrument
}

"""Methods to use when ordering `ScoreInstrument`."""
enum ScoreInstrumentsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  INSTRUMENT_ID_ASC
  INSTRUMENT_ID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SCORE_ID_ASC
  SCORE_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

type ScoreLocale implements Node {
  createdAt: Datetime!
  description: String
  lang: String!

  """Reads a single `Language` that is related to this `ScoreLocale`."""
  languageByLang: Language

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Score` that is related to this `ScoreLocale`."""
  source: Score
  sourceId: Int!
  title: String
  updatedAt: Datetime!
}

"""
A condition to be used against `ScoreLocale` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ScoreLocaleCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `lang` field."""
  lang: String

  """Checks for equality with the object’s `sourceId` field."""
  sourceId: Int

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `ScoreLocale` object types. All fields are combined with a logical ‘and.’
"""
input ScoreLocaleFilter {
  """Checks for all expressions in this list."""
  and: [ScoreLocaleFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `lang` field."""
  lang: StringFilter

  """Filter by the object’s `languageByLang` relation."""
  languageByLang: LanguageFilter

  """Negates the expression."""
  not: ScoreLocaleFilter

  """Checks for any expressions in this list."""
  or: [ScoreLocaleFilter!]

  """Filter by the object’s `source` relation."""
  source: ScoreFilter

  """Filter by the object’s `sourceId` field."""
  sourceId: IntFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `ScoreLocale`"""
input ScoreLocaleInput {
  description: String
  lang: String!
  sourceId: Int!
  title: String
}

"""
Represents an update to a `ScoreLocale`. Fields that are set will be updated.
"""
input ScoreLocalePatch {
  description: String
  lang: String
  sourceId: Int
  title: String
}

"""A connection to a list of `ScoreLocale` values."""
type ScoreLocalesConnection {
  """
  A list of edges which contains the `ScoreLocale` and cursor to aid in pagination.
  """
  edges: [ScoreLocalesEdge!]!

  """A list of `ScoreLocale` objects."""
  nodes: [ScoreLocale]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ScoreLocale` you could get from the connection."""
  totalCount: Int!
}

"""A `ScoreLocale` edge in the connection."""
type ScoreLocalesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ScoreLocale` at the end of the edge."""
  node: ScoreLocale
}

"""Methods to use when ordering `ScoreLocale`."""
enum ScoreLocalesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  LANG_ASC
  LANG_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SOURCE_ID_ASC
  SOURCE_ID_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
Represents an update to a `Score`. Fields that are set will be updated.
"""
input ScorePatch {
  compositionId: Int
  description: String

  """SEO friendly name to use in url"""
  path: String

  """amount - currency pairs"""
  prices: JSON
  published: Boolean

  """
  This is automatically changed if 'published' changed, can be manually provided by 'admin'
  """
  publishedAt: Datetime

  """
  Center side stamp page selection https://pdfcpu.io/getting_started/page_selection, ex. 2-
  """
  stampCenter: String

  """
  Right side stamp page selection https://pdfcpu.io/getting_started/page_selection, ex. 1
  """
  stampRight: String
  title: String
  url: Upload
}

"""A connection to a list of `Score` values."""
type ScoresConnection {
  """
  A list of edges which contains the `Score` and cursor to aid in pagination.
  """
  edges: [ScoresEdge!]!

  """A list of `Score` objects."""
  nodes: [Score]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Score` you could get from the connection."""
  totalCount: Int!
}

"""A `Score` edge in the connection."""
type ScoresEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Score` at the end of the edge."""
  node: Score
}

"""Methods to use when ordering `Score`."""
enum ScoresOrderBy {
  COMPOSITION_ID_ASC
  COMPOSITION_ID_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PATH_ASC
  PATH_DESC
  PRICES_ASC
  PRICES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHED_ASC
  PUBLISHED_AT_ASC
  PUBLISHED_AT_DESC
  PUBLISHED_DESC
  STAMP_CENTER_ASC
  STAMP_CENTER_DESC
  STAMP_RIGHT_ASC
  STAMP_RIGHT_DESC
  TITLE_ASC
  TITLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  URL_ASC
  URL_DESC
}

"""
A filter to be used against many `Purchase` object types. All fields are combined with a logical ‘and.’
"""
input ScoreToManyPurchaseFilter {
  """
  Every related `Purchase` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PurchaseFilter

  """
  No related `Purchase` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PurchaseFilter

  """
  Some related `Purchase` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PurchaseFilter
}

"""
A filter to be used against many `ScoreInstrument` object types. All fields are combined with a logical ‘and.’
"""
input ScoreToManyScoreInstrumentFilter {
  """
  Every related `ScoreInstrument` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ScoreInstrumentFilter

  """
  No related `ScoreInstrument` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ScoreInstrumentFilter

  """
  Some related `ScoreInstrument` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ScoreInstrumentFilter
}

"""
A filter to be used against many `ScoreLocale` object types. All fields are combined with a logical ‘and.’
"""
input ScoreToManyScoreLocaleFilter {
  """
  Every related `ScoreLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ScoreLocaleFilter

  """
  No related `ScoreLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ScoreLocaleFilter

  """
  Some related `ScoreLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ScoreLocaleFilter
}

"""All input for the `sendVerificationEmail` mutation."""
input SendVerificationEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `sendVerificationEmail` mutation."""
type SendVerificationEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
  sendVerificationEmailResult: SendVerificationEmailResult
}

type SendVerificationEmailResult {
  message: String
  success: Boolean
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Included in the specified list."""
  in: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not included in the specified list."""
  notIn: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLikeInsensitive: String

  """
  Does not match the specified pattern using the SQL standard's definition of a regular expression.
  """
  notSimilarTo: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """
  Matches the specified pattern using the SQL standard's definition of a regular expression.
  """
  similarTo: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

type Tag implements Node {
  """Reads and enables pagination through a set of `Article`."""
  articles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticlesConnection!

  """Reads and enables pagination through a set of `Article`."""
  articlesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!]
  ): [Article!]!

  """Reads and enables pagination through a set of `ArticleTag`."""
  articleTags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleTagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ArticleTag`."""
    orderBy: [ArticleTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleTagsConnection!

  """Reads and enables pagination through a set of `ArticleTag`."""
  articleTagsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleTagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `ArticleTag`."""
    orderBy: [ArticleTagsOrderBy!]
  ): [ArticleTag!]!
  createdAt: Datetime!
  id: Int!

  """Reads and enables pagination through a set of `Language`."""
  languages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LanguagesConnection!

  """Reads and enables pagination through a set of `Language`."""
  languagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LanguageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LanguageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Language`."""
    orderBy: [LanguagesOrderBy!]
  ): [Language!]!

  """Reads and enables pagination through a set of `Musician`."""
  musicians(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusiciansConnection!

  """Reads and enables pagination through a set of `Musician`."""
  musiciansList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!]
  ): [Musician!]!

  """Reads and enables pagination through a set of `MusicianTag`."""
  musicianTags(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianTagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MusicianTag`."""
    orderBy: [MusicianTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianTagsConnection!

  """Reads and enables pagination through a set of `MusicianTag`."""
  musicianTagsList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MusicianTagCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MusicianTagFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `MusicianTag`."""
    orderBy: [MusicianTagsOrderBy!]
  ): [MusicianTag!]!
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads and enables pagination through a set of `TagLocale`."""
  tagLocalesBySourceId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `TagLocale`."""
    orderBy: [TagLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagLocalesConnection!

  """Reads and enables pagination through a set of `TagLocale`."""
  tagLocalesBySourceIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TagLocaleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TagLocaleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `TagLocale`."""
    orderBy: [TagLocalesOrderBy!]
  ): [TagLocale!]!
  updatedAt: Datetime!
}

"""
A condition to be used against `Tag` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TagCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `Tag` object types. All fields are combined with a logical ‘and.’
"""
input TagFilter {
  """Checks for all expressions in this list."""
  and: [TagFilter!]

  """Filter by the object’s `articleTags` relation."""
  articleTags: TagToManyArticleTagFilter

  """Some related `articleTags` exist."""
  articleTagsExist: Boolean

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `musicianTags` relation."""
  musicianTags: TagToManyMusicianTagFilter

  """Some related `musicianTags` exist."""
  musicianTagsExist: Boolean

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: TagFilter

  """Checks for any expressions in this list."""
  or: [TagFilter!]

  """Filter by the object’s `tagLocalesBySourceId` relation."""
  tagLocalesBySourceId: TagToManyTagLocaleFilter

  """Some related `tagLocalesBySourceId` exist."""
  tagLocalesBySourceIdExist: Boolean

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `Tag`"""
input TagInput {
  name: String
}

type TagLocale implements Node {
  createdAt: Datetime!
  lang: String!

  """Reads a single `Language` that is related to this `TagLocale`."""
  languageByLang: Language
  name: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """Reads a single `Tag` that is related to this `TagLocale`."""
  source: Tag
  sourceId: Int!
  updatedAt: Datetime!
}

"""
A condition to be used against `TagLocale` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TagLocaleCondition {
  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `lang` field."""
  lang: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `sourceId` field."""
  sourceId: Int

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `TagLocale` object types. All fields are combined with a logical ‘and.’
"""
input TagLocaleFilter {
  """Checks for all expressions in this list."""
  and: [TagLocaleFilter!]

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `lang` field."""
  lang: StringFilter

  """Filter by the object’s `languageByLang` relation."""
  languageByLang: LanguageFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: TagLocaleFilter

  """Checks for any expressions in this list."""
  or: [TagLocaleFilter!]

  """Filter by the object’s `source` relation."""
  source: TagFilter

  """Filter by the object’s `sourceId` field."""
  sourceId: IntFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `TagLocale`"""
input TagLocaleInput {
  lang: String!
  name: String
  sourceId: Int!
}

"""
Represents an update to a `TagLocale`. Fields that are set will be updated.
"""
input TagLocalePatch {
  lang: String
  name: String
  sourceId: Int
}

"""A connection to a list of `TagLocale` values."""
type TagLocalesConnection {
  """
  A list of edges which contains the `TagLocale` and cursor to aid in pagination.
  """
  edges: [TagLocalesEdge!]!

  """A list of `TagLocale` objects."""
  nodes: [TagLocale]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TagLocale` you could get from the connection."""
  totalCount: Int!
}

"""A `TagLocale` edge in the connection."""
type TagLocalesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TagLocale` at the end of the edge."""
  node: TagLocale
}

"""Methods to use when ordering `TagLocale`."""
enum TagLocalesOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  LANG_ASC
  LANG_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  SOURCE_ID_ASC
  SOURCE_ID_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Represents an update to a `Tag`. Fields that are set will be updated."""
input TagPatch {
  name: String
}

"""A connection to a list of `Tag` values."""
type TagsConnection {
  """
  A list of edges which contains the `Tag` and cursor to aid in pagination.
  """
  edges: [TagsEdge!]!

  """A list of `Tag` objects."""
  nodes: [Tag]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Tag` you could get from the connection."""
  totalCount: Int!
}

"""A `Tag` edge in the connection."""
type TagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Tag` at the end of the edge."""
  node: Tag
}

"""Methods to use when ordering `Tag`."""
enum TagsOrderBy {
  CREATED_AT_ASC
  CREATED_AT_DESC
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""
A filter to be used against many `ArticleTag` object types. All fields are combined with a logical ‘and.’
"""
input TagToManyArticleTagFilter {
  """
  Every related `ArticleTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ArticleTagFilter

  """
  No related `ArticleTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ArticleTagFilter

  """
  Some related `ArticleTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ArticleTagFilter
}

"""
A filter to be used against many `MusicianTag` object types. All fields are combined with a logical ‘and.’
"""
input TagToManyMusicianTagFilter {
  """
  Every related `MusicianTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: MusicianTagFilter

  """
  No related `MusicianTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: MusicianTagFilter

  """
  Some related `MusicianTag` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: MusicianTagFilter
}

"""
A filter to be used against many `TagLocale` object types. All fields are combined with a logical ‘and.’
"""
input TagToManyTagLocaleFilter {
  """
  Every related `TagLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: TagLocaleFilter

  """
  No related `TagLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: TagLocaleFilter

  """
  Some related `TagLocale` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: TagLocaleFilter
}

"""All input for the `updateArticleByNodeId` mutation."""
input UpdateArticleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Article` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Article` being updated.
  """
  patch: ArticlePatch!
}

"""All input for the `updateArticleByPath` mutation."""
input UpdateArticleByPathInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Article` being updated.
  """
  patch: ArticlePatch!

  """SEO friendly name to use in url"""
  path: String!
}

"""All input for the `updateArticleGalleryImageByNodeId` mutation."""
input UpdateArticleGalleryImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ArticleGalleryImage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ArticleGalleryImage` being updated.
  """
  patch: ArticleGalleryImagePatch!
}

"""All input for the `updateArticleGalleryImage` mutation."""
input UpdateArticleGalleryImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  galleryId: Int!
  imageId: Int!

  """
  An object where the defined keys will be set on the `ArticleGalleryImage` being updated.
  """
  patch: ArticleGalleryImagePatch!
}

"""The output of our update `ArticleGalleryImage` mutation."""
type UpdateArticleGalleryImagePayload {
  """The `ArticleGalleryImage` that was updated by this mutation."""
  articleGalleryImage: ArticleGalleryImage

  """An edge for our `ArticleGalleryImage`. May be used by Relay 1."""
  articleGalleryImageEdge(
    """The method to use when ordering `ArticleGalleryImage`."""
    orderBy: [ArticleGalleryImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleGalleryImagesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `ArticleGallery` that is related to this `ArticleGalleryImage`.
  """
  gallery: ArticleGallery

  """Reads a single `Image` that is related to this `ArticleGalleryImage`."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateArticleGenreByNodeId` mutation."""
input UpdateArticleGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ArticleGenre` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ArticleGenre` being updated.
  """
  patch: ArticleGenrePatch!
}

"""All input for the `updateArticleGenre` mutation."""
input UpdateArticleGenreInput {
  articleId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  genreId: Int!

  """
  An object where the defined keys will be set on the `ArticleGenre` being updated.
  """
  patch: ArticleGenrePatch!
}

"""The output of our update `ArticleGenre` mutation."""
type UpdateArticleGenrePayload {
  """Reads a single `Article` that is related to this `ArticleGenre`."""
  article: Article

  """The `ArticleGenre` that was updated by this mutation."""
  articleGenre: ArticleGenre

  """An edge for our `ArticleGenre`. May be used by Relay 1."""
  articleGenreEdge(
    """The method to use when ordering `ArticleGenre`."""
    orderBy: [ArticleGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleGenresEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Genre` that is related to this `ArticleGenre`."""
  genre: Genre

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateArticleImageByNodeId` mutation."""
input UpdateArticleImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ArticleImage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ArticleImage` being updated.
  """
  patch: ArticleImagePatch!
}

"""All input for the `updateArticleImage` mutation."""
input UpdateArticleImageInput {
  articleId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  imageId: Int!

  """
  An object where the defined keys will be set on the `ArticleImage` being updated.
  """
  patch: ArticleImagePatch!
}

"""The output of our update `ArticleImage` mutation."""
type UpdateArticleImagePayload {
  """Reads a single `Article` that is related to this `ArticleImage`."""
  article: Article

  """The `ArticleImage` that was updated by this mutation."""
  articleImage: ArticleImage

  """An edge for our `ArticleImage`. May be used by Relay 1."""
  articleImageEdge(
    """The method to use when ordering `ArticleImage`."""
    orderBy: [ArticleImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleImagesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Image` that is related to this `ArticleImage`."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateArticle` mutation."""
input UpdateArticleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  createImages: [ImageInput]
  genres: [Int!]
  id: Int!
  images: [Int!]

  """
  An object where the defined keys will be set on the `Article` being updated.
  """
  patch: ArticlePatch!
  tags: [Int!]
}

"""All input for the `updateArticleLocaleByNodeId` mutation."""
input UpdateArticleLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ArticleLocale` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ArticleLocale` being updated.
  """
  patch: ArticleLocalePatch!
}

"""All input for the `updateArticleLocale` mutation."""
input UpdateArticleLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!

  """
  An object where the defined keys will be set on the `ArticleLocale` being updated.
  """
  patch: ArticleLocalePatch!
  sourceId: Int!
}

"""The output of our update `ArticleLocale` mutation."""
type UpdateArticleLocalePayload {
  """The `ArticleLocale` that was updated by this mutation."""
  articleLocale: ArticleLocale

  """An edge for our `ArticleLocale`. May be used by Relay 1."""
  articleLocaleEdge(
    """The method to use when ordering `ArticleLocale`."""
    orderBy: [ArticleLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleLocalesEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Language` that is related to this `ArticleLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Article` that is related to this `ArticleLocale`."""
  source: Article
}

"""The output of our update `Article` mutation."""
type UpdateArticlePayload {
  """The `Article` that was updated by this mutation."""
  article: Article

  """An edge for our `Article`. May be used by Relay 1."""
  articleEdge(
    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticlesEdge

  """Reads a single `User` that is related to this `Article`."""
  author: User

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `ArticleGallery` that is related to this `Article`."""
  gallery: ArticleGallery

  """Reads a single `Image` that is related to this `Article`."""
  poster: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Article`."""
  updater: User
}

"""All input for the `updateArticleTagByNodeId` mutation."""
input UpdateArticleTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ArticleTag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ArticleTag` being updated.
  """
  patch: ArticleTagPatch!
}

"""All input for the `updateArticleTag` mutation."""
input UpdateArticleTagInput {
  articleId: Int!

  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ArticleTag` being updated.
  """
  patch: ArticleTagPatch!
  tagId: Int!
}

"""The output of our update `ArticleTag` mutation."""
type UpdateArticleTagPayload {
  """Reads a single `Article` that is related to this `ArticleTag`."""
  article: Article

  """The `ArticleTag` that was updated by this mutation."""
  articleTag: ArticleTag

  """An edge for our `ArticleTag`. May be used by Relay 1."""
  articleTagEdge(
    """The method to use when ordering `ArticleTag`."""
    orderBy: [ArticleTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticleTagsEdge

  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tag` that is related to this `ArticleTag`."""
  tag: Tag
}

"""All input for the `updateCompositionByNodeId` mutation."""
input UpdateCompositionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Composition` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Composition` being updated.
  """
  patch: CompositionPatch!
}

"""All input for the `updateCompositionByPath` mutation."""
input UpdateCompositionByPathInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Composition` being updated.
  """
  patch: CompositionPatch!

  """SEO friendly name to use in url"""
  path: String!
}

"""All input for the `updateComposition` mutation."""
input UpdateCompositionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Composition` being updated.
  """
  patch: CompositionPatch!
}

"""All input for the `updateCompositionLocaleByNodeId` mutation."""
input UpdateCompositionLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CompositionLocale` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CompositionLocale` being updated.
  """
  patch: CompositionLocalePatch!
}

"""All input for the `updateCompositionLocale` mutation."""
input UpdateCompositionLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!

  """
  An object where the defined keys will be set on the `CompositionLocale` being updated.
  """
  patch: CompositionLocalePatch!
  sourceId: Int!
}

"""The output of our update `CompositionLocale` mutation."""
type UpdateCompositionLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CompositionLocale` that was updated by this mutation."""
  compositionLocale: CompositionLocale

  """An edge for our `CompositionLocale`. May be used by Relay 1."""
  compositionLocaleEdge(
    """The method to use when ordering `CompositionLocale`."""
    orderBy: [CompositionLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompositionLocalesEdge

  """Reads a single `Language` that is related to this `CompositionLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Composition` that is related to this `CompositionLocale`.
  """
  source: Composition
}

"""The output of our update `Composition` mutation."""
type UpdateCompositionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Composition` that was updated by this mutation."""
  composition: Composition

  """An edge for our `Composition`. May be used by Relay 1."""
  compositionEdge(
    """The method to use when ordering `Composition`."""
    orderBy: [CompositionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CompositionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type UpdateCurrentUserPayload {
  currentUser: User!
  query: Query
}

"""All input for the `updateDocumentByNodeId` mutation."""
input UpdateDocumentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Document` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Document` being updated.
  """
  patch: DocumentPatch!
}

"""All input for the `updateDocument` mutation."""
input UpdateDocumentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Document` being updated.
  """
  patch: DocumentPatch!
}

"""All input for the `updateDocumentLocaleByNodeId` mutation."""
input UpdateDocumentLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `DocumentLocale` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `DocumentLocale` being updated.
  """
  patch: DocumentLocalePatch!
}

"""All input for the `updateDocumentLocale` mutation."""
input UpdateDocumentLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!

  """
  An object where the defined keys will be set on the `DocumentLocale` being updated.
  """
  patch: DocumentLocalePatch!
  sourceId: Int!
}

"""The output of our update `DocumentLocale` mutation."""
type UpdateDocumentLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `DocumentLocale` that was updated by this mutation."""
  documentLocale: DocumentLocale

  """An edge for our `DocumentLocale`. May be used by Relay 1."""
  documentLocaleEdge(
    """The method to use when ordering `DocumentLocale`."""
    orderBy: [DocumentLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DocumentLocalesEdge

  """Reads a single `Language` that is related to this `DocumentLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Document` that is related to this `DocumentLocale`."""
  source: Document
}

"""The output of our update `Document` mutation."""
type UpdateDocumentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Document` that was updated by this mutation."""
  document: Document

  """An edge for our `Document`. May be used by Relay 1."""
  documentEdge(
    """The method to use when ordering `Document`."""
    orderBy: [DocumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): DocumentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGenreByName` mutation."""
input UpdateGenreByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!

  """
  An object where the defined keys will be set on the `Genre` being updated.
  """
  patch: GenrePatch!
}

"""All input for the `updateGenreByNodeId` mutation."""
input UpdateGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Genre` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Genre` being updated.
  """
  patch: GenrePatch!
}

"""All input for the `updateGenre` mutation."""
input UpdateGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Genre` being updated.
  """
  patch: GenrePatch!
}

"""All input for the `updateGenreLocaleByName` mutation."""
input UpdateGenreLocaleByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!

  """
  An object where the defined keys will be set on the `GenreLocale` being updated.
  """
  patch: GenreLocalePatch!
}

"""All input for the `updateGenreLocaleByNodeId` mutation."""
input UpdateGenreLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GenreLocale` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GenreLocale` being updated.
  """
  patch: GenreLocalePatch!
}

"""All input for the `updateGenreLocale` mutation."""
input UpdateGenreLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!

  """
  An object where the defined keys will be set on the `GenreLocale` being updated.
  """
  patch: GenreLocalePatch!
  sourceId: Int!
}

"""The output of our update `GenreLocale` mutation."""
type UpdateGenreLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GenreLocale` that was updated by this mutation."""
  genreLocale: GenreLocale

  """An edge for our `GenreLocale`. May be used by Relay 1."""
  genreLocaleEdge(
    """The method to use when ordering `GenreLocale`."""
    orderBy: [GenreLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GenreLocalesEdge

  """Reads a single `Language` that is related to this `GenreLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Genre` that is related to this `GenreLocale`."""
  source: Genre
}

"""The output of our update `Genre` mutation."""
type UpdateGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Genre` that was updated by this mutation."""
  genre: Genre

  """An edge for our `Genre`. May be used by Relay 1."""
  genreEdge(
    """The method to use when ordering `Genre`."""
    orderBy: [GenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): GenresEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGroupByNodeId` mutation."""
input UpdateGroupByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
}

"""All input for the `updateGroupImageByNodeId` mutation."""
input UpdateGroupImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupImage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GroupImage` being updated.
  """
  patch: GroupImagePatch!
}

"""All input for the `updateGroupImage` mutation."""
input UpdateGroupImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int!
  imageId: Int!

  """
  An object where the defined keys will be set on the `GroupImage` being updated.
  """
  patch: GroupImagePatch!
}

"""The output of our update `GroupImage` mutation."""
type UpdateGroupImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Group` that is related to this `GroupImage`."""
  group: Group

  """The `GroupImage` that was updated by this mutation."""
  groupImage: GroupImage

  """An edge for our `GroupImage`. May be used by Relay 1."""
  groupImageEdge(
    """The method to use when ordering `GroupImage`."""
    orderBy: [GroupImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupImagesEdge

  """Reads a single `Image` that is related to this `GroupImage`."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGroup` mutation."""
input UpdateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  patch: GroupPatch!
}

"""All input for the `updateGroupLocaleByNodeId` mutation."""
input UpdateGroupLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupLocale` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GroupLocale` being updated.
  """
  patch: GroupLocalePatch!
}

"""All input for the `updateGroupLocale` mutation."""
input UpdateGroupLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!

  """
  An object where the defined keys will be set on the `GroupLocale` being updated.
  """
  patch: GroupLocalePatch!
  sourceId: Int!
}

"""The output of our update `GroupLocale` mutation."""
type UpdateGroupLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupLocale` that was updated by this mutation."""
  groupLocale: GroupLocale

  """An edge for our `GroupLocale`. May be used by Relay 1."""
  groupLocaleEdge(
    """The method to use when ordering `GroupLocale`."""
    orderBy: [GroupLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupLocalesEdge

  """Reads a single `Language` that is related to this `GroupLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `GroupLocale`."""
  source: Group
}

"""All input for the `updateGroupMusicianByNodeId` mutation."""
input UpdateGroupMusicianByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupMusician` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GroupMusician` being updated.
  """
  patch: GroupMusicianPatch!
}

"""All input for the `updateGroupMusician` mutation."""
input UpdateGroupMusicianInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int!
  musicianId: Int!

  """
  An object where the defined keys will be set on the `GroupMusician` being updated.
  """
  patch: GroupMusicianPatch!
}

"""The output of our update `GroupMusician` mutation."""
type UpdateGroupMusicianPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Group` that is related to this `GroupMusician`."""
  group: Group

  """The `GroupMusician` that was updated by this mutation."""
  groupMusician: GroupMusician

  """An edge for our `GroupMusician`. May be used by Relay 1."""
  groupMusicianEdge(
    """The method to use when ordering `GroupMusician`."""
    orderBy: [GroupMusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupMusiciansEdge

  """Reads a single `Musician` that is related to this `GroupMusician`."""
  musician: Musician

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our update `Group` mutation."""
type UpdateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was updated by this mutation."""
  group: Group

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupsEdge

  """Reads a single `Image` that is related to this `Group`."""
  photo: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateGroupPlaylistByNodeId` mutation."""
input UpdateGroupPlaylistByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupPlaylist` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GroupPlaylist` being updated.
  """
  patch: GroupPlaylistPatch!
}

"""All input for the `updateGroupPlaylist` mutation."""
input UpdateGroupPlaylistInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupId: Int!

  """
  An object where the defined keys will be set on the `GroupPlaylist` being updated.
  """
  patch: GroupPlaylistPatch!
  playlistId: Int!
}

"""The output of our update `GroupPlaylist` mutation."""
type UpdateGroupPlaylistPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Group` that is related to this `GroupPlaylist`."""
  group: Group

  """The `GroupPlaylist` that was updated by this mutation."""
  groupPlaylist: GroupPlaylist

  """An edge for our `GroupPlaylist`. May be used by Relay 1."""
  groupPlaylistEdge(
    """The method to use when ordering `GroupPlaylist`."""
    orderBy: [GroupPlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): GroupPlaylistsEdge

  """Reads a single `Playlist` that is related to this `GroupPlaylist`."""
  playlist: Playlist

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateImageByNodeId` mutation."""
input UpdateImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Image` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Image` being updated.
  """
  patch: ImagePatch!
}

"""All input for the `updateImage` mutation."""
input UpdateImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Image` being updated.
  """
  patch: ImagePatch!
}

"""All input for the `updateImageLocaleByNodeId` mutation."""
input UpdateImageLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ImageLocale` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ImageLocale` being updated.
  """
  patch: ImageLocalePatch!
}

"""All input for the `updateImageLocale` mutation."""
input UpdateImageLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!

  """
  An object where the defined keys will be set on the `ImageLocale` being updated.
  """
  patch: ImageLocalePatch!
  sourceId: Int!
}

"""The output of our update `ImageLocale` mutation."""
type UpdateImageLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ImageLocale` that was updated by this mutation."""
  imageLocale: ImageLocale

  """An edge for our `ImageLocale`. May be used by Relay 1."""
  imageLocaleEdge(
    """The method to use when ordering `ImageLocale`."""
    orderBy: [ImageLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImageLocalesEdge

  """Reads a single `Language` that is related to this `ImageLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Image` that is related to this `ImageLocale`."""
  source: Image
}

"""The output of our update `Image` mutation."""
type UpdateImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was updated by this mutation."""
  image: Image

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateInstrumentByNodeId` mutation."""
input UpdateInstrumentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Instrument` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Instrument` being updated.
  """
  patch: InstrumentPatch!
}

"""All input for the `updateInstrument` mutation."""
input UpdateInstrumentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Instrument` being updated.
  """
  patch: InstrumentPatch!
}

"""All input for the `updateInstrumentLocaleByNodeId` mutation."""
input UpdateInstrumentLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `InstrumentLocale` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `InstrumentLocale` being updated.
  """
  patch: InstrumentLocalePatch!
}

"""All input for the `updateInstrumentLocale` mutation."""
input UpdateInstrumentLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!

  """
  An object where the defined keys will be set on the `InstrumentLocale` being updated.
  """
  patch: InstrumentLocalePatch!
  sourceId: Int!
}

"""The output of our update `InstrumentLocale` mutation."""
type UpdateInstrumentLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InstrumentLocale` that was updated by this mutation."""
  instrumentLocale: InstrumentLocale

  """An edge for our `InstrumentLocale`. May be used by Relay 1."""
  instrumentLocaleEdge(
    """The method to use when ordering `InstrumentLocale`."""
    orderBy: [InstrumentLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): InstrumentLocalesEdge

  """Reads a single `Language` that is related to this `InstrumentLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Instrument` that is related to this `InstrumentLocale`.
  """
  source: Instrument
}

"""The output of our update `Instrument` mutation."""
type UpdateInstrumentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Instrument` that was updated by this mutation."""
  instrument: Instrument

  """An edge for our `Instrument`. May be used by Relay 1."""
  instrumentEdge(
    """The method to use when ordering `Instrument`."""
    orderBy: [InstrumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): InstrumentsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMediaByNodeId` mutation."""
input UpdateMediaByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Media` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Media` being updated.
  """
  patch: MediaPatch!
}

"""All input for the `updateMedia` mutation."""
input UpdateMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Media` being updated.
  """
  patch: MediaPatch!
}

"""All input for the `updateMediaLocaleByNodeId` mutation."""
input UpdateMediaLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MediaLocale` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MediaLocale` being updated.
  """
  patch: MediaLocalePatch!
}

"""All input for the `updateMediaLocale` mutation."""
input UpdateMediaLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!

  """
  An object where the defined keys will be set on the `MediaLocale` being updated.
  """
  patch: MediaLocalePatch!
  sourceId: Int!
}

"""The output of our update `MediaLocale` mutation."""
type UpdateMediaLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Language` that is related to this `MediaLocale`."""
  languageByLang: Language

  """The `MediaLocale` that was updated by this mutation."""
  mediaLocale: MediaLocale

  """An edge for our `MediaLocale`. May be used by Relay 1."""
  mediaLocaleEdge(
    """The method to use when ordering `MediaLocale`."""
    orderBy: [MediaLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaLocalesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Media` that is related to this `MediaLocale`."""
  source: Media
}

"""The output of our update `Media` mutation."""
type UpdateMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Media` that was updated by this mutation."""
  media: Media

  """An edge for our `Media`. May be used by Relay 1."""
  mediaEdge(
    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMusicianByNodeId` mutation."""
input UpdateMusicianByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Musician` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Musician` being updated.
  """
  patch: MusicianPatch!
}

"""All input for the `updateMusicianByPath` mutation."""
input UpdateMusicianByPathInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Musician` being updated.
  """
  patch: MusicianPatch!

  """SEO friendly name to use in url"""
  path: String!
}

"""All input for the `updateMusicianCompositionByNodeId` mutation."""
input UpdateMusicianCompositionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MusicianComposition` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MusicianComposition` being updated.
  """
  patch: MusicianCompositionPatch!
}

"""All input for the `updateMusicianComposition` mutation."""
input UpdateMusicianCompositionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  compositionId: Int!
  musicianId: Int!

  """
  An object where the defined keys will be set on the `MusicianComposition` being updated.
  """
  patch: MusicianCompositionPatch!
}

"""The output of our update `MusicianComposition` mutation."""
type UpdateMusicianCompositionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Composition` that is related to this `MusicianComposition`.
  """
  composition: Composition

  """
  Reads a single `Musician` that is related to this `MusicianComposition`.
  """
  musician: Musician

  """The `MusicianComposition` that was updated by this mutation."""
  musicianComposition: MusicianComposition

  """An edge for our `MusicianComposition`. May be used by Relay 1."""
  musicianCompositionEdge(
    """The method to use when ordering `MusicianComposition`."""
    orderBy: [MusicianCompositionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianCompositionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMusicianGenreByNodeId` mutation."""
input UpdateMusicianGenreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MusicianGenre` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MusicianGenre` being updated.
  """
  patch: MusicianGenrePatch!
}

"""All input for the `updateMusicianGenre` mutation."""
input UpdateMusicianGenreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  genreId: Int!
  musicianId: Int!

  """
  An object where the defined keys will be set on the `MusicianGenre` being updated.
  """
  patch: MusicianGenrePatch!
}

"""The output of our update `MusicianGenre` mutation."""
type UpdateMusicianGenrePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Genre` that is related to this `MusicianGenre`."""
  genre: Genre

  """Reads a single `Musician` that is related to this `MusicianGenre`."""
  musician: Musician

  """The `MusicianGenre` that was updated by this mutation."""
  musicianGenre: MusicianGenre

  """An edge for our `MusicianGenre`. May be used by Relay 1."""
  musicianGenreEdge(
    """The method to use when ordering `MusicianGenre`."""
    orderBy: [MusicianGenresOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianGenresEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMusicianImageByNodeId` mutation."""
input UpdateMusicianImageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MusicianImage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MusicianImage` being updated.
  """
  patch: MusicianImagePatch!
}

"""All input for the `updateMusicianImage` mutation."""
input UpdateMusicianImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  imageId: Int!
  musicianId: Int!

  """
  An object where the defined keys will be set on the `MusicianImage` being updated.
  """
  patch: MusicianImagePatch!
}

"""The output of our update `MusicianImage` mutation."""
type UpdateMusicianImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Image` that is related to this `MusicianImage`."""
  image: Image

  """Reads a single `Musician` that is related to this `MusicianImage`."""
  musician: Musician

  """The `MusicianImage` that was updated by this mutation."""
  musicianImage: MusicianImage

  """An edge for our `MusicianImage`. May be used by Relay 1."""
  musicianImageEdge(
    """The method to use when ordering `MusicianImage`."""
    orderBy: [MusicianImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianImagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMusician` mutation."""
input UpdateMusicianInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Musician` being updated.
  """
  patch: MusicianPatch!
}

"""All input for the `updateMusicianLocaleByNodeId` mutation."""
input UpdateMusicianLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MusicianLocale` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MusicianLocale` being updated.
  """
  patch: MusicianLocalePatch!
}

"""All input for the `updateMusicianLocale` mutation."""
input UpdateMusicianLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!

  """
  An object where the defined keys will be set on the `MusicianLocale` being updated.
  """
  patch: MusicianLocalePatch!
  sourceId: Int!
}

"""The output of our update `MusicianLocale` mutation."""
type UpdateMusicianLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Language` that is related to this `MusicianLocale`."""
  languageByLang: Language

  """The `MusicianLocale` that was updated by this mutation."""
  musicianLocale: MusicianLocale

  """An edge for our `MusicianLocale`. May be used by Relay 1."""
  musicianLocaleEdge(
    """The method to use when ordering `MusicianLocale`."""
    orderBy: [MusicianLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianLocalesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Musician` that is related to this `MusicianLocale`."""
  source: Musician
}

"""The output of our update `Musician` mutation."""
type UpdateMusicianPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Musician` that was updated by this mutation."""
  musician: Musician

  """An edge for our `Musician`. May be used by Relay 1."""
  musicianEdge(
    """The method to use when ordering `Musician`."""
    orderBy: [MusiciansOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusiciansEdge

  """Reads a single `Image` that is related to this `Musician`."""
  photo: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMusicianPlaylistByNodeId` mutation."""
input UpdateMusicianPlaylistByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MusicianPlaylist` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MusicianPlaylist` being updated.
  """
  patch: MusicianPlaylistPatch!
}

"""All input for the `updateMusicianPlaylist` mutation."""
input UpdateMusicianPlaylistInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  musicianId: Int!

  """
  An object where the defined keys will be set on the `MusicianPlaylist` being updated.
  """
  patch: MusicianPlaylistPatch!
  playlistId: Int!
}

"""The output of our update `MusicianPlaylist` mutation."""
type UpdateMusicianPlaylistPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Musician` that is related to this `MusicianPlaylist`."""
  musician: Musician

  """The `MusicianPlaylist` that was updated by this mutation."""
  musicianPlaylist: MusicianPlaylist

  """An edge for our `MusicianPlaylist`. May be used by Relay 1."""
  musicianPlaylistEdge(
    """The method to use when ordering `MusicianPlaylist`."""
    orderBy: [MusicianPlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianPlaylistsEdge

  """Reads a single `Playlist` that is related to this `MusicianPlaylist`."""
  playlist: Playlist

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMusicianProfessionByNodeId` mutation."""
input UpdateMusicianProfessionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MusicianProfession` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MusicianProfession` being updated.
  """
  patch: MusicianProfessionPatch!
}

"""All input for the `updateMusicianProfession` mutation."""
input UpdateMusicianProfessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  musicianId: Int!

  """
  An object where the defined keys will be set on the `MusicianProfession` being updated.
  """
  patch: MusicianProfessionPatch!
  professionId: Int!
}

"""The output of our update `MusicianProfession` mutation."""
type UpdateMusicianProfessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Reads a single `Musician` that is related to this `MusicianProfession`.
  """
  musician: Musician

  """The `MusicianProfession` that was updated by this mutation."""
  musicianProfession: MusicianProfession

  """An edge for our `MusicianProfession`. May be used by Relay 1."""
  musicianProfessionEdge(
    """The method to use when ordering `MusicianProfession`."""
    orderBy: [MusicianProfessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianProfessionsEdge

  """
  Reads a single `Profession` that is related to this `MusicianProfession`.
  """
  profession: Profession

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateMusicianTagByNodeId` mutation."""
input UpdateMusicianTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MusicianTag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MusicianTag` being updated.
  """
  patch: MusicianTagPatch!
}

"""All input for the `updateMusicianTag` mutation."""
input UpdateMusicianTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  musicianId: Int!

  """
  An object where the defined keys will be set on the `MusicianTag` being updated.
  """
  patch: MusicianTagPatch!
  tagId: Int!
}

"""The output of our update `MusicianTag` mutation."""
type UpdateMusicianTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Musician` that is related to this `MusicianTag`."""
  musician: Musician

  """The `MusicianTag` that was updated by this mutation."""
  musicianTag: MusicianTag

  """An edge for our `MusicianTag`. May be used by Relay 1."""
  musicianTagEdge(
    """The method to use when ordering `MusicianTag`."""
    orderBy: [MusicianTagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MusicianTagsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tag` that is related to this `MusicianTag`."""
  tag: Tag
}

"""All input for the `updateOpenMessageByNodeId` mutation."""
input UpdateOpenMessageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OpenMessage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OpenMessage` being updated.
  """
  patch: OpenMessagePatch!
}

"""All input for the `updateOpenMessage` mutation."""
input UpdateOpenMessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `OpenMessage` being updated.
  """
  patch: OpenMessagePatch!
}

"""The output of our update `OpenMessage` mutation."""
type UpdateOpenMessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OpenMessage` that was updated by this mutation."""
  openMessage: OpenMessage

  """An edge for our `OpenMessage`. May be used by Relay 1."""
  openMessageEdge(
    """The method to use when ordering `OpenMessage`."""
    orderBy: [OpenMessagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): OpenMessagesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePageSectionByNodeId` mutation."""
input UpdatePageSectionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PageSection` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PageSection` being updated.
  """
  patch: PageSectionPatch!
}

"""All input for the `updatePageSection` mutation."""
input UpdatePageSectionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!
  page: String!

  """
  An object where the defined keys will be set on the `PageSection` being updated.
  """
  patch: PageSectionPatch!
}

"""The output of our update `PageSection` mutation."""
type UpdatePageSectionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PageSection` that was updated by this mutation."""
  pageSection: PageSection

  """An edge for our `PageSection`. May be used by Relay 1."""
  pageSectionEdge(
    """The method to use when ordering `PageSection`."""
    orderBy: [PageSectionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PageSectionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePlaylistByNodeId` mutation."""
input UpdatePlaylistByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Playlist` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Playlist` being updated.
  """
  patch: PlaylistPatch!
}

"""All input for the `updatePlaylist` mutation."""
input UpdatePlaylistInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Playlist` being updated.
  """
  patch: PlaylistPatch!
}

"""All input for the `updatePlaylistLocaleByNodeId` mutation."""
input UpdatePlaylistLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlaylistLocale` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PlaylistLocale` being updated.
  """
  patch: PlaylistLocalePatch!
}

"""All input for the `updatePlaylistLocale` mutation."""
input UpdatePlaylistLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!

  """
  An object where the defined keys will be set on the `PlaylistLocale` being updated.
  """
  patch: PlaylistLocalePatch!
  sourceId: Int!
}

"""The output of our update `PlaylistLocale` mutation."""
type UpdatePlaylistLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Language` that is related to this `PlaylistLocale`."""
  languageByLang: Language

  """The `PlaylistLocale` that was updated by this mutation."""
  playlistLocale: PlaylistLocale

  """An edge for our `PlaylistLocale`. May be used by Relay 1."""
  playlistLocaleEdge(
    """The method to use when ordering `PlaylistLocale`."""
    orderBy: [PlaylistLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistLocalesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Playlist` that is related to this `PlaylistLocale`."""
  source: Playlist
}

"""All input for the `updatePlaylistMediaByNodeId` mutation."""
input UpdatePlaylistMediaByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PlaylistMedia` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PlaylistMedia` being updated.
  """
  patch: PlaylistMediaPatch!
}

"""All input for the `updatePlaylistMedia` mutation."""
input UpdatePlaylistMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  mediaId: Int!

  """
  An object where the defined keys will be set on the `PlaylistMedia` being updated.
  """
  patch: PlaylistMediaPatch!
  playlistId: Int!
}

"""The output of our update `PlaylistMedia` mutation."""
type UpdatePlaylistMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Media` that is related to this `PlaylistMedia`."""
  media: Media

  """Reads a single `Playlist` that is related to this `PlaylistMedia`."""
  playlist: Playlist

  """The `PlaylistMedia` that was updated by this mutation."""
  playlistMedia: PlaylistMedia

  """An edge for our `PlaylistMedia`. May be used by Relay 1."""
  playlistMediaEdge(
    """The method to use when ordering `PlaylistMedia`."""
    orderBy: [PlaylistMediasOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistMediasEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""The output of our update `Playlist` mutation."""
type UpdatePlaylistPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `User` that is related to this `Playlist`."""
  owner: User

  """The `Playlist` that was updated by this mutation."""
  playlist: Playlist

  """An edge for our `Playlist`. May be used by Relay 1."""
  playlistEdge(
    """The method to use when ordering `Playlist`."""
    orderBy: [PlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updateProfessionByName` mutation."""
input UpdateProfessionByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!

  """
  An object where the defined keys will be set on the `Profession` being updated.
  """
  patch: ProfessionPatch!
}

"""All input for the `updateProfessionByNodeId` mutation."""
input UpdateProfessionByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Profession` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Profession` being updated.
  """
  patch: ProfessionPatch!
}

"""All input for the `updateProfession` mutation."""
input UpdateProfessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Profession` being updated.
  """
  patch: ProfessionPatch!
}

"""All input for the `updateProfessionLocaleByName` mutation."""
input UpdateProfessionLocaleByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!

  """
  An object where the defined keys will be set on the `ProfessionLocale` being updated.
  """
  patch: ProfessionLocalePatch!
}

"""All input for the `updateProfessionLocaleByNodeId` mutation."""
input UpdateProfessionLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProfessionLocale` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProfessionLocale` being updated.
  """
  patch: ProfessionLocalePatch!
}

"""All input for the `updateProfessionLocale` mutation."""
input UpdateProfessionLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!

  """
  An object where the defined keys will be set on the `ProfessionLocale` being updated.
  """
  patch: ProfessionLocalePatch!
  sourceId: Int!
}

"""The output of our update `ProfessionLocale` mutation."""
type UpdateProfessionLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Language` that is related to this `ProfessionLocale`."""
  languageByLang: Language

  """The `ProfessionLocale` that was updated by this mutation."""
  professionLocale: ProfessionLocale

  """An edge for our `ProfessionLocale`. May be used by Relay 1."""
  professionLocaleEdge(
    """The method to use when ordering `ProfessionLocale`."""
    orderBy: [ProfessionLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfessionLocalesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Profession` that is related to this `ProfessionLocale`.
  """
  source: Profession
}

"""The output of our update `Profession` mutation."""
type UpdateProfessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Profession` that was updated by this mutation."""
  profession: Profession

  """An edge for our `Profession`. May be used by Relay 1."""
  professionEdge(
    """The method to use when ordering `Profession`."""
    orderBy: [ProfessionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProfessionsEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePromoCodeByNodeId` mutation."""
input UpdatePromoCodeByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PromoCode` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PromoCode` being updated.
  """
  patch: PromoCodePatch!
}

"""All input for the `updatePromoCode` mutation."""
input UpdatePromoCodeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """this also will be used as id"""
  code: String!

  """
  An object where the defined keys will be set on the `PromoCode` being updated.
  """
  patch: PromoCodePatch!
}

"""The output of our update `PromoCode` mutation."""
type UpdatePromoCodePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PromoCode` that was updated by this mutation."""
  promoCode: PromoCode

  """An edge for our `PromoCode`. May be used by Relay 1."""
  promoCodeEdge(
    """The method to use when ordering `PromoCode`."""
    orderBy: [PromoCodesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PromoCodesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `updatePurchaseByNodeId` mutation."""
input UpdatePurchaseByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Purchase` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Purchase` being updated.
  """
  patch: PurchasePatch!
}

"""All input for the `updatePurchase` mutation."""
input UpdatePurchaseInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Purchase` being updated.
  """
  patch: PurchasePatch!
}

"""The output of our update `Purchase` mutation."""
type UpdatePurchasePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Purchase` that was updated by this mutation."""
  purchase: Purchase

  """An edge for our `Purchase`. May be used by Relay 1."""
  purchaseEdge(
    """The method to use when ordering `Purchase`."""
    orderBy: [PurchasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PurchasesEdge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Score` that is related to this `Purchase`."""
  score: Score

  """Reads a single `User` that is related to this `Purchase`."""
  user: User
}

"""All input for the `updateScoreByNodeId` mutation."""
input UpdateScoreByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Score` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Score` being updated.
  """
  patch: ScorePatch!
}

"""All input for the `updateScoreByPath` mutation."""
input UpdateScoreByPathInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Score` being updated.
  """
  patch: ScorePatch!

  """SEO friendly name to use in url"""
  path: String!
}

"""All input for the `updateScore` mutation."""
input UpdateScoreInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """Instrument IDs to attach to this score."""
  instruments: [Int!]

  """
  An object where the defined keys will be set on the `Score` being updated.
  """
  patch: ScorePatch!

  """To generate preview use this options."""
  previewOptions: CreatePreviewOptions
  prices: [Price!]
}

"""All input for the `updateScoreInstrumentByNodeId` mutation."""
input UpdateScoreInstrumentByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ScoreInstrument` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ScoreInstrument` being updated.
  """
  patch: ScoreInstrumentPatch!
}

"""All input for the `updateScoreInstrument` mutation."""
input UpdateScoreInstrumentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  instrumentId: Int!

  """
  An object where the defined keys will be set on the `ScoreInstrument` being updated.
  """
  patch: ScoreInstrumentPatch!
  scoreId: Int!
}

"""The output of our update `ScoreInstrument` mutation."""
type UpdateScoreInstrumentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Instrument` that is related to this `ScoreInstrument`."""
  instrument: Instrument

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Score` that is related to this `ScoreInstrument`."""
  score: Score

  """The `ScoreInstrument` that was updated by this mutation."""
  scoreInstrument: ScoreInstrument

  """An edge for our `ScoreInstrument`. May be used by Relay 1."""
  scoreInstrumentEdge(
    """The method to use when ordering `ScoreInstrument`."""
    orderBy: [ScoreInstrumentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoreInstrumentsEdge
}

"""All input for the `updateScoreLocaleByNodeId` mutation."""
input UpdateScoreLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ScoreLocale` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ScoreLocale` being updated.
  """
  patch: ScoreLocalePatch!
}

"""All input for the `updateScoreLocale` mutation."""
input UpdateScoreLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!

  """
  An object where the defined keys will be set on the `ScoreLocale` being updated.
  """
  patch: ScoreLocalePatch!
  sourceId: Int!
}

"""The output of our update `ScoreLocale` mutation."""
type UpdateScoreLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Language` that is related to this `ScoreLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `ScoreLocale` that was updated by this mutation."""
  scoreLocale: ScoreLocale

  """An edge for our `ScoreLocale`. May be used by Relay 1."""
  scoreLocaleEdge(
    """The method to use when ordering `ScoreLocale`."""
    orderBy: [ScoreLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoreLocalesEdge

  """Reads a single `Score` that is related to this `ScoreLocale`."""
  source: Score
}

"""The output of our update `Score` mutation."""
type UpdateScorePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Composition` that is related to this `Score`."""
  composition: Composition

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Score` that was updated by this mutation."""
  score: Score

  """An edge for our `Score`. May be used by Relay 1."""
  scoreEdge(
    """The method to use when ordering `Score`."""
    orderBy: [ScoresOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoresEdge
}

"""All input for the `updateTagByName` mutation."""
input UpdateTagByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  patch: TagPatch!
}

"""All input for the `updateTagByNodeId` mutation."""
input UpdateTagByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Tag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  patch: TagPatch!
}

"""All input for the `updateTag` mutation."""
input UpdateTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `Tag` being updated.
  """
  patch: TagPatch!
}

"""All input for the `updateTagLocaleByName` mutation."""
input UpdateTagLocaleByNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  name: String!

  """
  An object where the defined keys will be set on the `TagLocale` being updated.
  """
  patch: TagLocalePatch!
}

"""All input for the `updateTagLocaleByNodeId` mutation."""
input UpdateTagLocaleByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TagLocale` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TagLocale` being updated.
  """
  patch: TagLocalePatch!
}

"""All input for the `updateTagLocale` mutation."""
input UpdateTagLocaleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  lang: String!

  """
  An object where the defined keys will be set on the `TagLocale` being updated.
  """
  patch: TagLocalePatch!
  sourceId: Int!
}

"""The output of our update `TagLocale` mutation."""
type UpdateTagLocalePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """Reads a single `Language` that is related to this `TagLocale`."""
  languageByLang: Language

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Tag` that is related to this `TagLocale`."""
  source: Tag

  """The `TagLocale` that was updated by this mutation."""
  tagLocale: TagLocale

  """An edge for our `TagLocale`. May be used by Relay 1."""
  tagLocaleEdge(
    """The method to use when ordering `TagLocale`."""
    orderBy: [TagLocalesOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagLocalesEdge
}

"""The output of our update `Tag` mutation."""
type UpdateTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `Tag` that was updated by this mutation."""
  tag: Tag

  """An edge for our `Tag`. May be used by Relay 1."""
  tagEdge(
    """The method to use when ordering `Tag`."""
    orderBy: [TagsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TagsEdge
}

"""All input for the `updateUserByEmail` mutation."""
input UpdateUserByEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  email: String!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUserByFacebookId` mutation."""
input UpdateUserByFacebookIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  facebookId: BigInt!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUserByNodeId` mutation."""
input UpdateUserByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """The `User` that was updated by this mutation."""
  user: User

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User implements Node {
  """Reads and enables pagination through a set of `Article`."""
  articlesByUpdaterId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticlesConnection!

  """Reads and enables pagination through a set of `Article`."""
  articlesByUpdaterIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!]
  ): [Article!]!

  """Reads and enables pagination through a set of `Article`."""
  authoredArticles(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ArticlesConnection!

  """Reads and enables pagination through a set of `Article`."""
  authoredArticlesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ArticleCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ArticleFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Article`."""
    orderBy: [ArticlesOrderBy!]
  ): [Article!]!

  """Reads and enables pagination through a set of `Image`."""
  authorImages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesConnection!

  """Reads and enables pagination through a set of `Image`."""
  authorImagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!]
  ): [Image!]!
  avatar: String
  createdAt: Datetime!
  email: String
  emailVerificationStatus: EmailVerificationStatus
  facebookId: BigInt
  firstName: String
  id: Int!
  lastName: String

  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  password: String

  """Reads and enables pagination through a set of `Playlist`."""
  playlistsByOwnerId(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Playlist`."""
    orderBy: [PlaylistsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PlaylistsConnection!

  """Reads and enables pagination through a set of `Playlist`."""
  playlistsByOwnerIdList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PlaylistCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PlaylistFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Playlist`."""
    orderBy: [PlaylistsOrderBy!]
  ): [Playlist!]!

  """Reads and enables pagination through a set of `Purchase`."""
  purchases(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PurchaseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PurchaseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Purchase`."""
    orderBy: [PurchasesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PurchasesConnection!

  """Reads and enables pagination through a set of `Purchase`."""
  purchasesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PurchaseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PurchaseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Purchase`."""
    orderBy: [PurchasesOrderBy!]
  ): [Purchase!]!
  role: UserRole!

  """Reads and enables pagination through a set of `Score`."""
  scores(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Score`."""
    orderBy: [ScoresOrderBy!] = [PRIMARY_KEY_ASC]
  ): ScoresConnection!

  """Reads and enables pagination through a set of `Score`."""
  scoresList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScoreCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ScoreFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Score`."""
    orderBy: [ScoresOrderBy!]
  ): [Score!]!
  updatedAt: Datetime!

  """Reads and enables pagination through a set of `Image`."""
  updaterImages(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ImagesConnection!

  """Reads and enables pagination through a set of `Image`."""
  updaterImagesList(
    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ImageFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Skip the first `n` values."""
    offset: Int

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!]
  ): [Image!]!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `avatar` field."""
  avatar: String

  """Checks for equality with the object’s `createdAt` field."""
  createdAt: Datetime

  """Checks for equality with the object’s `email` field."""
  email: String

  """Checks for equality with the object’s `facebookId` field."""
  facebookId: BigInt

  """Checks for equality with the object’s `firstName` field."""
  firstName: String

  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `lastName` field."""
  lastName: String

  """Checks for equality with the object’s `password` field."""
  password: String

  """Checks for equality with the object’s `role` field."""
  role: UserRole

  """Checks for equality with the object’s `updatedAt` field."""
  updatedAt: Datetime
}

"""
A filter to be used against `User` object types. All fields are combined with a logical ‘and.’
"""
input UserFilter {
  """Checks for all expressions in this list."""
  and: [UserFilter!]

  """Filter by the object’s `articlesByUpdaterId` relation."""
  articlesByUpdaterId: UserToManyArticleFilter

  """Some related `articlesByUpdaterId` exist."""
  articlesByUpdaterIdExist: Boolean

  """Filter by the object’s `authoredArticles` relation."""
  authoredArticles: UserToManyArticleFilter

  """Some related `authoredArticles` exist."""
  authoredArticlesExist: Boolean

  """Filter by the object’s `avatar` field."""
  avatar: StringFilter

  """Filter by the object’s `createdAt` field."""
  createdAt: DatetimeFilter

  """Filter by the object’s `email` field."""
  email: StringFilter

  """Filter by the object’s `emailVerificationStatus` field."""
  emailVerificationStatus: EmailVerificationStatusFilter

  """Filter by the object’s `facebookId` field."""
  facebookId: BigIntFilter

  """Filter by the object’s `firstName` field."""
  firstName: StringFilter

  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `lastName` field."""
  lastName: StringFilter

  """Negates the expression."""
  not: UserFilter

  """Checks for any expressions in this list."""
  or: [UserFilter!]

  """Filter by the object’s `password` field."""
  password: StringFilter

  """Filter by the object’s `playlistsByOwnerId` relation."""
  playlistsByOwnerId: UserToManyPlaylistFilter

  """Some related `playlistsByOwnerId` exist."""
  playlistsByOwnerIdExist: Boolean

  """Filter by the object’s `purchases` relation."""
  purchases: UserToManyPurchaseFilter

  """Some related `purchases` exist."""
  purchasesExist: Boolean

  """Filter by the object’s `role` field."""
  role: UserRoleFilter

  """Filter by the object’s `updatedAt` field."""
  updatedAt: DatetimeFilter
}

"""An input for mutations affecting `User`"""
input UserInput {
  avatar: Upload
  email: String
  facebookId: BigInt
  firstName: String
  lastName: String
  password: String
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  avatar: Upload
  email: String
  facebookId: BigInt
  firstName: String
  lastName: String
}

enum UserRole {
  ADMIN
  EDITOR
  MEMBER
}

"""
A filter to be used against UserRole fields. All fields are combined with a logical ‘and.’
"""
input UserRoleFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UserRole

  """Equal to the specified value."""
  equalTo: UserRole

  """Greater than the specified value."""
  greaterThan: UserRole

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UserRole

  """Included in the specified list."""
  in: [UserRole!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: UserRole

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UserRole

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UserRole

  """Not equal to the specified value."""
  notEqualTo: UserRole

  """Not included in the specified list."""
  notIn: [UserRole!]
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """A list of `User` objects."""
  nodes: [User]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  AVATAR_ASC
  AVATAR_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  EMAIL_ASC
  EMAIL_DESC
  FACEBOOK_ID_ASC
  FACEBOOK_ID_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  ID_ASC
  ID_DESC
  LAST_NAME_ASC
  LAST_NAME_DESC
  NATURAL
  PASSWORD_ASC
  PASSWORD_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  ROLE_ASC
  ROLE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

"""
A filter to be used against many `Article` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyArticleFilter {
  """
  Every related `Article` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: ArticleFilter

  """
  No related `Article` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: ArticleFilter

  """
  Some related `Article` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: ArticleFilter
}

"""
A filter to be used against many `Playlist` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyPlaylistFilter {
  """
  Every related `Playlist` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PlaylistFilter

  """
  No related `Playlist` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PlaylistFilter

  """
  Some related `Playlist` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PlaylistFilter
}

"""
A filter to be used against many `Purchase` object types. All fields are combined with a logical ‘and.’
"""
input UserToManyPurchaseFilter {
  """
  Every related `Purchase` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  every: PurchaseFilter

  """
  No related `Purchase` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  none: PurchaseFilter

  """
  Some related `Purchase` matches the filter criteria. All fields are combined with a logical ‘and.’
  """
  some: PurchaseFilter
}

"""All input for the `verifyEmail` mutation."""
input VerifyEmailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  code: String
}

"""The output of our `verifyEmail` mutation."""
type VerifyEmailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  emailVerifyResult: EmailVerifyResult

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}
